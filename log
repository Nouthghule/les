><><><><><><><><><><>
DivEx multi speaking. gonna multi my numerator ((3)+(g)) by (6)
Ex.multi returning ((6)*((3)+(g)))
Ex.multi returning ((24)*(v))
BossExpression : [((0)+((((3)+(g)))/((20))+(((3)+(g)))/((20))+(((6)*((3)+(g))))/((20))+((24)*(v))+(v)))]
Ex (((3)+(g)))/((20)) contains g !
Ex (((3)+(g)))/((20)) contains g !
Ex (((6)*((3)+(g))))/((20)) contains g !
Ex ((24)*(v)) contains v !
Ex (v) contains v !


€€ unwrap speaking : gonna replace self [(g)] with (g)
€€ unwrap speaking : gonna replace self [(g)] with (g)
€€ unwrap speaking : gonna replace self [(g)] with (g)
€€ unwrap speaking : gonna replace self [(v)] with (v)
€€ unwrap speaking : gonna replace self [(v)] with (v)
Gonna crunch ((0)+(((3)+(g)))/((20))+(((3)+(g)))/((20))+(((6)*((3)+(g))))/((20))+((24)*(v))+(v))up real bad now.
Ex.multi returning ((0)*(1))
ŦŦŦ now going to add ((0)) to the list
DivEx multi speaking. gonna multi my numerator ((3)+(g)) by (1)
Ex.multi returning ((1)*((3)+(g)))
ŦŦŦ now going to add (((1)*((3)+(g))))/((20)) to the list
comparing() to ()/((20))
DivEx multi speaking. gonna multi my numerator ((3)+(g)) by (1)
Ex.multi returning ((1)*((3)+(g)))
ŦŦŦ now going to add (((1)*((3)+(g))))/((20)) to the list
comparing() to ()/((20))
comparing()/((20)) to ()/((20))
ŦŦŦ found it's equal without first : (((1)*((3)+(g))))/((20))
ŦŦŦ created a target to crunch up : (((1)*((3)+(g)))+((1)*((3)+(g))))
ŦŦŦ now going to add ((1)*((3)+(g))) to the list
ŦŦŦ now going to add ((1)*((3)+(g))) to the list
comparing(((3)+(g))) to (((3)+(g)))
ŦŦŦ found it's equal without first : ((1)*((3)+(g)))
Replacing (1) by (2)
€€ unwrap speaking : gonna replace self [(g)] with (g)
DivEx multi speaking. gonna multi my numerator ((6)*((3)+(g))) by (1)
ŦŦŦ now going to add (((6)*((3)+(g))))/((20)) to the list
comparing() to ()/((20))
comparing()/((20)) to ()/((20))
ŦŦŦ found it's equal without first : (((2)*((3)+(g))))/((20))
ŦŦŦ created a target to crunch up : (((2)*((3)+(g)))+((6)*((3)+(g))))
ŦŦŦ now going to add ((2)*((3)+(g))) to the list
ŦŦŦ now going to add ((6)*((3)+(g))) to the list
comparing(((3)+(g))) to (((3)+(g)))
ŦŦŦ found it's equal without first : ((2)*((3)+(g)))
Replacing (2) by (8)
€€ unwrap speaking : gonna replace self [(g)] with (g)
ŦŦŦ now going to add ((24)*(v)) to the list
comparing() to ((v))
comparing()/((20)) to ((v))
Ex.multi returning ((1)*(v))
ŦŦŦ now going to add ((1)*(v)) to the list
comparing() to ((v))
comparing()/((20)) to ((v))
comparing((v)) to ((v))
ŦŦŦ found it's equal without first : ((24)*(v))
ŦŦŦ created a target to crunch up : ((1)+(24))
Ex.multi returning ((1)*(1))
ŦŦŦ now going to add ((1)) to the list
Ex.multi returning ((1)*(24))
ŦŦŦ now going to add ((24)) to the list
comparing() to ()
ŦŦŦ found it's equal without first : ((1))
Replacing (1) by (25)
€€ unwrap speaking : gonna replace self [((25))] with (25)
BossExpression : [((0)+((((3)+(g)))/((20))+(((3)+(g)))/((20))+(((6)*((3)+(g))))/((20))+((24)*(v))+(v)))]
=====================
BossExpression : [((((8)*((3)+(g))))/((20))+((0))+((25)*(v)))]
Ex (((8)*((3)+(g))))/((20)) contains g !
Ex (((1)*((3)+(g))))/((20)) contains g !
Ex (((6)*((3)+(g))))/((20)) contains g !
Ex ((25)*(v)) contains v !
Ex (v) contains v !
Nest contains following variables :
g
v


