(x*2x)/12 + 3x -1 = 12 + x
(x*2x)/12 + 3x -1 = 12 + x
(x*2x)/12 + 3x -1 = 12 + x
(x*2x)/12 + 3x -1 = 12 + x
tparser ( ( x * 2 * x ) / 12 + 3 * x - 1 = 12 + x )
tparser ( ( x * 2 * x ) / 12 + 3 * x - 1 = 12 + x )
ready S : ( ( x * 2 * x ) / 12 + 3 * x - 1 = 12 + x ) 
operators push (
operators push (
new op ( vs last op (
operators pop (
operators pop (
operators return back :  ( (
members push x
operators push *
new op * vs last op (
members push 2
operators push *
new op * vs last op *
operators pop *
operators pop *
operators undo pop before the last pop.
new op * vs last op (
members push x
operators push )
operators pop : )
operators pop into execute
operators pop : (
operators push /
new op / vs last op (
members push 12
operators push +
new op + vs last op /
operators pop +
operators pop /
operators undo pop before the last pop.
new op + vs last op (
members push 3
operators push *
new op * vs last op +
members push x
operators push -
new op - vs last op *
operators pop -
operators pop *
operators undo pop before the last pop.
new op - vs last op +
operators pop -
operators pop +
operators undo pop before the last pop.
new op - vs last op (
members push 1
operators push =
new op = vs last op -
operators pop =
operators pop -
operators undo pop before the last pop.
new op = vs last op (
operators pop =
operators pop (
operators return back :  ( =
members push 12
operators push +
new op + vs last op =
members push x
operators push )
operators pop : )
operators pop into execute
operators pop into execute
operators pop : (
x 2 * x * 12 / 3 x * + 1 - 12 x + =
 ((x)*(2)) x * 12 / 3 x * + 1 - 12 x + = 
 ((((x)*(2)))*(x)) 12 / 3 x * + 1 - 12 x + = 
 ((((((x)*(2)))*(x)))/(12)) 3 x * + 1 - 12 x + = 
 ((((((x)*(2)))*(x)))/(12)) ((3)*(x)) + 1 - 12 x + = 
 ((((((((x)*(2)))*(x)))/(12)))+(((3)*(x)))) 1 - 12 x + = 
 ((((((((((x)*(2)))*(x)))/(12)))+(((3)*(x)))))-(1)) 12 x + = 
 ((((((((((x)*(2)))*(x)))/(12)))+(((3)*(x)))))-(1)) ((12)+(x)) = 
 ((((((((((((x)*(2)))*(x)))/(12)))+(((3)*(x)))))-(1)))=(((12)+(x)))) 
Parsing ex from  ((((((((((((x)*(2)))*(x)))/(12)))+(((3)*(x)))))-(1)))=(((12)+(x)))) 
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default *
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP:default *
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP:default /
TP:Start of new ex.
TP:default 1
TP:default 2
TP: end of ex of 12
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 3
TP: end of ex of 3
TP:default *
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:default 1
TP: end of ex of 1
TP: end of ex of 
TP: end of ex of 
TP:default =
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 1
TP:default 2
TP: end of ex of 12
TP:default +
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
Negating ()
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of * and val of ((x)*(2))
DE Blank value with rs of * and val of ((x)*(2))
DE Blank value with rs of $ and val of (((2)*(x)))
DE replacing self with only child! : ((2)*(x))
DE Blank value with rs of $ and val of (((2)*(x)))
DE replacing self with only child! : ((2)*(x))
DE replaceself x
DE Blank value with rs of * and val of (((2)*(x))*(x))
DE Blank value with rs of * and val of (((2)*(x))*(x))
DE Blank value with rs of $ and val of ((((2)*(x))*(x)))
DE replacing self with only child! : (((2)*(x))*(x))
DE Blank value with rs of $ and val of (((2)*(x)*(x)))
DE replacing self with only child! : ((2)*(x)*(x))
DE Blank value with rs of $ and val of (((2)*(x)*(x)))
DE replacing self with only child! : ((2)*(x)*(x))
DE replaceself numeric 12
DE Blank value with rs of / and val of (((2)*(x)*(x))/(12))
DE Blank value with rs of / and val of (((2)*(x)*(x))/(12))
DE Blank value with rs of $ and val of ((((2)*(x)*(x))/(12)))
DE replacing self with only child! : (((2)*(x)*(x))/(12))
DE Blank value with rs of $ and val of ((((2)*(x)*(x))/(12)))
DE replacing self with only child! : (((2)*(x)*(x))/(12))
DE replaceself numeric 3
DE replaceself x
DE Blank value with rs of * and val of ((3)*(x))
DE Blank value with rs of * and val of ((3)*(x))
DE Blank value with rs of $ and val of (((3)*(x)))
DE replacing self with only child! : ((3)*(x))
DE Blank value with rs of $ and val of (((3)*(x)))
DE replacing self with only child! : ((3)*(x))
DE Blank value with rs of + and val of ((((2)*(x)*(x))/(12))+((3)*(x)))
DE Blank value with rs of + and val of ((((2)*(x)*(x))/(12))+((3)*(x)))
DE Blank value with rs of $ and val of (((((2)*(x)*(x))/(12))+((3)*(x))))
DE replacing self with only child! : ((((2)*(x)*(x))/(12))+((3)*(x)))
DE Blank value with rs of $ and val of (((((2)*(x)*(x))/(12))+((3)*(x))))
DE replacing self with only child! : ((((2)*(x)*(x))/(12))+((3)*(x)))
DE replaceself numeric 1
DE Blank value with rs of + and val of (((((2)*(x)*(x))/(12))+((3)*(x)))+((-1)*(1)))
DE Blank value with rs of + and val of (((((2)*(x)*(x))/(12))+((3)*(x)))+((-1)*(1)))
DE Blank value with rs of $ and val of ((((((2)*(x)*(x))/(12))+((3)*(x)))+((-1)*(1))))
DE replacing self with only child! : (((((2)*(x)*(x))/(12))+((3)*(x)))+((-1)*(1)))
DE Blank value with rs of $ and val of (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x))))
DE replacing self with only child! : ((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))
DE Blank value with rs of $ and val of (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x))))
DE replacing self with only child! : ((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))
DE replaceself numeric 12
DE replaceself x
DE Blank value with rs of + and val of ((12)+(x))
DE Blank value with rs of + and val of ((12)+(x))
DE Blank value with rs of $ and val of (((12)+(x)))
DE replacing self with only child! : ((12)+(x))
DE Blank value with rs of $ and val of (((12)+(x)))
DE replacing self with only child! : ((12)+(x))
DE Blank value with rs of = and val of (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
DE Blank value with rs of = and val of (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
DE Blank value with rs of $ and val of ((((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x))))
DE replacing self with only child! : (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
DE Blank value with rs of $ and val of ((((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x))))
DE replacing self with only child! : (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
TextParser returning : (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
Parsed ex as : (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
#hf 30000
#hf 30017
#hf 30017
startingstate hfval is 30017
=====================================STATE 1 , generation 0
CurrState is (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
It's hf is 30017
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.DefOperator@355da254
I'm (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x))) and I'm about to propagate.
EqEx : ((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@5305068a
adding it.
nouth.les.AlteratorAdd@1f32e575
adding it.
EqEx : ((12)+(x)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
nouth.les.AlteratorAdd@279f2327
adding it.
nouth.les.AlteratorAdd@2ff4acd0
adding it.
nouth.les.MultiCruncherPlain@54bedef2 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 1
nouth.les.MultiCruncherPlain@54bedef2 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((2)*(x)*(x))/(12))+((-1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherExpand@5caf905d is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@a09ee92 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-1)
mcd worklist (1)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@30f39991 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@4a574795 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (-1)
MCP adding (1)
MCP res ((-1)*(1))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@4a574795 has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.DivCruncherSimplifyNew@f6f4d33 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
DCSN in : (((2)*(x)*(x))/(12))
DCSN dealt : (((x)*(x))/(6))
MCP adding (x)
MCP res (((x)^(2)))
DCSN list is subexlist of (((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@f6f4d33 has brought me a new dirty child : (((((x)^(2))/((6)^(1)))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)^(2))/((6)^(1)))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.DivCruncherEmergeDivs@23fc625e is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPlain@3f99bd52 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 1
nouth.les.MultiCruncherPlain@3f99bd52 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((2)*(x)*(x))/(12))+((-1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherExpand@3a71f4dd is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7adf9f5f is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-1)
mcd worklist (1)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@85ede7b is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@5674cd4d is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (-1)
MCP adding (1)
MCP res ((-1)*(1))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@5674cd4d has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherPlain@63961c42 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 1
nouth.les.MultiCruncherPlain@63961c42 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((2)*(x)*(x))/(12))+((-1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherExpand@65b54208 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1be6f5c3 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-1)
mcd worklist (1)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@38af3868 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@77459877 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (-1)
MCP adding (1)
MCP res ((-1)*(1))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@77459877 has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.AddCruncherEqual@5b2133b1 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((12))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@72ea2f77 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (-1)
ACSD 0 not addex (1)
ACSD 0 not addex ((-1)*(1))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@72ea2f77 has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.AddCruncherEqual@33c7353a is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((12))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@681a9515 is messing around now.
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (-1)
ACSD 0 not addex (1)
ACSD 0 not addex ((-1)*(1))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@681a9515 has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.AlteratorAdd@5305068a is messing around now.
It's altEx is ((((-1)*(2)*(x)*(x))/(12))+((-1)*(3)*(x)))
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((12))
ACE rwif ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@5305068a has brought me a new dirty child : ((((-1))+((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((12))))
State polishing child : ((((-1))+((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((12))))
nouth.les.AlteratorAdd@1f32e575 is messing around now.
It's altEx is (((-1)*(-1)*(1)))
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@1f32e575 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((0))+((3)*(x)))=(((1)*(x))+((13))))
State polishing child : (((((2)*(x)*(x))/(12))+((0))+((3)*(x)))=(((1)*(x))+((13))))
nouth.les.AlteratorAdd@279f2327 is messing around now.
It's altEx is (((-1)*(x)))
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((12))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@279f2327 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-1))+((2)*(x)))=(((0)*(x))+((12))))
State polishing child : (((((2)*(x)*(x))/(12))+((-1))+((2)*(x)))=(((0)*(x))+((12))))
nouth.les.AlteratorAdd@2ff4acd0 is messing around now.
It's altEx is (((-1)*(12)))
on child (((((2)*(x)*(x))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((12))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@2ff4acd0 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
State polishing child : (((((2)*(x)*(x))/(12))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
It just propagated.
#hf 30000
#hf 30015
#hf 31015
#hf 40000
#hf 40018
#hf 41018
#hf 30000
#hf 30016
#hf 31016
#hf 30000
#hf 30018
#hf 31018
#hf 30000
#hf 30013
#hf 31013
#hf 30000
#hf 30014
#hf 31014
#hf 30000
#hf 30013
#hf 31013
#hf 30000
#hf 30013
#hf 31013
New unique children : <(((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x))) ; (((((2)*((x)^(2)))/(12))+((-1)*(1))+((3)*(x)))=((12)+(x))) ; (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x))) ; (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x))) ; ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x)))) ; (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x))) ; (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12)) ; (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x)) ; >
Children hfs : <31015 ; 41018 ; 31016 ; 31018 ; 31013 ; 31014 ; 31013 ; 31013 ; >
Children ops : <nouth.les.MultiCruncherPlain@54bedef2nouth.les.MultiCruncherPowerise@4a574795nouth.les.DivCruncherSimplifyNew@f6f4d33nouth.les.AddCruncherSingleDenominator@72ea2f77nouth.les.AlteratorAdd@5305068anouth.les.AlteratorAdd@1f32e575nouth.les.AlteratorAdd@279f2327nouth.les.AlteratorAdd@2ff4acd0>
=====================================STATE 2 , generation 1
CurrState is ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
It's hf is 31013
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.AlteratorAdd@5305068a
I'm ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x)))) and I'm about to propagate.
EqEx : (-1) is suggesting alterators now.
EqEx : ((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
nouth.les.AlteratorAdd@3af49f1c
adding it.
nouth.les.AlteratorAdd@19469ea2
adding it.
nouth.les.MultiCruncherPlain@13221655 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@2f2c9b19 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@31befd9f is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
mcd worklist (-2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@1c20c684 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@1fb3ebeb is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@1fb3ebeb has brought me a new dirty child : ((-1)=((12)+(((-2)*((x)^(2)))/(12))+((-2)*(x))))
State polishing child : ((-1)=((12)+(((-2)*((x)^(2)))/(12))+((-2)*(x))))
nouth.les.DivCruncherSimplifyNew@548c4f57 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
DCSN in : (((-2)*(x)*(x))/(12))
DCSN dealt : (((-1)*(x)*(x))/(6))
MCP adding (-1)
MCP adding (x)
MCP res (((-1)^(1))*((x)^(2)))
DCSN list is subexlist of (((-1)^(1))*((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@548c4f57 has brought me a new dirty child : ((-1)=((12)+((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
State polishing child : ((-1)=((12)+((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
nouth.les.DivCruncherEmergeDivs@1218025c is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPlain@816f27d is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@87aac27 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@3e3abc88 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
mcd worklist (-2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@6ce253f1 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@53d8d10a is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@53d8d10a has brought me a new dirty child : ((-1)=((12)+(((-2)*((x)^(2)))/(12))+((-2)*(x))))
State polishing child : ((-1)=((12)+(((-2)*((x)^(2)))/(12))+((-2)*(x))))
nouth.les.AddCruncherEqual@e9e54c2 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@65ab7765 is messing around now.
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
ACSD 0 not addex (-1)
ACSD 0 not addex (12)
ACSD 0 not addex (-2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((-2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((-2)*(x)*(x))/(12))
ACSD 0 not addex (-2)
ACSD 0 not addex (x)
ACSD 0 not addex ((-2)*(x))
DCS start ((12)/(1))
DCS after crossout before single plain :((12)) / ((1))
DCS single plain :((12)) / ((1))
DCS computing gcd from 12 and 1 = 1
DCS ZERO return resulting ((12)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex ((-1)=((((-2)*(12)*(x))+((-2)*(x)*(x))+((12)*(12)))/(12)))
into val 1
nouth.les.AddCruncherSingleDenominator@65ab7765 has brought me a new dirty child : ((-1)=((((-2)*(12)*(x))+((-2)*(x)*(x))+((12)*(12)))/(12)))
State polishing child : ((-1)=((((-2)*(12)*(x))+((-2)*(x)*(x))+((12)*(12)))/(12)))
nouth.les.AlteratorAdd@3af49f1c is messing around now.
It's altEx is ((((-1)*(-2)*(x)*(x))/(12))+((-1)*(-2)*(x)))
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@3af49f1c has brought me a new dirty child : ((((-1))+(((2)*(x)*(x))/(12))+((2)*(x)))=(((0)*(x))+((0)/(12))+((12))))
State polishing child : ((((-1))+(((2)*(x)*(x))/(12))+((2)*(x)))=(((0)*(x))+((0)/(12))+((12))))
nouth.les.AlteratorAdd@19469ea2 is messing around now.
It's altEx is (((-1)*(12)))
on child ((-1)=((12)+(((-2)*(x)*(x))/(12))+((-2)*(x))))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 1
nouth.les.AlteratorAdd@19469ea2 has brought me a new dirty child : ((((-13)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((0))))
State polishing child : ((((-13)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((0))))
It just propagated.
#hf 40000
#hf 40014
#hf 42014
#hf 40000
#hf 40014
#hf 42014
#hf 30000
#hf 30016
#hf 32016
#hf 30000
#hf 30012
#hf 32012
New unique children : <((-1)=((12)+(((-2)*((x)^(2)))/(12))+((-2)*(x)))) ; ((-1)=((12)+(((-1)*((x)^(2)))/(6))+((-2)*(x)))) ; ((-1)=((((-2)*(12)*(x))+((-2)*(x)*(x))+((12)*(12)))/(12))) ; ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x)))) ; >
Children hfs : <42014 ; 42014 ; 32016 ; 32012 ; >
Children ops : <nouth.les.MultiCruncherPowerise@1fb3ebebnouth.les.DivCruncherSimplifyNew@548c4f57nouth.les.AddCruncherSingleDenominator@65ab7765nouth.les.AlteratorAdd@19469ea2>
=====================================STATE 3 , generation 1
CurrState is (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
It's hf is 31013
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.AlteratorAdd@279f2327
I'm (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12)) and I'm about to propagate.
EqEx : ((-1)+(((2)*(x)*(x))/(12))+((2)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
nouth.les.AlteratorAdd@1b28cdfa
adding it.
nouth.les.AlteratorAdd@eed1f14
adding it.
EqEx : (12) is suggesting alterators now.
nouth.les.MultiCruncherPlain@7229724f is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherExpand@4c873330 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@119d7047 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@776ec8df is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherPowerise@4eec7777 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@4eec7777 has brought me a new dirty child : (((-1)+(((2)*((x)^(2)))/(12))+((2)*(x)))=(12))
State polishing child : (((-1)+(((2)*((x)^(2)))/(12))+((2)*(x)))=(12))
nouth.les.DivCruncherSimplifyNew@3b07d329 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
DCSN in : (((2)*(x)*(x))/(12))
DCSN dealt : (((x)*(x))/(6))
MCP adding (x)
MCP res (((x)^(2)))
DCSN list is subexlist of (((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@3b07d329 has brought me a new dirty child : (((-1)+(((x)^(2))/((6)^(1)))+((2)*(x)))=(12))
State polishing child : (((-1)+(((x)^(2))/((6)^(1)))+((2)*(x)))=(12))
nouth.les.DivCruncherEmergeDivs@41629346 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherPlain@404b9385 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherExpand@6d311334 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@682a0b20 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@3d075dc0 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherPowerise@214c265e is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@214c265e has brought me a new dirty child : (((-1)+(((2)*((x)^(2)))/(12))+((2)*(x)))=(12))
State polishing child : (((-1)+(((2)*((x)^(2)))/(12))+((2)*(x)))=(12))
nouth.les.AddCruncherEqual@448139f0 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@7cca494b is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
ACSD 0 not addex (-1)
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x))
DCS start ((12)/(1))
DCS after crossout before single plain :((12)) / ((1))
DCS single plain :((12)) / ((1))
DCS computing gcd from 12 and 1 = 1
DCS ZERO return resulting ((12)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (((((-1)*(12))+((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(12))
into val 1
nouth.les.AddCruncherSingleDenominator@7cca494b has brought me a new dirty child : (((((-1)*(12))+((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(12))
State polishing child : (((((-1)*(12))+((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(12))
nouth.les.AlteratorAdd@1b28cdfa is messing around now.
It's altEx is ((((-1)*(2)*(x)*(x))/(12))+((-1)*(2)*(x)))
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 1
nouth.les.AlteratorAdd@1b28cdfa has brought me a new dirty child : ((((-1))+((0)*(x))+((0)/(12)))=(((12))+(((-2)*(x)*(x))/(12))+((-2)*(x))))
State polishing child : ((((-1))+((0)*(x))+((0)/(12)))=(((12))+(((-2)*(x)*(x))/(12))+((-2)*(x))))
nouth.les.AlteratorAdd@eed1f14 is messing around now.
It's altEx is (((-1)*(-1)))
on child (((-1)+(((2)*(x)*(x))/(12))+((2)*(x)))=(12))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@eed1f14 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((0))+((2)*(x)))=(((13))))
State polishing child : (((((2)*(x)*(x))/(12))+((0))+((2)*(x)))=(((13))))
It just propagated.
#hf 40000
#hf 40014
#hf 42014
#hf 30000
#hf 30012
#hf 32012
#hf 30000
#hf 30016
#hf 32016
#hf 30000
#hf 30012
#hf 32012
New unique children : <(((-1)+(((2)*((x)^(2)))/(12))+((2)*(x)))=(12)) ; (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12)) ; (((((-1)*(12))+((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(12)) ; (((((2)*(x)*(x))/(12))+((2)*(x)))=(13)) ; >
Children hfs : <42014 ; 32012 ; 32016 ; 32012 ; >
Children ops : <nouth.les.MultiCruncherPowerise@4eec7777nouth.les.DivCruncherSimplifyNew@3b07d329nouth.les.AddCruncherSingleDenominator@7cca494bnouth.les.AlteratorAdd@eed1f14>
=====================================STATE 4 , generation 1
CurrState is (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
It's hf is 31013
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.AlteratorAdd@2ff4acd0
I'm (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x)) and I'm about to propagate.
EqEx : ((-13)+(((2)*(x)*(x))/(12))+((3)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-13)
nouth.les.AlteratorAdd@7ba4f24f
adding it.
nouth.les.AlteratorAdd@3b9a45b3
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@7699a589 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherExpand@58372a00 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@4dd8dc3 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@6d03e736 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherPowerise@568db2f2 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@568db2f2 has brought me a new dirty child : (((-13)+(((2)*((x)^(2)))/(12))+((3)*(x)))=(x))
State polishing child : (((-13)+(((2)*((x)^(2)))/(12))+((3)*(x)))=(x))
nouth.les.DivCruncherSimplifyNew@378bf509 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
DCSN in : (((2)*(x)*(x))/(12))
DCSN dealt : (((x)*(x))/(6))
MCP adding (x)
MCP res (((x)^(2)))
DCSN list is subexlist of (((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@378bf509 has brought me a new dirty child : (((-13)+(((x)^(2))/((6)^(1)))+((3)*(x)))=(x))
State polishing child : (((-13)+(((x)^(2))/((6)^(1)))+((3)*(x)))=(x))
nouth.les.DivCruncherEmergeDivs@5fd0d5ae is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherPlain@2d98a335 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherExpand@16b98e56 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7ef20235 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@27d6c5e0 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherPowerise@4f3f5b24 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@4f3f5b24 has brought me a new dirty child : (((-13)+(((2)*((x)^(2)))/(12))+((3)*(x)))=(x))
State polishing child : (((-13)+(((2)*((x)^(2)))/(12))+((3)*(x)))=(x))
nouth.les.AddCruncherEqual@15aeb7ab is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@7b23ec81 is messing around now.
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
ACSD 0 not addex (-13)
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((12)/(1))
DCS after crossout before single plain :((12)) / ((1))
DCS single plain :((12)) / ((1))
DCS computing gcd from 12 and 1 = 1
DCS ZERO return resulting ((12)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-13)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (x)
ACSD 0 not addex (((((-13)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@7b23ec81 has brought me a new dirty child : (((((-13)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=(x))
State polishing child : (((((-13)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=(x))
nouth.les.AlteratorAdd@7ba4f24f is messing around now.
It's altEx is ((((-1)*(2)*(x)*(x))/(12))+((-1)*(3)*(x)))
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7ba4f24f has brought me a new dirty child : ((((-13))+((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))))
State polishing child : ((((-13))+((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))))
nouth.les.AlteratorAdd@3b9a45b3 is messing around now.
It's altEx is (((-1)*(-13)))
on child (((-13)+(((2)*(x)*(x))/(12))+((3)*(x)))=(x))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@3b9a45b3 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((0))+((3)*(x)))=(((13))+((1)*(x))))
State polishing child : (((((2)*(x)*(x))/(12))+((0))+((3)*(x)))=(((13))+((1)*(x))))
It just propagated.
#hf 40000
#hf 40014
#hf 42014
#hf 30000
#hf 30012
#hf 32012
#hf 30000
#hf 30016
#hf 32016
New unique children : <(((-13)+(((2)*((x)^(2)))/(12))+((3)*(x)))=(x)) ; (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x)) ; (((((-13)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=(x)) ; >
Children hfs : <42014 ; 32012 ; 32016 ; >
Children ops : <nouth.les.MultiCruncherPowerise@568db2f2nouth.les.DivCruncherSimplifyNew@378bf509nouth.les.AddCruncherSingleDenominator@7b23ec81>
=====================================STATE 5 , generation 1
CurrState is (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
It's hf is 31014
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.AlteratorAdd@1f32e575
I'm (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x))) and I'm about to propagate.
EqEx : ((((2)*(x)*(x))/(12))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@6acbcfc0
adding it.
EqEx : ((13)+(x)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
nouth.les.AlteratorAdd@5f184fc6
adding it.
nouth.les.AlteratorAdd@3feba861
adding it.
nouth.les.MultiCruncherPlain@5b480cf9 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherExpand@6f496d9f is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@723279cf is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@10f87f48 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@b4c966a is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@b4c966a has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((3)*(x)))=((13)+(x)))
State polishing child : (((((2)*((x)^(2)))/(12))+((3)*(x)))=((13)+(x)))
nouth.les.DivCruncherSimplifyNew@2f4d3709 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
DCSN in : (((2)*(x)*(x))/(12))
DCSN dealt : (((x)*(x))/(6))
MCP adding (x)
MCP res (((x)^(2)))
DCSN list is subexlist of (((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@2f4d3709 has brought me a new dirty child : (((((x)^(2))/((6)^(1)))+((3)*(x)))=((13)+(x)))
State polishing child : (((((x)^(2))/((6)^(1)))+((3)*(x)))=((13)+(x)))
nouth.les.DivCruncherEmergeDivs@4e50df2e is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherPlain@1d81eb93 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherExpand@7291c18f is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@34a245ab is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@7cc355be is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@6e8cf4c6 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@6e8cf4c6 has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((3)*(x)))=((13)+(x)))
State polishing child : (((((2)*((x)^(2)))/(12))+((3)*(x)))=((13)+(x)))
nouth.les.AddCruncherEqual@12edcd21 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@34c45dca is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (13)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
ACSD 0 deno is 1 of ((13)+(x))
ACSD 0 not addex (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@34c45dca has brought me a new dirty child : (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x)))
State polishing child : (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x)))
nouth.les.AddCruncherEqual@52cc8049 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@5b6f7412 is messing around now.
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (13)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
ACSD 0 deno is 1 of ((13)+(x))
ACSD 0 not addex (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@5b6f7412 has brought me a new dirty child : (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x)))
State polishing child : (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x)))
nouth.les.AlteratorAdd@6acbcfc0 is messing around now.
It's altEx is ((((-1)*(2)*(x)*(x))/(12))+((-1)*(3)*(x)))
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACE rwif ((12))
ACE rwif ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@6acbcfc0 has brought me a new dirty child : ((((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((13))))
State polishing child : ((((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((13))))
nouth.les.AlteratorAdd@5f184fc6 is messing around now.
It's altEx is (((-1)*(x)))
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@5f184fc6 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((2)*(x)))=(((0)*(x))+((13))))
State polishing child : (((((2)*(x)*(x))/(12))+((2)*(x)))=(((0)*(x))+((13))))
nouth.les.AlteratorAdd@3feba861 is messing around now.
It's altEx is (((-1)*(13)))
on child (((((2)*(x)*(x))/(12))+((3)*(x)))=((13)+(x)))
ACE rwif ((12))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@3feba861 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
State polishing child : (((((2)*(x)*(x))/(12))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
It just propagated.
#hf 40000
#hf 40015
#hf 42015
#hf 30000
#hf 30013
#hf 32013
#hf 30000
#hf 30015
#hf 32015
#hf 30000
#hf 30013
#hf 32013
New unique children : <(((((2)*((x)^(2)))/(12))+((3)*(x)))=((13)+(x))) ; (((((x)^(2))/(6))+((3)*(x)))=((13)+(x))) ; (((((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((13)+(x))) ; ((0)=((13)+(((-2)*(x)*(x))/(12))+((-2)*(x)))) ; >
Children hfs : <42015 ; 32013 ; 32015 ; 32013 ; >
Children ops : <nouth.les.MultiCruncherPowerise@b4c966anouth.les.DivCruncherSimplifyNew@2f4d3709nouth.les.AddCruncherSingleDenominator@34c45dcanouth.les.AlteratorAdd@6acbcfc0>
=====================================STATE 6 , generation 1
CurrState is (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
It's hf is 31015
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.MultiCruncherPlain@54bedef2
I'm (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x))) and I'm about to propagate.
EqEx : ((-1)+(((2)*(x)*(x))/(12))+((3)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
nouth.les.AlteratorAdd@7530d0a
adding it.
nouth.les.AlteratorAdd@27bc2616
adding it.
EqEx : ((12)+(x)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
nouth.les.AlteratorAdd@3941a79c
adding it.
nouth.les.AlteratorAdd@506e1b77
adding it.
nouth.les.MultiCruncherPlain@4fca772d is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherExpand@9807454 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@3d494fbf is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@1ddc4ec2 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@133314b is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@133314b has brought me a new dirty child : (((-1)+(((2)*((x)^(2)))/(12))+((3)*(x)))=((12)+(x)))
State polishing child : (((-1)+(((2)*((x)^(2)))/(12))+((3)*(x)))=((12)+(x)))
nouth.les.DivCruncherSimplifyNew@b1bc7ed is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
DCSN in : (((2)*(x)*(x))/(12))
DCSN dealt : (((x)*(x))/(6))
MCP adding (x)
MCP res (((x)^(2)))
DCSN list is subexlist of (((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@b1bc7ed has brought me a new dirty child : (((-1)+(((x)^(2))/((6)^(1)))+((3)*(x)))=((12)+(x)))
State polishing child : (((-1)+(((x)^(2))/((6)^(1)))+((3)*(x)))=((12)+(x)))
nouth.les.DivCruncherEmergeDivs@7cd84586 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPlain@30dae81 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherExpand@1b2c6ec2 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@4edde6e5 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@70177ecd is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@1e80bfe8 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@1e80bfe8 has brought me a new dirty child : (((-1)+(((2)*((x)^(2)))/(12))+((3)*(x)))=((12)+(x)))
State polishing child : (((-1)+(((2)*((x)^(2)))/(12))+((3)*(x)))=((12)+(x)))
nouth.les.AddCruncherEqual@66a29884 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@4769b07b is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACSD 0 not addex (-1)
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((12)/(1))
DCS after crossout before single plain :((12)) / ((1))
DCS single plain :((12)) / ((1))
DCS computing gcd from 12 and 1 = 1
DCS ZERO return resulting ((12)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@4769b07b has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.AddCruncherEqual@cc34f4d is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@17a7cec2 is messing around now.
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACSD 0 not addex (-1)
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((12)/(1))
DCS after crossout before single plain :((12)) / ((1))
DCS single plain :((12)) / ((1))
DCS computing gcd from 12 and 1 = 1
DCS ZERO return resulting ((12)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@17a7cec2 has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.AlteratorAdd@7530d0a is messing around now.
It's altEx is ((((-1)*(2)*(x)*(x))/(12))+((-1)*(3)*(x)))
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7530d0a has brought me a new dirty child : ((((-1))+((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((12))))
State polishing child : ((((-1))+((0)*(x))+((0)/(12)))=((((-2)*(x)*(x))/(12))+((-2)*(x))+((12))))
nouth.les.AlteratorAdd@27bc2616 is messing around now.
It's altEx is (((-1)*(-1)))
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@27bc2616 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((0))+((3)*(x)))=(((1)*(x))+((13))))
State polishing child : (((((2)*(x)*(x))/(12))+((0))+((3)*(x)))=(((1)*(x))+((13))))
nouth.les.AlteratorAdd@3941a79c is messing around now.
It's altEx is (((-1)*(x)))
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@3941a79c has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-1))+((2)*(x)))=(((0)*(x))+((12))))
State polishing child : (((((2)*(x)*(x))/(12))+((-1))+((2)*(x)))=(((0)*(x))+((12))))
nouth.les.AlteratorAdd@506e1b77 is messing around now.
It's altEx is (((-1)*(12)))
on child (((-1)+(((2)*(x)*(x))/(12))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@506e1b77 has brought me a new dirty child : (((((2)*(x)*(x))/(12))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
State polishing child : (((((2)*(x)*(x))/(12))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
It just propagated.
#hf 40000
#hf 40016
#hf 42016
#hf 30000
#hf 30014
#hf 32014
New unique children : <(((-1)+(((2)*((x)^(2)))/(12))+((3)*(x)))=((12)+(x))) ; (((-1)+(((x)^(2))/(6))+((3)*(x)))=((12)+(x))) ; >
Children hfs : <42016 ; 32014 ; >
Children ops : <nouth.les.MultiCruncherPowerise@133314bnouth.les.DivCruncherSimplifyNew@b1bc7ed>
=====================================STATE 7 , generation 1
CurrState is (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
It's hf is 31016
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.DivCruncherSimplifyNew@f6f4d33
I'm (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x))) and I'm about to propagate.
EqEx : ((((x)^(2))/(6))+((-1)*(1))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@65b3120a
adding it.
nouth.les.AlteratorAdd@6f539caf
adding it.
EqEx : ((12)+(x)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
nouth.les.AlteratorAdd@79fc0f2f
adding it.
nouth.les.AlteratorAdd@50040f0c
adding it.
nouth.les.PowerCruncherExpand@2dda6444 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 1
nouth.les.PowerCruncherExpand@2dda6444 has brought me a new dirty child : (((((x)*(x))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)*(x))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.DivCruncherSimplifyNew@5e9f23b4 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
DCSN in : (((x)^(2))/(6))
DCSN dealt : (((x)^(2))/(6))
DCSN listadd((x)^(2))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@5e9f23b4 has brought me a new dirty child : (((((x)^(2))/((6)^(1)))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)^(2))/((6)^(1)))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.DivCruncherEmergeDivs@4783da3f is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPlain@378fd1ac is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 1
nouth.les.MultiCruncherPlain@378fd1ac has brought me a new dirty child : (((((x)^(2))/(6))+((-1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)^(2))/(6))+((-1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherExpand@49097b5d is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6e2c634b is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
mcd worklist (-1)
mcd worklist (1)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@37a71e93 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@7e6cbb7a is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCP adding (-1)
MCP adding (1)
MCP res ((-1)*(1))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@7e6cbb7a has brought me a new dirty child : (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherPlain@7c3df479 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 1
nouth.les.MultiCruncherPlain@7c3df479 has brought me a new dirty child : (((((x)^(2))/(6))+((-1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)^(2))/(6))+((-1))+((3)*(x)))=((12)+(x)))
nouth.les.MultiCruncherExpand@7106e68e is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7eda2dbb is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
mcd worklist (-1)
mcd worklist (1)
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@6576fe71 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@76fb509a is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
MCP adding (-1)
MCP adding (1)
MCP res ((-1)*(1))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@76fb509a has brought me a new dirty child : (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
State polishing child : (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
nouth.les.AddCruncherEqual@300ffa5d is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((6))
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@4d405ef7 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex (6)
ACSD 0 not addex (((x)^(2))/(6))
ACSD 0 not addex (-1)
ACSD 0 not addex (1)
ACSD 0 not addex ((-1)*(1))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (6)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@4d405ef7 has brought me a new dirty child : (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x)))
State polishing child : (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x)))
nouth.les.AddCruncherEqual@6193b845 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((6))
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@2e817b38 is messing around now.
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex (6)
ACSD 0 not addex (((x)^(2))/(6))
ACSD 0 not addex (-1)
ACSD 0 not addex (1)
ACSD 0 not addex ((-1)*(1))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (6)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@2e817b38 has brought me a new dirty child : (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x)))
State polishing child : (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x)))
nouth.les.AlteratorAdd@65b3120a is messing around now.
It's altEx is ((((-1)*((x)^(2)))/(6))+((-1)*(3)*(x)))
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((6))
ACE rwif ((6))
ACE rwif ((6))
comparing((6)) to ((6))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@65b3120a has brought me a new dirty child : ((((-1))+((0)*(x))+((0)/(6)))=((((-1)*((x)^(2)))/(6))+((-2)*(x))+((12))))
State polishing child : ((((-1))+((0)*(x))+((0)/(6)))=((((-1)*((x)^(2)))/(6))+((-2)*(x))+((12))))
nouth.les.AlteratorAdd@6f539caf is messing around now.
It's altEx is (((-1)*(-1)*(1)))
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@6f539caf has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((0))+((3)*(x)))=(((1)*(x))+((13))))
State polishing child : (((((1)*((x)^(2)))/(6))+((0))+((3)*(x)))=(((1)*(x))+((13))))
nouth.les.AlteratorAdd@79fc0f2f is messing around now.
It's altEx is (((-1)*(x)))
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((6))
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@79fc0f2f has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((-1))+((2)*(x)))=(((0)*(x))+((12))))
State polishing child : (((((1)*((x)^(2)))/(6))+((-1))+((2)*(x)))=(((0)*(x))+((12))))
nouth.les.AlteratorAdd@50040f0c is messing around now.
It's altEx is (((-1)*(12)))
on child (((((x)^(2))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x)))
ACE rwif ((6))
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@50040f0c has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
State polishing child : (((((1)*((x)^(2)))/(6))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
It just propagated.
#hf 30000
#hf 30016
#hf 32016
#hf 30000
#hf 30017
#hf 32017
New unique children : <(((((x)*(x))/(6))+((-1)*(1))+((3)*(x)))=((12)+(x))) ; (((((-1)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=((12)+(x))) ; >
Children hfs : <32016 ; 32017 ; >
Children ops : <nouth.les.PowerCruncherExpand@2dda6444nouth.les.AddCruncherSingleDenominator@4d405ef7>
=====================================STATE 8 , generation 1
CurrState is (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
It's hf is 31018
It's parent's operator is : nouth.les.DefOperator@355da254
It's operator is : nouth.les.AddCruncherSingleDenominator@72ea2f77
I'm (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x))) and I'm about to propagate.
EqEx : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12)) is suggesting alterators now.
nouth.les.AlteratorMulti@3f91beef
adding it.
EqEx : ((12)+(x)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
nouth.les.AlteratorAdd@1a6c5a9e
adding it.
nouth.les.AlteratorAdd@37bba400
adding it.
nouth.les.MultiCruncherPlain@179d3b25 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 2
nouth.les.MultiCruncherPlain@179d3b25 has brought me a new dirty child : (((((-12))+((36)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-12))+((36)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.MultiCruncherExpand@254989ff is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5d099f62 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
mcd worklist (-1)
mcd worklist (12)
mcd worklist (12)
mcd worklist (3)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@37f8bb67 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@49c2faae is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
MCP adding (-1)
MCP adding (12)
MCP res ((-1)*(12))
MCP adding (12)
MCP adding (3)
MCP adding (x)
MCP res ((12)*(3)*(x))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@49c2faae has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x)))
nouth.les.MultiCruncherPlain@20ad9418 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 2
nouth.les.MultiCruncherPlain@20ad9418 has brought me a new dirty child : (((((-12))+((36)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-12))+((36)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.MultiCruncherExpand@31cefde0 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@439f5b3d is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
mcd worklist (-1)
mcd worklist (12)
mcd worklist (12)
mcd worklist (3)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@1d56ce6a is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@5197848c is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
MCP adding (-1)
MCP adding (12)
MCP res ((-1)*(12))
MCP adding (12)
MCP adding (3)
MCP adding (x)
MCP res ((12)*(3)*(x))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@5197848c has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x)))
nouth.les.MultiCruncherPlain@17f052a3 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 2
nouth.les.MultiCruncherPlain@17f052a3 has brought me a new dirty child : (((((-12))+((36)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
State polishing child : (((((-12))+((36)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
nouth.les.MultiCruncherExpand@2e0fa5d3 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5010be6 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
mcd worklist (-1)
mcd worklist (12)
mcd worklist (12)
mcd worklist (3)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@685f4c2e is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@7daf6ecc is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
MCP adding (-1)
MCP adding (12)
MCP res ((-1)*(12))
MCP adding (12)
MCP adding (3)
MCP adding (x)
MCP res ((12)*(3)*(x))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@7daf6ecc has brought me a new dirty child : (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x)))
State polishing child : (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x)))
nouth.les.AddCruncherEqual@2e5d6d97 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@238e0d81 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
ACSD 0 not addex (-1)
ACSD 0 not addex (12)
ACSD 0 not addex ((-1)*(12))
ACSD 0 not addex (12)
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((12)*(3)*(x))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
ACSD 0 deno is 1 of (((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))
ACSD 0 not addex (12)
ACSD 0 not addex ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 0
nouth.les.DivCruncherSimplifyNew@31221be2 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
DCSN in : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))
DCSN dealt : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))
DCSN listadd((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))^(1))
DCSN listadd((12)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@31221be2 has brought me a new dirty child : ((((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))^(1))/((12)^(1)))=((12)+(x)))
State polishing child : ((((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))^(1))/((12)^(1)))=((12)+(x)))
nouth.les.DivCruncherEmergeDivs@377dca04 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 0
nouth.les.AddCruncherEqual@728938a9 is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@21b8d17c is messing around now.
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
ACSD 0 not addex (-1)
ACSD 0 not addex (12)
ACSD 0 not addex ((-1)*(12))
ACSD 0 not addex (12)
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((12)*(3)*(x))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))
ACSD 0 deno is 1 of (((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))
ACSD 0 not addex (12)
ACSD 0 not addex ((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))
ACSD 0 not addex (12)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (12)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((12)+(x)))
ACSD 0 deno is 1 of ((12)+(x))
ACSD 0 not addex (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
into val 0
nouth.les.AlteratorMulti@3f91beef is messing around now.
It's altEx is (12)
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
AM 1/4: ((((12)*(((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))/(12))=((12)*((12)+(x))))
AM 1/4: ((((12)*(((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x))))/(12))=((12)*((12)+(x))))
AM 1/4: ((((12)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))=((12)*((12)+(x))))
AM 1/4: ((((12)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))=((12)*((12)+(x))))
into val 1
nouth.les.AlteratorMulti@3f91beef has brought me a new dirty child : ((((12)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))=((12)*((12)+(x))))
State polishing child : ((((12)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))=((12)*((12)+(x))))
nouth.les.AlteratorAdd@1a6c5a9e is messing around now.
It's altEx is (((-1)*(x)))
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@1a6c5a9e has brought me a new dirty child : (((((1)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))+((-1)*(x)))=(((0)*(x))+((12))))
State polishing child : (((((1)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))+((-1)*(x)))=(((0)*(x))+((12))))
nouth.les.AlteratorAdd@37bba400 is messing around now.
It's altEx is (((-1)*(12)))
on child (((((-1)*(12))+((12)*(3)*(x))+((2)*(x)*(x)))/(12))=((12)+(x)))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((12))
ACE rwif ()
ACE rwif ((12))
comparing((12)) to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@37bba400 has brought me a new dirty child : (((((1)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))+((-12)))=(((0))+((1)*(x))))
State polishing child : (((((1)*(((-12))+((36)*(x))+((2)*(x)*(x))))/(12))+((-12)))=(((0))+((1)*(x))))
It just propagated.
#hf 30000
#hf 30015
#hf 32015
#hf 40000
#hf 40019
#hf 42019
#hf 40000
#hf 40019
#hf 42019
#hf 40000
#hf 40017
#hf 42017
#hf 40000
#hf 40015
#hf 42015
New unique children : <((((-12)+((2)*(x)*(x))+((36)*(x)))/(12))=((12)+(x))) ; (((((-1)*(12))+((12)*(3)*(x))+((2)*((x)^(2))))/(12))=((12)+(x))) ; ((((12)*((-12)+((2)*(x)*(x))+((36)*(x))))/(12))=((12)*((12)+(x)))) ; (((((-12)+((2)*(x)*(x))+((36)*(x)))/(12))+((-1)*(x)))=(12)) ; (((-12)+(((-12)+((2)*(x)*(x))+((36)*(x)))/(12)))=(x)) ; >
Children hfs : <32015 ; 42019 ; 42019 ; 42017 ; 42015 ; >
Children ops : <nouth.les.MultiCruncherPlain@179d3b25nouth.les.MultiCruncherPowerise@49c2faaenouth.les.AlteratorMulti@3f91beefnouth.les.AlteratorAdd@1a6c5a9enouth.les.AlteratorAdd@37bba400>
=====================================STATE 9 , generation 2
CurrState is ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
It's hf is 32012
It's parent's operator is : nouth.les.AlteratorAdd@5305068a
It's operator is : nouth.les.AlteratorAdd@19469ea2
I'm ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x)))) and I'm about to propagate.
EqEx : (-13) is suggesting alterators now.
EqEx : ((((-2)*(x)*(x))/(12))+((-2)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@6433a2
adding it.
nouth.les.MultiCruncherPlain@5910e440 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@6267c3bb is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@533ddba is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
mcd worklist (-2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@246b179d is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@7a07c5b4 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@7a07c5b4 has brought me a new dirty child : ((-13)=((((-2)*((x)^(2)))/(12))+((-2)*(x))))
State polishing child : ((-13)=((((-2)*((x)^(2)))/(12))+((-2)*(x))))
nouth.les.DivCruncherSimplifyNew@26a1ab54 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
DCSN in : (((-2)*(x)*(x))/(12))
DCSN dealt : (((-1)*(x)*(x))/(6))
MCP adding (-1)
MCP adding (x)
MCP res (((-1)^(1))*((x)^(2)))
DCSN list is subexlist of (((-1)^(1))*((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@26a1ab54 has brought me a new dirty child : ((-13)=(((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
State polishing child : ((-13)=(((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
nouth.les.DivCruncherEmergeDivs@3d646c37 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPlain@41cf53f9 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@5a10411 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2ef1e4fa is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
mcd worklist (-2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@306a30c7 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@b81eda8 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@b81eda8 has brought me a new dirty child : ((-13)=((((-2)*((x)^(2)))/(12))+((-2)*(x))))
State polishing child : ((-13)=((((-2)*((x)^(2)))/(12))+((-2)*(x))))
nouth.les.AddCruncherEqual@68de145 is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@27fa135a is messing around now.
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
ACSD 0 not addex (-13)
ACSD 0 not addex (-2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((-2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((-2)*(x)*(x))/(12))
ACSD 0 not addex (-2)
ACSD 0 not addex (x)
ACSD 0 not addex ((-2)*(x))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex ((-13)=((((-2)*(12)*(x))+((-2)*(x)*(x)))/(12)))
into val 1
nouth.les.AddCruncherSingleDenominator@27fa135a has brought me a new dirty child : ((-13)=((((-2)*(12)*(x))+((-2)*(x)*(x)))/(12)))
State polishing child : ((-13)=((((-2)*(12)*(x))+((-2)*(x)*(x)))/(12)))
nouth.les.AlteratorAdd@6433a2 is messing around now.
It's altEx is ((((-1)*(-2)*(x)*(x))/(12))+((-1)*(-2)*(x)))
on child ((-13)=((((-2)*(x)*(x))/(12))+((-2)*(x))))
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((12))
ACE rwif ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@6433a2 has brought me a new dirty child : ((((-13))+(((2)*(x)*(x))/(12))+((2)*(x)))=(((0)*(x))+((0)/(12))))
State polishing child : ((((-13))+(((2)*(x)*(x))/(12))+((2)*(x)))=(((0)*(x))+((0)/(12))))
It just propagated.
#hf 40000
#hf 40013
#hf 43013
#hf 40000
#hf 40013
#hf 43013
#hf 30000
#hf 30013
#hf 33013
#hf 30000
#hf 30013
#hf 33013
New unique children : <((-13)=((((-2)*((x)^(2)))/(12))+((-2)*(x)))) ; ((-13)=((((-1)*((x)^(2)))/(6))+((-2)*(x)))) ; ((-13)=((((-2)*(12)*(x))+((-2)*(x)*(x)))/(12))) ; (((-13)+(((2)*(x)*(x))/(12))+((2)*(x)))=(0)) ; >
Children hfs : <43013 ; 43013 ; 33013 ; 33013 ; >
Children ops : <nouth.les.MultiCruncherPowerise@7a07c5b4nouth.les.DivCruncherSimplifyNew@26a1ab54nouth.les.AddCruncherSingleDenominator@27fa135anouth.les.AlteratorAdd@6433a2>
=====================================STATE 10 , generation 2
CurrState is (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
It's hf is 32012
It's parent's operator is : nouth.les.AlteratorAdd@279f2327
It's operator is : nouth.les.DivCruncherSimplifyNew@3b07d329
I'm (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12)) and I'm about to propagate.
EqEx : ((-1)+(((x)^(2))/(6))+((2)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
nouth.les.AlteratorAdd@46f7f36a
adding it.
nouth.les.AlteratorAdd@421faab1
adding it.
EqEx : (12) is suggesting alterators now.
nouth.les.PowerCruncherExpand@2b71fc7e is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
into val 1
nouth.les.PowerCruncherExpand@2b71fc7e has brought me a new dirty child : (((-1)+(((x)*(x))/(6))+((2)*(x)))=(12))
State polishing child : (((-1)+(((x)*(x))/(6))+((2)*(x)))=(12))
nouth.les.DivCruncherSimplifyNew@5ce65a89 is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
DCSN in : (((x)^(2))/(6))
DCSN dealt : (((x)^(2))/(6))
DCSN listadd((x)^(2))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@5ce65a89 has brought me a new dirty child : (((-1)+(((x)^(2))/((6)^(1)))+((2)*(x)))=(12))
State polishing child : (((-1)+(((x)^(2))/((6)^(1)))+((2)*(x)))=(12))
nouth.les.DivCruncherEmergeDivs@25f38edc is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherPlain@1a86f2f1 is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherExpand@3eb07fd3 is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@506c589e is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
mcd worklist (2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@69d0a921 is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
into val 0
nouth.les.MultiCruncherPowerise@446cdf90 is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
MCP adding (2)
MCP adding (x)
MCP res ((2)*(x))
into val 1
nouth.les.MultiCruncherPowerise@446cdf90 has brought me a new dirty child : (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
State polishing child : (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
nouth.les.AddCruncherEqual@799f7e29 is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@4b85612c is messing around now.
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex (6)
ACSD 0 not addex (((x)^(2))/(6))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x))
DCS start ((6)/(1))
DCS after crossout before single plain :((6)) / ((1))
DCS single plain :((6)) / ((1))
DCS computing gcd from 6 and 1 = 1
DCS ZERO return resulting ((6)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
ACSD polished unide is (6)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (12)
ACSD 0 not addex (((((-1)*(6))+((2)*(6)*(x))+((x)^(2)))/(6))=(12))
into val 1
nouth.les.AddCruncherSingleDenominator@4b85612c has brought me a new dirty child : (((((-1)*(6))+((2)*(6)*(x))+((x)^(2)))/(6))=(12))
State polishing child : (((((-1)*(6))+((2)*(6)*(x))+((x)^(2)))/(6))=(12))
nouth.les.AlteratorAdd@46f7f36a is messing around now.
It's altEx is ((((-1)*((x)^(2)))/(6))+((-1)*(2)*(x)))
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((6))
comparing((6)) to ((6))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
into val 1
nouth.les.AlteratorAdd@46f7f36a has brought me a new dirty child : ((((-1))+((0)*(x))+((0)/(6)))=(((12))+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
State polishing child : ((((-1))+((0)*(x))+((0)/(6)))=(((12))+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
nouth.les.AlteratorAdd@421faab1 is messing around now.
It's altEx is (((-1)*(-1)))
on child (((-1)+(((x)^(2))/(6))+((2)*(x)))=(12))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@421faab1 has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((0))+((2)*(x)))=(((13))))
State polishing child : (((((1)*((x)^(2)))/(6))+((0))+((2)*(x)))=(((13))))
It just propagated.
#hf 30000
#hf 30012
#hf 33012
#hf 30000
#hf 30015
#hf 33015
#hf 30000
#hf 30011
#hf 33011
New unique children : <(((-1)+(((x)*(x))/(6))+((2)*(x)))=(12)) ; (((((-1)*(6))+((2)*(6)*(x))+((x)^(2)))/(6))=(12)) ; (((((x)^(2))/(6))+((2)*(x)))=(13)) ; >
Children hfs : <33012 ; 33015 ; 33011 ; >
Children ops : <nouth.les.PowerCruncherExpand@2b71fc7enouth.les.AddCruncherSingleDenominator@4b85612cnouth.les.AlteratorAdd@421faab1>
=====================================STATE 11 , generation 2
CurrState is (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
It's hf is 32012
It's parent's operator is : nouth.les.AlteratorAdd@279f2327
It's operator is : nouth.les.AlteratorAdd@eed1f14
I'm (((((2)*(x)*(x))/(12))+((2)*(x)))=(13)) and I'm about to propagate.
EqEx : ((((2)*(x)*(x))/(12))+((2)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@277050dc
adding it.
EqEx : (13) is suggesting alterators now.
nouth.les.MultiCruncherPlain@5c29bfd is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
into val 0
nouth.les.MultiCruncherExpand@7aec35a is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@67424e82 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@42110406 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
into val 0
nouth.les.MultiCruncherPowerise@531d72ca is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@531d72ca has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((2)*(x)))=(13))
State polishing child : (((((2)*((x)^(2)))/(12))+((2)*(x)))=(13))
nouth.les.DivCruncherSimplifyNew@22d8cfe0 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
DCSN in : (((2)*(x)*(x))/(12))
DCSN dealt : (((x)*(x))/(6))
MCP adding (x)
MCP res (((x)^(2)))
DCSN list is subexlist of (((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@22d8cfe0 has brought me a new dirty child : (((((x)^(2))/((6)^(1)))+((2)*(x)))=(13))
State polishing child : (((((x)^(2))/((6)^(1)))+((2)*(x)))=(13))
nouth.les.DivCruncherEmergeDivs@579bb367 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
into val 0
nouth.les.MultiCruncherPlain@1de0aca6 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
into val 0
nouth.les.MultiCruncherExpand@255316f2 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@41906a77 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@4b9af9a9 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
into val 0
nouth.les.MultiCruncherPowerise@5387f9e0 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@5387f9e0 has brought me a new dirty child : (((((2)*((x)^(2)))/(12))+((2)*(x)))=(13))
State polishing child : (((((2)*((x)^(2)))/(12))+((2)*(x)))=(13))
nouth.les.AddCruncherEqual@6e5e91e4 is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
ACE rwif ((12))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@2cdf8d8a is messing around now.
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (12)
ACSD 0 not addex (((2)*(x)*(x))/(12))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x))
DCS start ((1)/(12))
DCS after crossout before single plain :((1)) / ((12))
DCS single plain :((1)) / ((12))
DCS computing gcd from 1 and 12 = 1
DCS ZERO return resulting ((1)/(12))
ACSD polished unide is (12)
DCS start ((12)/(12))
DCS crossing out (12)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (13)
ACSD 0 not addex (((((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(13))
into val 1
nouth.les.AddCruncherSingleDenominator@2cdf8d8a has brought me a new dirty child : (((((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(13))
State polishing child : (((((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(13))
nouth.les.AlteratorAdd@277050dc is messing around now.
It's altEx is ((((-1)*(2)*(x)*(x))/(12))+((-1)*(2)*(x)))
on child (((((2)*(x)*(x))/(12))+((2)*(x)))=(13))
ACE rwif ((12))
ACE rwif ((12))
ACE rwif ((12))
comparing((12)) to ((12))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
ACE rwif ((12))
comparing((12)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((12))
ACE rwif ()
comparing() to ((12))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((12))
comparing((12)) to ((x))
into val 1
nouth.les.AlteratorAdd@277050dc has brought me a new dirty child : ((((0)*(x))+((0)/(12)))=(((13))+(((-2)*(x)*(x))/(12))+((-2)*(x))))
State polishing child : ((((0)*(x))+((0)/(12)))=(((13))+(((-2)*(x)*(x))/(12))+((-2)*(x))))
It just propagated.
#hf 40000
#hf 40013
#hf 43013
#hf 30000
#hf 30013
#hf 33013
New unique children : <(((((2)*((x)^(2)))/(12))+((2)*(x)))=(13)) ; (((((12)*(2)*(x))+((2)*(x)*(x)))/(12))=(13)) ; >
Children hfs : <43013 ; 33013 ; >
Children ops : <nouth.les.MultiCruncherPowerise@531d72canouth.les.AddCruncherSingleDenominator@2cdf8d8a>
=====================================STATE 12 , generation 2
CurrState is (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
It's hf is 32012
It's parent's operator is : nouth.les.AlteratorAdd@2ff4acd0
It's operator is : nouth.les.DivCruncherSimplifyNew@378bf509
I'm (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x)) and I'm about to propagate.
EqEx : ((-13)+(((x)^(2))/(6))+((3)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-13)
nouth.les.AlteratorAdd@30946e09
adding it.
nouth.les.AlteratorAdd@5cb0d902
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.PowerCruncherExpand@46fbb2c1 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
into val 1
nouth.les.PowerCruncherExpand@46fbb2c1 has brought me a new dirty child : (((-13)+(((x)*(x))/(6))+((3)*(x)))=(x))
State polishing child : (((-13)+(((x)*(x))/(6))+((3)*(x)))=(x))
nouth.les.DivCruncherSimplifyNew@1698c449 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
DCSN in : (((x)^(2))/(6))
DCSN dealt : (((x)^(2))/(6))
DCSN listadd((x)^(2))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@1698c449 has brought me a new dirty child : (((-13)+(((x)^(2))/((6)^(1)))+((3)*(x)))=(x))
State polishing child : (((-13)+(((x)^(2))/((6)^(1)))+((3)*(x)))=(x))
nouth.les.DivCruncherEmergeDivs@5ef04b5 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherPlain@5f4da5c3 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherExpand@443b7951 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@14514713 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@69663380 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
into val 0
nouth.les.MultiCruncherPowerise@5b37e0d2 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 1
nouth.les.MultiCruncherPowerise@5b37e0d2 has brought me a new dirty child : (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
State polishing child : (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
nouth.les.AddCruncherEqual@4459eb14 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@5a2e4553 is messing around now.
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
ACSD 0 not addex (-13)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex (6)
ACSD 0 not addex (((x)^(2))/(6))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((6)/(1))
DCS after crossout before single plain :((6)) / ((1))
DCS single plain :((6)) / ((1))
DCS computing gcd from 6 and 1 = 1
DCS ZERO return resulting ((6)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
ACSD polished unide is (6)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-13)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (x)
ACSD 0 not addex (((((-13)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5a2e4553 has brought me a new dirty child : (((((-13)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=(x))
State polishing child : (((((-13)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=(x))
nouth.les.AlteratorAdd@30946e09 is messing around now.
It's altEx is ((((-1)*((x)^(2)))/(6))+((-1)*(3)*(x)))
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((6))
comparing((6)) to ((6))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((6))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@30946e09 has brought me a new dirty child : ((((-13))+((0)*(x))+((0)/(6)))=((((-1)*((x)^(2)))/(6))+((-2)*(x))))
State polishing child : ((((-13))+((0)*(x))+((0)/(6)))=((((-1)*((x)^(2)))/(6))+((-2)*(x))))
nouth.les.AlteratorAdd@5cb0d902 is messing around now.
It's altEx is (((-1)*(-13)))
on child (((-13)+(((x)^(2))/(6))+((3)*(x)))=(x))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@5cb0d902 has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((0))+((3)*(x)))=(((13))+((1)*(x))))
State polishing child : (((((1)*((x)^(2)))/(6))+((0))+((3)*(x)))=(((13))+((1)*(x))))
It just propagated.
#hf 30000
#hf 30012
#hf 33012
#hf 30000
#hf 30015
#hf 33015
New unique children : <(((-13)+(((x)*(x))/(6))+((3)*(x)))=(x)) ; (((((-13)*(6))+((3)*(6)*(x))+((x)^(2)))/(6))=(x)) ; >
Children hfs : <33012 ; 33015 ; >
Children ops : <nouth.les.PowerCruncherExpand@46fbb2c1nouth.les.AddCruncherSingleDenominator@5a2e4553>
=====================================STATE 13 , generation 2
CurrState is (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
It's hf is 32013
It's parent's operator is : nouth.les.AlteratorAdd@1f32e575
It's operator is : nouth.les.DivCruncherSimplifyNew@2f4d3709
I'm (((((x)^(2))/(6))+((3)*(x)))=((13)+(x))) and I'm about to propagate.
EqEx : ((((x)^(2))/(6))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@28c97a5
adding it.
EqEx : ((13)+(x)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
nouth.les.AlteratorAdd@6659c656
adding it.
nouth.les.AlteratorAdd@6d5380c2
adding it.
nouth.les.PowerCruncherExpand@45ff54e6 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
into val 1
nouth.les.PowerCruncherExpand@45ff54e6 has brought me a new dirty child : (((((x)*(x))/(6))+((3)*(x)))=((13)+(x)))
State polishing child : (((((x)*(x))/(6))+((3)*(x)))=((13)+(x)))
nouth.les.DivCruncherSimplifyNew@2328c243 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
DCSN in : (((x)^(2))/(6))
DCSN dealt : (((x)^(2))/(6))
DCSN listadd((x)^(2))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@2328c243 has brought me a new dirty child : (((((x)^(2))/((6)^(1)))+((3)*(x)))=((13)+(x)))
State polishing child : (((((x)^(2))/((6)^(1)))+((3)*(x)))=((13)+(x)))
nouth.les.DivCruncherEmergeDivs@bebdb06 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherPlain@7a4f0f29 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherExpand@45283ce2 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2077d4de is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
mcd worklist (3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@7591083d is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
into val 0
nouth.les.MultiCruncherPowerise@77a567e1 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 1
nouth.les.MultiCruncherPowerise@77a567e1 has brought me a new dirty child : (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
State polishing child : (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
nouth.les.AddCruncherEqual@736e9adb is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACE rwif ((6))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@6d21714c is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex (6)
ACSD 0 not addex (((x)^(2))/(6))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
ACSD polished unide is (6)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (13)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
ACSD 0 deno is 1 of ((13)+(x))
ACSD 0 not addex (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@6d21714c has brought me a new dirty child : (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x)))
State polishing child : (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x)))
nouth.les.AddCruncherEqual@108c4c35 is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACE rwif ((6))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@4ccabbaa is messing around now.
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex (6)
ACSD 0 not addex (((x)^(2))/(6))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
ACSD polished unide is (6)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (13)
ACSD 0 not addex (x)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((13)+(x)))
ACSD 0 deno is 1 of ((13)+(x))
ACSD 0 not addex (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@4ccabbaa has brought me a new dirty child : (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x)))
State polishing child : (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x)))
nouth.les.AlteratorAdd@28c97a5 is messing around now.
It's altEx is ((((-1)*((x)^(2)))/(6))+((-1)*(3)*(x)))
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACE rwif ((6))
ACE rwif ((6))
ACE rwif ((6))
comparing((6)) to ((6))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@28c97a5 has brought me a new dirty child : ((((0)*(x))+((0)/(6)))=((((-1)*((x)^(2)))/(6))+((-2)*(x))+((13))))
State polishing child : ((((0)*(x))+((0)/(6)))=((((-1)*((x)^(2)))/(6))+((-2)*(x))+((13))))
nouth.les.AlteratorAdd@6659c656 is messing around now.
It's altEx is (((-1)*(x)))
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACE rwif ((6))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@6659c656 has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((2)*(x)))=(((0)*(x))+((13))))
State polishing child : (((((1)*((x)^(2)))/(6))+((2)*(x)))=(((0)*(x))+((13))))
nouth.les.AlteratorAdd@6d5380c2 is messing around now.
It's altEx is (((-1)*(13)))
on child (((((x)^(2))/(6))+((3)*(x)))=((13)+(x)))
ACE rwif ((6))
ACE rwif ()
ACE rwif ((6))
comparing((6)) to ()
ACE rwif ((x))
ACE rwif ((6))
comparing((6)) to ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
into val 1
nouth.les.AlteratorAdd@6d5380c2 has brought me a new dirty child : (((((1)*((x)^(2)))/(6))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
State polishing child : (((((1)*((x)^(2)))/(6))+((-13))+((3)*(x)))=(((0))+((1)*(x))))
It just propagated.
#hf 30000
#hf 30013
#hf 33013
#hf 30000
#hf 30014
#hf 33014
New unique children : <(((((x)*(x))/(6))+((3)*(x)))=((13)+(x))) ; (((((3)*(6)*(x))+((x)^(2)))/(6))=((13)+(x))) ; ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x)))) ; >
Children hfs : <33013 ; 33014 ; 0 ; >
Children ops : <nouth.les.PowerCruncherExpand@45ff54e6nouth.les.AddCruncherSingleDenominator@6d21714cnouth.les.AlteratorAdd@28c97a5>
=====================================STATE 14 , generation 3
CurrState is ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
It's hf is 0
It's parent's operator is : nouth.les.DivCruncherSimplifyNew@2f4d3709
It's operator is : nouth.les.AlteratorAdd@28c97a5
Result found !
outputter foundState prior to searcher : 0=13+\\\frac{-1)\\\cdot x^2}{6}-2\\\cdot x
ComputeSearcher loop 1 start ,bestHf 14 bestChildHf -1 open size 1 closed size 0
State 0=13+\\\frac{-1)\\\cdot x^2}{6}-2\\\cdot x propagating
I'm ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x)))) and I'm about to propagate.
EqEx : (0) is suggesting alterators now.
EqEx : ((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
nouth.les.AlteratorAdd@5fa7e7ff
adding it.
nouth.les.AlteratorAdd@4629104a
adding it.
nouth.les.PowerCruncherExpand@27f8302d is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
into val 1
nouth.les.PowerCruncherExpand@27f8302d has brought me a new dirty child : ((0)=((13)+(((-1)*((x)*(x)))/(6))+((-2)*(x))))
State polishing child : ((0)=((13)+(((-1)*((x)*(x)))/(6))+((-2)*(x))))
nouth.les.MultiCruncherPlain@4d76f3f8 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@2d8e6db6 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@23ab930d is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
mcd worklist (-1)
mcd worklist ((x)^(2))
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@4534b60d is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@3fa77460 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
MCP adding (-1)
MCP adding ((x)^(2))
MCP res ((-1)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@3fa77460 has brought me a new dirty child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
State polishing child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
nouth.les.DivCruncherSimplifyNew@619a5dff is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
DCSN in : (((-1)*((x)^(2)))/(6))
DCSN dealt : (((-1)*((x)^(2)))/(6))
MCP adding (-1)
MCP adding (x)
MCP res (((-1)^(1))*((x)^(2)))
DCSN list is subexlist of (((-1)^(1))*((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@619a5dff has brought me a new dirty child : ((0)=((13)+((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
State polishing child : ((0)=((13)+((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
nouth.les.DivCruncherEmergeDivs@1ed6993a is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPlain@7e32c033 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@7ab2bfe1 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@497470ed is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
mcd worklist (-1)
mcd worklist ((x)^(2))
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@63c12fb0 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@b1a58a3 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
MCP adding (-1)
MCP adding ((x)^(2))
MCP res ((-1)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@b1a58a3 has brought me a new dirty child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
State polishing child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
nouth.les.AddCruncherEqual@6438a396 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@e2144e4 is messing around now.
on child ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
ACSD 0 not addex (0)
ACSD 0 not addex (13)
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((-1)*((x)^(2)))
ACSD 0 not addex (6)
ACSD 0 not addex (((-1)*((x)^(2)))/(6))
ACSD 0 not addex (-2)
ACSD 0 not addex (x)
ACSD 0 not addex ((-2)*(x))
DCS start ((6)/(1))
DCS after crossout before single plain :((6)) / ((1))
DCS single plain :((6)) / ((1))
DCS computing gcd from 6 and 1 = 1
DCS ZERO return resulting ((6)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
ACSD polished unide is (6)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex ((0)=((((-1)*((x)^(2)))+((-2)*(6)*(x))+((13)*(6)))/(6)))
into val 1
nouth.les.AddCruncherSingleDenominator@e2144e4 has brought me a new dirty child : ((0)=((((-1)*((x)^(2)))+((-2)*(6)*(x))+((13)*(6)))/(6)))
State polishing child : ((0)=((((-1)*((x)^(2)))+((-2)*(6)*(x))+((13)*(6)))/(6)))
ComputeSearcher loop 1 end bestHf 14 bestChildHf 13 open size 1 closed size 0
ComputeSearcher loop 2 start ,bestHf 13 bestChildHf -1 open size 1 closed size 0
State 0=13+\\\frac{-1)\\\cdot x\\\cdot x}{6}-2\\\cdot x propagating
I'm ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x)))) and I'm about to propagate.
EqEx : (0) is suggesting alterators now.
EqEx : ((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
nouth.les.AlteratorAdd@6477463f
adding it.
nouth.les.AlteratorAdd@3d71d552
adding it.
nouth.les.MultiCruncherPlain@1cf4f579 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@18769467 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@46ee7fe8 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@7506e922 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@4ee285c6 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@4ee285c6 has brought me a new dirty child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
State polishing child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
nouth.les.DivCruncherSimplifyNew@621be5d1 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
DCSN in : (((-1)*(x)*(x))/(6))
DCSN dealt : (((-1)*(x)*(x))/(6))
MCP adding (-1)
MCP adding (x)
MCP res (((-1)^(1))*((x)^(2)))
DCSN list is subexlist of (((-1)^(1))*((x)^(2)))
DCSN listadd((6)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@621be5d1 has brought me a new dirty child : ((0)=((13)+((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
State polishing child : ((0)=((13)+((((-1)^(1))*((x)^(2)))/((6)^(1)))+((-2)*(x))))
nouth.les.DivCruncherEmergeDivs@573fd745 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPlain@15327b79 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherExpand@4f2410ac is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@722c41f4 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-2)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@5b80350b is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@5d6f64b1 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-2)
MCP adding (x)
MCP res ((-2)*(x))
into val 2
nouth.les.MultiCruncherPowerise@5d6f64b1 has brought me a new dirty child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
State polishing child : ((0)=((13)+(((-1)*((x)^(2)))/(6))+((-2)*(x))))
nouth.les.AddCruncherEqual@32a1bec0 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
ACE rwif ()
ACE rwif ((6))
ACE rwif ()
comparing() to ((6))
ACE rwif ((x))
ACE rwif ()
comparing() to ((x))
ACE rwif ((6))
comparing((6)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@22927a81 is messing around now.
on child ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
ACSD 0 not addex (0)
ACSD 0 not addex (13)
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*(x)*(x))
ACSD 0 not addex (6)
ACSD 0 not addex (((-1)*(x)*(x))/(6))
ACSD 0 not addex (-2)
ACSD 0 not addex (x)
ACSD 0 not addex ((-2)*(x))
DCS start ((6)/(1))
DCS after crossout before single plain :((6)) / ((1))
DCS single plain :((6)) / ((1))
DCS computing gcd from 6 and 1 = 1
DCS ZERO return resulting ((6)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(6))
DCS after crossout before single plain :((1)) / ((6))
DCS single plain :((1)) / ((6))
DCS computing gcd from 1 and 6 = 1
DCS ZERO return resulting ((1)/(6))
ACSD polished unide is (6)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (13)
DCS start ((6)/(6))
DCS crossing out (6)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex ((0)=((((-1)*(x)*(x))+((-2)*(6)*(x))+((13)*(6)))/(6)))
into val 1
nouth.les.AddCruncherSingleDenominator@22927a81 has brought me a new dirty child : ((0)=((((-1)*(x)*(x))+((-2)*(6)*(x))+((13)*(6)))/(6)))
State polishing child : ((0)=((((-1)*(x)*(x))+((-2)*(6)*(x))+((13)*(6)))/(6)))
ComputeSearcher loop 2 end bestHf 13 bestChildHf 14 open size 1 closed size 0
only worse children
outputer found ((0)=((13)+(((-1)*(x)*(x))/(6))+((-2)*(x))))
