2x^2 + 3x -\frac{7}{4} = x^2
2x^2 + 3x -\frac{7}{4} = x^2
2x^2 + 3x -(7)/(4) = x^2
2x^2 + 3x -(7)/(4) = x^2
tparser ( 2 * x ^ 2 + 3 * x - ( 7 ) / ( 4 ) = x ^ 2 )
tparser ( 2 * x ^ 2 + 3 * x - ( 7 ) / ( 4 ) = x ^ 2 )
ready S : ( 2 * x ^ 2 + 3 * x - ( 7 ) / ( 4 ) = x ^ 2 ) 
operators push (
members push 2
operators push *
new op * vs last op (
members push x
operators push ^
new op ^ vs last op *
members push 2
operators push +
new op + vs last op ^
operators pop +
operators pop ^
operators undo pop before the last pop.
new op + vs last op *
operators pop +
operators pop *
operators undo pop before the last pop.
new op + vs last op (
members push 3
operators push *
new op * vs last op +
members push x
operators push -
new op - vs last op *
operators pop -
operators pop *
operators undo pop before the last pop.
new op - vs last op +
operators pop -
operators pop +
operators undo pop before the last pop.
new op - vs last op (
operators push (
new op ( vs last op -
operators pop (
operators pop -
operators return back :  - (
members push 7
operators push )
operators pop : )
operators pop : (
operators push /
new op / vs last op -
operators push (
new op ( vs last op /
operators pop (
operators pop /
operators return back :  / (
members push 4
operators push )
operators pop : )
operators pop : (
operators push =
new op = vs last op /
operators pop =
operators pop /
operators undo pop before the last pop.
new op = vs last op -
operators pop =
operators pop -
operators undo pop before the last pop.
new op = vs last op (
operators pop =
operators pop (
operators return back :  ( =
members push x
operators push ^
new op ^ vs last op =
members push 2
operators push )
operators pop : )
operators pop into execute
operators pop into execute
operators pop : (
2 x 2 ^ * 3 x * + 7 4 / - x 2 ^ =
 2 ((x)^(2)) * 3 x * + 7 4 / - x 2 ^ = 
 ((2)*(((x)^(2)))) 3 x * + 7 4 / - x 2 ^ = 
 ((2)*(((x)^(2)))) ((3)*(x)) + 7 4 / - x 2 ^ = 
 ((((2)*(((x)^(2)))))+(((3)*(x)))) 7 4 / - x 2 ^ = 
 ((((2)*(((x)^(2)))))+(((3)*(x)))) ((7)/(4)) - x 2 ^ = 
 ((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))) x 2 ^ = 
 ((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))) ((x)^(2)) = 
 ((((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))))=(((x)^(2)))) 
Parsing ex from  ((((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))))=(((x)^(2)))) 
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP:default *
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default ^
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 3
TP: end of ex of 3
TP:default *
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 7
TP: end of ex of 7
TP:default /
TP:Start of new ex.
TP:default 4
TP: end of ex of 4
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default =
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default ^
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
Negating ((()/()))
DE replaceself numeric 2
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of * and val of ((2)*((x)^(2)))
DE Blank value with rs of * and val of ((2)*((x)^(2)))
DE Blank value with rs of $ and val of (((2)*((x)^(2))))
DE replacing self with only child! : ((2)*((x)^(2)))
DE Blank value with rs of $ and val of (((2)*((x)^(2))))
DE replacing self with only child! : ((2)*((x)^(2)))
DE replaceself numeric 3
DE replaceself x
DE Blank value with rs of * and val of ((3)*(x))
DE Blank value with rs of * and val of ((3)*(x))
DE Blank value with rs of $ and val of (((3)*(x)))
DE replacing self with only child! : ((3)*(x))
DE Blank value with rs of $ and val of (((3)*(x)))
DE replacing self with only child! : ((3)*(x))
DE Blank value with rs of + and val of (((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of + and val of (((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of $ and val of ((((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of $ and val of ((((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((2)*((x)^(2)))+((3)*(x)))
DE replaceself numeric 7
DE replaceself numeric 4
DE Blank value with rs of / and val of ((7)/(4))
DE Blank value with rs of / and val of ((7)/(4))
DE Blank value with rs of $ and val of (((7)/(4)))
DE replacing self with only child! : ((7)/(4))
DE Blank value with rs of $ and val of (((7)/(4)))
DE replacing self with only child! : ((7)/(4))
DE Blank value with rs of + and val of ((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4))))
DE Blank value with rs of + and val of ((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4))))
DE Blank value with rs of $ and val of (((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4)))))
DE replacing self with only child! : ((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4))))
DE Blank value with rs of $ and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of $ and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of = and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DE Blank value with rs of = and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DE Blank value with rs of $ and val of (((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))))
DE replacing self with only child! : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DE Blank value with rs of $ and val of (((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))))
DE replacing self with only child! : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
TextParser returning : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
Parsed ex as : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
#hf 30000
#hf 30018
#hf 30018
startingstate hfval is 30018
=====================================STATE 1 , generation 0
CurrState is ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
It's hf is 30018
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.DefOperator@4d7e1886
I'm ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))) and I'm about to propagate.
EqEx : (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@7adf9f5f
adding it.
nouth.les.AlteratorAdd@85ede7b
adding it.
EqEx : ((x)^(2)) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@5674cd4d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@5674cd4d has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.DivCruncherEmergeDivs@63961c42 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherPlain@6b884d57 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherExpand@38af3868 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5b2133b1 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist ((x)^(2))
mcd worklist (3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@5b2133b1 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherNumerator@33c7353a is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 1
nouth.les.MultiCruncherNumerator@33c7353a has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPowerise@681a9515 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@681a9515 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.PowerCruncherExpand@19469ea2 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 2
nouth.les.PowerCruncherExpand@19469ea2 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)*(x)))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.PowerCruncherConsolide@13221655 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRaise@31befd9f is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRoot@1c20c684 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitDen@1fb3ebeb is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitNum@548c4f57 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherPlain@1218025c is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherExpand@816f27d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@87aac27 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist ((x)^(2))
mcd worklist (3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@87aac27 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherNumerator@6ce253f1 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 1
nouth.les.MultiCruncherNumerator@6ce253f1 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPowerise@53d8d10a is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@53d8d10a has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPlain@e9e54c2 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherExpand@65ab7765 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1b28cdfa is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist ((x)^(2))
mcd worklist (3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@1b28cdfa has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherNumerator@eed1f14 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 1
nouth.les.MultiCruncherNumerator@eed1f14 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPowerise@7229724f is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@7229724f has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.AddCruncherEqual@4c873330 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACE rwif (((7)/(4)))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@119d7047 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((2)*((x)^(2)))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
ACSD 0 deno is 1 of (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherExpand@776ec8df is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 2
nouth.les.PowerCruncherExpand@776ec8df has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)*(x)))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.PowerCruncherConsolide@4eec7777 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRaise@3b07d329 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRoot@41629346 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitDen@404b9385 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitNum@6d311334 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.AlteratorAdd@7adf9f5f is messing around now.
It's altEx is (((-1)*(2)*((x)^(2)))+((-1)*(3)*(x)))
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACE rwif (((7)/(4)))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7adf9f5f has brought me a new dirty child : ((((-1)*((7)/(4)))+((0)*((x)^(2)))+((0)*(x)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.AlteratorAdd@85ede7b is messing around now.
It's altEx is (((-1)*(-1)*((7)/(4))))
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACE rwif (((7)/(4)))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((4))
ACE rwif (((x)^(2)))
ACE rwif ((4))
comparing((4)) to (((x)^(2)))
into val 1
nouth.les.AlteratorAdd@85ede7b has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+(((7))/(4)))=((((7))/(4))+((1)*((x)^(2)))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2))))
It just propagated.
#hf 30000
#hf 30018
#hf 31018
#hf 20000
#hf 20017
#hf 21017
#hf 30000
#hf 30015
#hf 31015
#hf 30000
#hf 30025
#hf 31025
New unique children : <(((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))) ; ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x))) ; (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x)))) ; ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2)))) ; >
Children hfs : <31018 ; 21017 ; 31015 ; 31025 ; >
Children ops : <nouth.les.MultiCruncherNumerator@33c7353anouth.les.PowerCruncherExpand@19469ea2nouth.les.AlteratorAdd@7adf9f5fnouth.les.AlteratorAdd@85ede7b>
=====================================STATE 2 , generation 1
CurrState is ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
It's hf is 21017
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.PowerCruncherExpand@19469ea2
I'm ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x))) and I'm about to propagate.
EqEx : (((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@682a0b20
adding it.
nouth.les.AlteratorAdd@3d075dc0
adding it.
EqEx : ((x)*(x)) is suggesting alterators now.
MultiEx suggestAlts : ((x)*(x)) suggesting now.
ME sA checking (x)
ME sA checking (x)
nouth.les.DivCruncherSimplifyNew@214c265e is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@214c265e has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.DivCruncherEmergeDivs@448139f0 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPlain@7cca494b is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherExpand@7ba4f24f is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@3b9a45b3 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@3b9a45b3 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherNumerator@7699a589 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherNumerator@7699a589 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherPowerise@58372a00 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@58372a00 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPlain@4dd8dc3 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherExpand@6d03e736 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@568db2f2 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@568db2f2 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherNumerator@378bf509 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherNumerator@378bf509 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherPowerise@5fd0d5ae is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@5fd0d5ae has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPlain@2d98a335 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherExpand@16b98e56 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7ef20235 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@7ef20235 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherNumerator@27d6c5e0 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherNumerator@27d6c5e0 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherPowerise@4f3f5b24 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@4f3f5b24 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.AddCruncherEqual@15aeb7ab is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@7b23ec81 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))))
ACSD 0 deno is 1 of (((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
ACSD 0 not addex ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPlain@6acbcfc0 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherExpand@5f184fc6 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@3feba861 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@3feba861 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherNumerator@5b480cf9 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherNumerator@5b480cf9 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherPowerise@6f496d9f is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@6f496d9f has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.AlteratorAdd@682a0b20 is messing around now.
It's altEx is (((-1)*(2)*(x)*(x))+((-1)*(3)*(x)))
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@682a0b20 has brought me a new dirty child : ((((-1)*((7)/(4)))+((0)*(x))+((0)*(x)*(x)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.AlteratorAdd@3d075dc0 is messing around now.
It's altEx is (((-1)*(-1)*((7)/(4))))
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@3d075dc0 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+(((7))/(4)))=((((7))/(4))+((1)*(x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
It just propagated.
#hf 20000
#hf 20017
#hf 22017
#hf 20000
#hf 20014
#hf 22014
#hf 20000
#hf 20024
#hf 22024
New unique children : <(((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x))) ; (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x)))) ; ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x)))) ; >
Children hfs : <22017 ; 22014 ; 22024 ; >
Children ops : <nouth.les.MultiCruncherNumerator@7699a589nouth.les.AlteratorAdd@682a0b20nouth.les.AlteratorAdd@3d075dc0>
=====================================STATE 3 , generation 2
CurrState is (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
It's hf is 22014
It's parent's operator is : nouth.les.PowerCruncherExpand@19469ea2
It's operator is : nouth.les.AlteratorAdd@682a0b20
I'm (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x)))) and I'm about to propagate.
EqEx : ((-1)*((7)/(4))) is suggesting alterators now.
MultiEx suggestAlts : ((-1)*((7)/(4))) suggesting now.
EqEx : (((-1)*(x)*(x))+((-3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@723279cf
adding it.
nouth.les.DivCruncherSimplifyNew@10f87f48 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@10f87f48 has brought me a new dirty child : (((-1)*(((7)^(1))/((4)^(1))))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.DivCruncherEmergeDivs@b4c966a is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPlain@2f4d3709 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@4e50df2e is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1d81eb93 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@1d81eb93 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherNumerator@7291c18f is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@7291c18f has brought me a new dirty child : (((1)*(((-1)*(7))/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherPowerise@34a245ab is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@34a245ab has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPlain@7cc355be is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@6e8cf4c6 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@12edcd21 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@12edcd21 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherNumerator@34c45dca is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@34c45dca has brought me a new dirty child : (((1)*(((-1)*(7))/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherPowerise@52cc8049 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@52cc8049 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPlain@5b6f7412 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@27973e9b is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@312b1dae is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@312b1dae has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherNumerator@7530d0a is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@7530d0a has brought me a new dirty child : (((1)*(((-1)*(7))/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherPowerise@27bc2616 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@27bc2616 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.AddCruncherEqual@3941a79c is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
ACE rwif ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@506e1b77 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*(x)*(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (x)
ACSD 0 not addex ((-3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
ACSD 0 deno is 1 of (((-1)*(x)*(x))+((-3)*(x)))
ACSD 0 not addex (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.AlteratorAdd@723279cf is messing around now.
It's altEx is (((-1)*(-1)*(x)*(x))+((-1)*(-3)*(x)))
on child (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
ACE rwif (((7)/(4)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@723279cf has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+((1)*(x)*(x)))=(((0)*(x))+((0)*(x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
It just propagated.
#hf 20000
#hf 20014
#hf 23014
#hf 20000
#hf 20014
#hf 23014
New unique children : <((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x)))) ; ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0)) ; >
Children hfs : <23014 ; 23014 ; >
Children ops : <nouth.les.MultiCruncherNumerator@7291c18fnouth.les.AlteratorAdd@723279cf>
=====================================STATE 4 , generation 2
CurrState is (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
It's hf is 22017
It's parent's operator is : nouth.les.PowerCruncherExpand@19469ea2
It's operator is : nouth.les.MultiCruncherNumerator@7699a589
I'm (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x))) and I'm about to propagate.
EqEx : ((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@4fca772d
adding it.
nouth.les.AlteratorAdd@9807454
adding it.
EqEx : ((x)*(x)) is suggesting alterators now.
MultiEx suggestAlts : ((x)*(x)) suggesting now.
ME sA checking (x)
ME sA checking (x)
nouth.les.MultiCruncherPlain@3d494fbf is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherPlain@3d494fbf has brought me a new dirty child : (((((-7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-7)/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherExpand@1ddc4ec2 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@133314b is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@b1bc7ed is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPowerise@7cd84586 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@7cd84586 has brought me a new dirty child : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.DivCruncherSimplifyNew@30dae81 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
DCSN in : (((-1)*(7))/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@30dae81 has brought me a new dirty child : (((((-7)^(1))/((4)^(1)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-7)/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.DivCruncherEmergeDivs@1b2c6ec2 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPlain@4edde6e5 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherPlain@4edde6e5 has brought me a new dirty child : (((((-7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-7)/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherExpand@70177ecd is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1e80bfe8 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@66a29884 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPowerise@4769b07b is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@4769b07b has brought me a new dirty child : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPlain@cc34f4d is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherPlain@cc34f4d has brought me a new dirty child : (((((-7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-7)/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherExpand@17a7cec2 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@65b3120a is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@6f539caf is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPowerise@79fc0f2f is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@79fc0f2f has brought me a new dirty child : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.AddCruncherEqual@50040f0c is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@2dda6444 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex ((-1)*(7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-1)*(7))/(4))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(4))
DCS after crossout before single plain :((1)) / ((4))
DCS single plain :((1)) / ((4))
DCS computing gcd from 1 and 4 = 1
DCS ZERO return resulting ((1)/(4))
DCS start ((1)/(4))
DCS after crossout before single plain :((1)) / ((4))
DCS single plain :((1)) / ((4))
DCS computing gcd from 1 and 4 = 1
DCS ZERO return resulting ((1)/(4))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
ACSD 0 not addex (((((-1)*(7))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=((x)*(x)))
into val 1
nouth.les.AddCruncherSingleDenominator@2dda6444 has brought me a new dirty child : (((((-1)*(7))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=((x)*(x)))
I've polished the child and now it looks like this : (((((-1)*(7))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=((x)*(x)))
nouth.les.MultiCruncherPlain@5e9f23b4 is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 1
nouth.les.MultiCruncherPlain@5e9f23b4 has brought me a new dirty child : (((((-7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
I've polished the child and now it looks like this : ((((-7)/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
nouth.les.MultiCruncherExpand@4783da3f is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@378fd1ac is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@49097b5d is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
into val 0
nouth.les.MultiCruncherPowerise@6e2c634b is messing around now.
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@6e2c634b has brought me a new dirty child : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=(((x)^(2))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.AlteratorAdd@4fca772d is messing around now.
It's altEx is (((-1)*(2)*(x)*(x))+((-1)*(3)*(x)))
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@4fca772d has brought me a new dirty child : (((((-7))/(4))+((0)*(x))+((0)*(x)*(x)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.AlteratorAdd@9807454 is messing around now.
It's altEx is ((((-1)*(-1)*(7))/(4)))
on child (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@9807454 has brought me a new dirty child : ((((0)/(4))+((2)*(x)*(x))+((3)*(x)))=((((7))/(4))+((1)*(x)*(x))))
I've polished the child and now it looks like this : ((((2)*(x)*(x))+((3)*(x)))=(((7)/(4))+((x)*(x))))
It just propagated.
#hf 20000
#hf 20015
#hf 23015
#hf 30000
#hf 30019
#hf 33019
#hf 20000
#hf 20012
#hf 23012
#hf 20000
#hf 20016
#hf 23016
New unique children : <((((-7)/(4))+((2)*(x)*(x))+((3)*(x)))=((x)*(x))) ; (((((-1)*(7))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=((x)*(x))) ; (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x)))) ; ((((2)*(x)*(x))+((3)*(x)))=(((7)/(4))+((x)*(x)))) ; >
Children hfs : <23015 ; 33019 ; 23012 ; 23016 ; >
Children ops : <nouth.les.MultiCruncherPlain@3d494fbfnouth.les.AddCruncherSingleDenominator@2dda6444nouth.les.AlteratorAdd@4fca772dnouth.les.AlteratorAdd@9807454>
=====================================STATE 5 , generation 2
CurrState is ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
It's hf is 22024
It's parent's operator is : nouth.les.PowerCruncherExpand@19469ea2
It's operator is : nouth.les.AlteratorAdd@3d075dc0
I'm ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x)))) and I'm about to propagate.
EqEx : (((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4))) is suggesting alterators now.
nouth.les.AlteratorAdd@37a71e93
adding it.
nouth.les.AlteratorAdd@7e6cbb7a
adding it.
EqEx : (((7)/(4))+((x)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@7c3df479
adding it.
nouth.les.AlteratorAdd@7106e68e
adding it.
nouth.les.DivCruncherSimplifyNew@7eda2dbb is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7eda2dbb has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((2)*(x)*(x))+((3)*(x))+(((7)^(1))/((4)^(1))))=((((7)^(1))/((4)^(1)))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.DivCruncherEmergeDivs@6576fe71 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.MultiCruncherPlain@76fb509a is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.MultiCruncherExpand@300ffa5d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1f17ae12 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@1f17ae12 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherNumerator@4d405ef7 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@4d405ef7 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherPowerise@6193b845 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@6193b845 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+(((x)^(2)))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2))))
nouth.les.MultiCruncherPlain@2e817b38 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.MultiCruncherExpand@c4437c4 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@433c675d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@433c675d has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherNumerator@3f91beef is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@3f91beef has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherPowerise@1a6c5a9e is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@1a6c5a9e has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+(((x)^(2)))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2))))
nouth.les.MultiCruncherPlain@37bba400 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.MultiCruncherExpand@179d3b25 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@254989ff is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@254989ff has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherNumerator@5d099f62 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@5d099f62 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherPowerise@37f8bb67 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@37f8bb67 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+(((x)^(2)))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2))))
nouth.les.DivCruncherSimplifyNew@49c2faae is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@49c2faae has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((2)*(x)*(x))+((3)*(x))+(((7)^(1))/((4)^(1))))=((((7)^(1))/((4)^(1)))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.DivCruncherEmergeDivs@20ad9418 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.AddCruncherEqual@31cefde0 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 0
nouth.les.AddCruncherSingleDenominator@439f5b3d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
DCS start ((1)/(4))
DCS after crossout before single plain :((1)) / ((4))
DCS single plain :((1)) / ((4))
DCS computing gcd from 1 and 4 = 1
DCS ZERO return resulting ((1)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4)))
into val 2
nouth.les.AddCruncherSingleDenominator@439f5b3d has brought me a new dirty child : ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4)))
I've polished the child and now it looks like this : ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4)))
nouth.les.DivCruncherSimplifyNew@1d56ce6a is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@1d56ce6a has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((2)*(x)*(x))+((3)*(x))+(((7)^(1))/((4)^(1))))=((((7)^(1))/((4)^(1)))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.DivCruncherEmergeDivs@5197848c is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.MultiCruncherPlain@17f052a3 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 0
nouth.les.MultiCruncherExpand@2e0fa5d3 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5010be6 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@5010be6 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherNumerator@685f4c2e is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@685f4c2e has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.MultiCruncherPowerise@7daf6ecc is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@7daf6ecc has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+(((x)^(2)))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2))))
nouth.les.AddCruncherEqual@2e5d6d97 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 0
nouth.les.AddCruncherSingleDenominator@238e0d81 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
DCS start ((1)/(4))
DCS after crossout before single plain :((1)) / ((4))
DCS single plain :((1)) / ((4))
DCS computing gcd from 1 and 4 = 1
DCS ZERO return resulting ((1)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4)))
into val 2
nouth.les.AddCruncherSingleDenominator@238e0d81 has brought me a new dirty child : ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4)))
I've polished the child and now it looks like this : ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4)))
nouth.les.AlteratorAdd@37a71e93 is messing around now.
It's altEx is (((-1)*(2)*(x)*(x))+((-1)*(3)*(x)))
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@37a71e93 has brought me a new dirty child : (((((7))/(4))+((-1)*((7)/(4)))+((0)*(x))+((0)*(x)*(x)))=((((7))/(4))+((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))+((7)/(4))))
nouth.les.AlteratorAdd@7e6cbb7a is messing around now.
It's altEx is ((((-1)*(7))/(4))+((-1)*(-1)*((7)/(4))))
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACE rwif ((4))
ACE rwif (((7)/(4)))
ACE rwif ((4))
comparing((4)) to (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((4))
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@7e6cbb7a has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((1)*(x)*(x))+((7)/(4))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
nouth.les.AlteratorAdd@7c3df479 is messing around now.
It's altEx is (((-1)*(x)*(x)))
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACE rwif (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((x)*(x))
ACE rwif ((4))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((4))
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7c3df479 has brought me a new dirty child : (((((7))/(4))+((-1)*((7)/(4)))+((1)*(x)*(x))+((3)*(x)))=((((7))/(4))+((0)*(x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((7)/(4))+((x)*(x)))=((7)/(4)))
nouth.les.AlteratorAdd@7106e68e is messing around now.
It's altEx is ((((-1)*(7))/(4)))
on child ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x))))
ACE rwif ((4))
ACE rwif (((7)/(4)))
ACE rwif ((4))
comparing((4)) to (((7)/(4)))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((4))
ACE rwif ((4))
ACE rwif ((4))
comparing((4)) to ((4))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@7106e68e has brought me a new dirty child : ((((-1)*((7)/(4)))+((0)/(4))+((2)*(x)*(x))+((3)*(x)))=(((0)/(4))+((1)*(x)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*(x)*(x))+((3)*(x)))=((x)*(x)))
It just propagated.
#hf 20000
#hf 20024
#hf 23024
#hf 30000
#hf 30028
#hf 33028
#hf 20000
#hf 20021
#hf 23021
#hf 20000
#hf 20019
#hf 23019
New unique children : <(((((-1)*(7))/(4))+((2)*(x)*(x))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)*(x)))) ; ((((7)+((-1)*(4)*((7)/(4)))+((2)*(4)*(x)*(x))+((3)*(4)*(x)))/(4))=(((7)+((4)*(x)*(x)))/(4))) ; ((((-1)*((7)/(4)))+((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))+((7)/(4)))) ; ((((-1)*((7)/(4)))+((3)*(x))+((7)/(4))+((x)*(x)))=((7)/(4))) ; >
Children hfs : <23024 ; 33028 ; 23021 ; 23019 ; >
Children ops : <nouth.les.MultiCruncherNumerator@4d405ef7nouth.les.AddCruncherSingleDenominator@439f5b3dnouth.les.AlteratorAdd@37a71e93nouth.les.AlteratorAdd@7c3df479>
=====================================STATE 6 , generation 3
CurrState is (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
It's hf is 23012
It's parent's operator is : nouth.les.MultiCruncherNumerator@7699a589
It's operator is : nouth.les.AlteratorAdd@4fca772d
I'm (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x)))) and I'm about to propagate.
EqEx : ((-7)/(4)) is suggesting alterators now.
nouth.les.AlteratorMulti@728938a9
adding it.
EqEx : (((-1)*(x)*(x))+((-3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@21b8d17c
adding it.
nouth.les.DivCruncherSimplifyNew@6433a2 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@6433a2 has brought me a new dirty child : ((((-7)^(1))/((4)^(1)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.DivCruncherEmergeDivs@5910e440 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPlain@6267c3bb is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@533ddba is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@246b179d is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@7a07c5b4 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@26a1ab54 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@26a1ab54 has brought me a new dirty child : (((-7)/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPlain@3d646c37 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@41cf53f9 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5a10411 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@2ef1e4fa is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@306a30c7 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 2
nouth.les.MultiCruncherPowerise@306a30c7 has brought me a new dirty child : (((-7)/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.AddCruncherEqual@b81eda8 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
ACE rwif ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@68de145 is messing around now.
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*(x)*(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (x)
ACSD 0 not addex ((-3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
ACSD 0 deno is 1 of (((-1)*(x)*(x))+((-3)*(x)))
ACSD 0 not addex (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.AlteratorMulti@728938a9 is messing around now.
It's altEx is (4)
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
AM 1/4: ((((-7)*(4))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
AM 1/4: ((((-7)*(4))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
AM 1/4: ((((-28))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
AM 1/4: ((((-28))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
into val 1
nouth.les.AlteratorMulti@728938a9 has brought me a new dirty child : ((((-28))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
I've polished the child and now it looks like this : (((-28)/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
nouth.les.AlteratorAdd@21b8d17c is messing around now.
It's altEx is (((-1)*(-1)*(x)*(x))+((-1)*(-3)*(x)))
on child (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
ACE rwif ((x))
ACE rwif ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@21b8d17c has brought me a new dirty child : ((((3)*(x))+(((-7))/(4))+((1)*(x)*(x)))=(((0)*(x))+((0)*(x)*(x))))
I've polished the child and now it looks like this : ((((-7)/(4))+((3)*(x))+((x)*(x)))=(0))
It just propagated.
#hf 30000
#hf 30013
#hf 34013
#hf 30000
#hf 30014
#hf 34014
#hf 20000
#hf 20012
#hf 24012
New unique children : <(((-7)/(4))=(((-1)*((x)^(2)))+((-3)*(x)))) ; (((-28)/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x))))) ; ((((-7)/(4))+((3)*(x))+((x)*(x)))=(0)) ; >
Children hfs : <34013 ; 34014 ; 24012 ; >
Children ops : <nouth.les.MultiCruncherPowerise@26a1ab54nouth.les.AlteratorMulti@728938a9nouth.les.AlteratorAdd@21b8d17c>
=====================================STATE 7 , generation 3
CurrState is ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
It's hf is 23014
It's parent's operator is : nouth.les.AlteratorAdd@682a0b20
It's operator is : nouth.les.MultiCruncherNumerator@7291c18f
I'm ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x)))) and I'm about to propagate.
EqEx : (((-1)*(7))/(4)) is suggesting alterators now.
nouth.les.AlteratorMulti@27fa135a
adding it.
EqEx : (((-1)*(x)*(x))+((-3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@46f7f36a
adding it.
nouth.les.MultiCruncherPlain@421faab1 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherPlain@421faab1 has brought me a new dirty child : ((((-7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherExpand@2b71fc7e is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5ce65a89 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@25f38edc is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@1a86f2f1 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@1a86f2f1 has brought me a new dirty child : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.DivCruncherSimplifyNew@3eb07fd3 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
DCSN in : (((-1)*(7))/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@3eb07fd3 has brought me a new dirty child : ((((-7)^(1))/((4)^(1)))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.DivCruncherEmergeDivs@506c589e is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPlain@69d0a921 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherPlain@69d0a921 has brought me a new dirty child : ((((-7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherExpand@446cdf90 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@799f7e29 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@4b85612c is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@277050dc is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@277050dc has brought me a new dirty child : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPlain@5c29bfd is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherPlain@5c29bfd has brought me a new dirty child : ((((-7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
I've polished the child and now it looks like this : (((-7)/(4))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.MultiCruncherExpand@7aec35a is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@67424e82 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
mcd worklist (-1)
mcd worklist (7)
mcd worklist (-1)
mcd worklist (x)
mcd worklist (x)
mcd worklist (-3)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@42110406 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@531d72ca is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
MCP adding (-1)
MCP adding (x)
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@531d72ca has brought me a new dirty child : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.AddCruncherEqual@22d8cfe0 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
ACE rwif ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@579bb367 is messing around now.
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex ((-1)*(7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-1)*(7))/(4))
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*(x)*(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (x)
ACSD 0 not addex ((-3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(x)*(x))+((-3)*(x))))
ACSD 0 deno is 1 of (((-1)*(x)*(x))+((-3)*(x)))
ACSD 0 not addex ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
into val 0
nouth.les.AlteratorMulti@27fa135a is messing around now.
It's altEx is (4)
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
AM 1/4: ((((-1)*(4)*(7))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
AM 1/4: ((((-1)*(4)*(7))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
AM 1/4: ((((-28))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
AM 1/4: ((((-28))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
into val 1
nouth.les.AlteratorMulti@27fa135a has brought me a new dirty child : ((((-28))/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
I've polished the child and now it looks like this : (((-28)/(4))=((4)*(((-1)*(x)*(x))+((-3)*(x)))))
nouth.les.AlteratorAdd@46f7f36a is messing around now.
It's altEx is (((-1)*(-1)*(x)*(x))+((-1)*(-3)*(x)))
on child ((((-1)*(7))/(4))=(((-1)*(x)*(x))+((-3)*(x))))
ACE rwif ((4))
ACE rwif ((x))
ACE rwif ((4))
comparing((4)) to ((x))
ACE rwif ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@46f7f36a has brought me a new dirty child : (((((-7))/(4))+((3)*(x))+((1)*(x)*(x)))=(((0)*(x))+((0)*(x)*(x))))
I've polished the child and now it looks like this : ((((-7)/(4))+((3)*(x))+((x)*(x)))=(0))
It just propagated.
#hf 30000
#hf 30015
#hf 34015
New unique children : <((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x)))) ; >
Children hfs : <34015 ; >
Children ops : <nouth.les.MultiCruncherPowerise@1a86f2f1>
=====================================STATE 8 , generation 3
CurrState is ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
It's hf is 23014
It's parent's operator is : nouth.les.AlteratorAdd@682a0b20
It's operator is : nouth.les.AlteratorAdd@723279cf
I'm ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0)) and I'm about to propagate.
EqEx : (((-1)*((7)/(4)))+((3)*(x))+((x)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@1de0aca6
adding it.
nouth.les.AlteratorAdd@255316f2
adding it.
EqEx : (0) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@41906a77 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@41906a77 has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
nouth.les.DivCruncherEmergeDivs@4b9af9a9 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 0
nouth.les.MultiCruncherPlain@5387f9e0 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 0
nouth.les.MultiCruncherExpand@6e5e91e4 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2cdf8d8a is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@2cdf8d8a has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
nouth.les.MultiCruncherNumerator@30946e09 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 1
nouth.les.MultiCruncherNumerator@30946e09 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((3)*(x))+((x)*(x)))=(0))
nouth.les.MultiCruncherPowerise@5cb0d902 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@5cb0d902 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+(((x)^(2))))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
nouth.les.MultiCruncherPlain@46fbb2c1 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 0
nouth.les.MultiCruncherExpand@1698c449 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5ef04b5 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@5ef04b5 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
nouth.les.MultiCruncherNumerator@5f4da5c3 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 1
nouth.les.MultiCruncherNumerator@5f4da5c3 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((3)*(x))+((x)*(x)))=(0))
nouth.les.MultiCruncherPowerise@443b7951 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@443b7951 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+(((x)^(2))))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
nouth.les.MultiCruncherPlain@14514713 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 0
nouth.les.MultiCruncherExpand@69663380 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5b37e0d2 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (3)
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@5b37e0d2 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
nouth.les.MultiCruncherNumerator@4459eb14 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 1
nouth.les.MultiCruncherNumerator@4459eb14 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((3)*(x))+((x)*(x)))=(0))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((3)*(x))+((x)*(x)))=(0))
nouth.les.MultiCruncherPowerise@5a2e4553 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
MCP adding (x)
MCP res (((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@5a2e4553 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+(((x)^(2))))=(0))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
nouth.les.AddCruncherEqual@28c97a5 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
ACE rwif (((7)/(4)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
into val 0
nouth.les.AddCruncherSingleDenominator@6659c656 is messing around now.
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x))))
ACSD 0 deno is 1 of (((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))
ACSD 0 not addex (0)
ACSD 0 not addex ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
into val 0
nouth.les.AlteratorAdd@1de0aca6 is messing around now.
It's altEx is (((-1)*(3)*(x))+((-1)*(x)*(x)))
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
ACE rwif (((7)/(4)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@1de0aca6 has brought me a new dirty child : ((((-1)*((7)/(4)))+((0)*(x))+((0)*(x)*(x)))=(((-3)*(x))+((-1)*(x)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*(x)*(x))+((-3)*(x))))
nouth.les.AlteratorAdd@255316f2 is messing around now.
It's altEx is (((-1)*(-1)*((7)/(4))))
on child ((((-1)*((7)/(4)))+((3)*(x))+((x)*(x)))=(0))
ACE rwif (((7)/(4)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((x)*(x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x)*(x))
ACE rwif ((x))
comparing((x)) to ((x)*(x))
ACE rwif ((4))
comparing((4)) to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@255316f2 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+(((7))/(4))+((1)*(x)*(x)))=((7)/(4)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((7)/(4))+((x)*(x)))=((7)/(4)))
It just propagated.
#hf 20000
#hf 20014
#hf 24014
New unique children : <(((((-1)*(7))/(4))+((3)*(x))+((x)*(x)))=(0)) ; ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0)) ; >
Children hfs : <24014 ; 0 ; >
Children ops : <nouth.les.MultiCruncherNumerator@30946e09nouth.les.MultiCruncherPowerise@5cb0d902>
=====================================STATE 9 , generation 4
CurrState is ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
It's hf is 0
It's parent's operator is : nouth.les.AlteratorAdd@723279cf
It's operator is : nouth.les.MultiCruncherPowerise@5cb0d902
Result found !
Solutionmaker rank = 2
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
solveQuadratic ready for abc
I'm ((0)+(1)) and I'm about to propagate.
nouth.les.AddCruncherEqual@2328c243 is messing around now.
on child ((0)+(1))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@2328c243 has brought me a new dirty child : (((1)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
I've polished the child and now it looks like this : ((1))
nouth.les.AddCruncherSingleDenominator@bebdb06 is messing around now.
on child ((0)+(1))
ACSD 0 not addex (0)
ACSD 0 not addex (1)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((0)+(1))
into val 0
I'm ((1)) and I'm about to propagate.
nouth.les.AddCruncherEqual@7a4f0f29 is messing around now.
on child ((1))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@45283ce2 is messing around now.
on child ((1))
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
into val 0
I'm ((0)+((1)*(3))) and I'm about to propagate.
nouth.les.MultiCruncherPlain@2077d4de is messing around now.
on child ((0)+((1)*(3)))
into val 1
nouth.les.MultiCruncherPlain@2077d4de has brought me a new dirty child : ((0)+((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
I've polished the child and now it looks like this : ((3))
nouth.les.MultiCruncherExpand@7591083d is messing around now.
on child ((0)+((1)*(3)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@77a567e1 is messing around now.
on child ((0)+((1)*(3)))
mcd worklist (1)
mcd worklist (3)
into val 0
nouth.les.MultiCruncherNumerator@736e9adb is messing around now.
on child ((0)+((1)*(3)))
into val 0
nouth.les.MultiCruncherPowerise@6d21714c is messing around now.
on child ((0)+((1)*(3)))
MCP adding (1)
MCP adding (3)
MCP res ((1)*(3))
into val 1
nouth.les.MultiCruncherPowerise@6d21714c has brought me a new dirty child : ((0)+((1)*(3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
I've polished the child and now it looks like this : ((3))
nouth.les.AddCruncherEqual@108c4c35 is messing around now.
on child ((0)+((1)*(3)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@108c4c35 has brought me a new dirty child : (((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
I've polished the child and now it looks like this : ((3))
nouth.les.AddCruncherSingleDenominator@4ccabbaa is messing around now.
on child ((0)+((1)*(3)))
ACSD 0 not addex (0)
ACSD 0 not addex (1)
ACSD 0 not addex (3)
ACSD 0 not addex ((1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((0)+((1)*(3)))
into val 0
I'm ((3)) and I'm about to propagate.
nouth.les.AddCruncherEqual@4bf558aa is messing around now.
on child ((3))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@2d38eb89 is messing around now.
on child ((3))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
into val 0
I'm ((3)) and I'm about to propagate.
nouth.les.AddCruncherEqual@5fa7e7ff is messing around now.
on child ((3))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@4629104a is messing around now.
on child ((3))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
into val 0
I'm ((3)) and I'm about to propagate.
nouth.les.AddCruncherEqual@27f8302d is messing around now.
on child ((3))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@4d76f3f8 is messing around now.
on child ((3))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
into val 0
I'm ((0)+((-1)*((7)/(4)))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@2d8e6db6 is messing around now.
on child ((0)+((-1)*((7)/(4))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@2d8e6db6 has brought me a new dirty child : ((0)+((-1)*(((7)^(1))/((4)^(1)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.DivCruncherEmergeDivs@23ab930d is messing around now.
on child ((0)+((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherPlain@4534b60d is messing around now.
on child ((0)+((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherExpand@3fa77460 is messing around now.
on child ((0)+((-1)*((7)/(4))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@619a5dff is messing around now.
on child ((0)+((-1)*((7)/(4))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@619a5dff has brought me a new dirty child : ((0)+((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.MultiCruncherNumerator@1ed6993a is messing around now.
on child ((0)+((-1)*((7)/(4))))
into val 1
nouth.les.MultiCruncherNumerator@1ed6993a has brought me a new dirty child : ((0)+((1)*(((-1)*(7))/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.MultiCruncherPowerise@7e32c033 is messing around now.
on child ((0)+((-1)*((7)/(4))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@7e32c033 has brought me a new dirty child : ((0)+((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.AddCruncherEqual@7ab2bfe1 is messing around now.
on child ((0)+((-1)*((7)/(4))))
ACE rwif ()
ACE rwif (((7)/(4)))
ACE rwif ()
comparing() to (((7)/(4)))
into val 0
nouth.les.AddCruncherSingleDenominator@497470ed is messing around now.
on child ((0)+((-1)*((7)/(4))))
ACSD 0 not addex (0)
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
ACSD 0 deno is 1 of ((0)+((-1)*((7)/(4))))
into val 0
I'm (((-1)*((7)/(4)))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@63c12fb0 is messing around now.
on child (((-1)*((7)/(4))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@63c12fb0 has brought me a new dirty child : (((-1)*(((7)^(1))/((4)^(1)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.DivCruncherEmergeDivs@b1a58a3 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherPlain@6438a396 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherExpand@e2144e4 is messing around now.
on child (((-1)*((7)/(4))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6477463f is messing around now.
on child (((-1)*((7)/(4))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@6477463f has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.MultiCruncherNumerator@3d71d552 is messing around now.
on child (((-1)*((7)/(4))))
into val 1
nouth.les.MultiCruncherNumerator@3d71d552 has brought me a new dirty child : (((1)*(((-1)*(7))/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.MultiCruncherPowerise@1cf4f579 is messing around now.
on child (((-1)*((7)/(4))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@1cf4f579 has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.AddCruncherEqual@18769467 is messing around now.
on child (((-1)*((7)/(4))))
ACE rwif (((7)/(4)))
into val 0
nouth.les.AddCruncherSingleDenominator@46ee7fe8 is messing around now.
on child (((-1)*((7)/(4))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
ACSD 0 deno is 1 of (((-1)*((7)/(4))))
into val 0
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : ((((-1)*(7))/(4)))
Comsearcher checkagainst : (((-1)*((7)/(4))))
I'm (((-1)*((7)/(4)))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@7506e922 is messing around now.
on child (((-1)*((7)/(4))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@7506e922 has brought me a new dirty child : (((-1)*(((7)^(1))/((4)^(1)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.DivCruncherEmergeDivs@4ee285c6 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherPlain@621be5d1 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherExpand@573fd745 is messing around now.
on child (((-1)*((7)/(4))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@15327b79 is messing around now.
on child (((-1)*((7)/(4))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@15327b79 has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.MultiCruncherNumerator@4f2410ac is messing around now.
on child (((-1)*((7)/(4))))
into val 1
nouth.les.MultiCruncherNumerator@4f2410ac has brought me a new dirty child : (((1)*(((-1)*(7))/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.MultiCruncherPowerise@722c41f4 is messing around now.
on child (((-1)*((7)/(4))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@722c41f4 has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.AddCruncherEqual@5b80350b is messing around now.
on child (((-1)*((7)/(4))))
ACE rwif (((7)/(4)))
into val 0
nouth.les.AddCruncherSingleDenominator@5d6f64b1 is messing around now.
on child (((-1)*((7)/(4))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
ACSD 0 deno is 1 of (((-1)*((7)/(4))))
into val 0
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : ((((-1)*(7))/(4)))
Comsearcher checkagainst : (((-1)*((7)/(4))))
I'm ((((-1)*(7))/(4))) and I'm about to propagate.
nouth.les.MultiCruncherPlain@32a1bec0 is messing around now.
on child ((((-1)*(7))/(4)))
into val 1
nouth.les.MultiCruncherPlain@32a1bec0 has brought me a new dirty child : ((((-7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.MultiCruncherExpand@22927a81 is messing around now.
on child ((((-1)*(7))/(4)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@78e03bb5 is messing around now.
on child ((((-1)*(7))/(4)))
mcd worklist (-1)
mcd worklist (7)
into val 0
nouth.les.MultiCruncherNumerator@5e8c92f4 is messing around now.
on child ((((-1)*(7))/(4)))
into val 0
nouth.les.MultiCruncherPowerise@61e4705b is messing around now.
on child ((((-1)*(7))/(4)))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
into val 1
nouth.les.MultiCruncherPowerise@61e4705b has brought me a new dirty child : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.DivCruncherSimplifyNew@50134894 is messing around now.
on child ((((-1)*(7))/(4)))
DCSN in : (((-1)*(7))/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@50134894 has brought me a new dirty child : ((((-7)^(1))/((4)^(1))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.DivCruncherEmergeDivs@2957fcb0 is messing around now.
on child ((((-1)*(7))/(4)))
into val 0
nouth.les.AddCruncherEqual@1376c05c is messing around now.
on child ((((-1)*(7))/(4)))
ACE rwif ((4))
into val 0
nouth.les.AddCruncherSingleDenominator@51521cc1 is messing around now.
on child ((((-1)*(7))/(4)))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex ((-1)*(7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-1)*(7))/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
into val 1
nouth.les.AddCruncherSingleDenominator@51521cc1 has brought me a new dirty child : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
I'm (((-7)/(4))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@1b4fb997 is messing around now.
on child (((-7)/(4)))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@1b4fb997 has brought me a new dirty child : ((((-7)^(1))/((4)^(1))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.DivCruncherEmergeDivs@deb6432 is messing around now.
on child (((-7)/(4)))
into val 0
nouth.les.AddCruncherEqual@28ba21f3 is messing around now.
on child (((-7)/(4)))
ACE rwif ((4))
into val 0
nouth.les.AddCruncherSingleDenominator@694f9431 is messing around now.
on child (((-7)/(4)))
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
into val 1
nouth.les.AddCruncherSingleDenominator@694f9431 has brought me a new dirty child : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
I'm (((-7)/(4))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@f2a0b8e is messing around now.
on child (((-7)/(4)))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@f2a0b8e has brought me a new dirty child : ((((-7)^(1))/((4)^(1))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.DivCruncherEmergeDivs@593634ad is messing around now.
on child (((-7)/(4)))
into val 0
nouth.les.AddCruncherEqual@20fa23c1 is messing around now.
on child (((-7)/(4)))
ACE rwif ((4))
into val 0
nouth.les.AddCruncherSingleDenominator@3581c5f3 is messing around now.
on child (((-7)/(4)))
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
into val 1
nouth.les.AddCruncherSingleDenominator@3581c5f3 has brought me a new dirty child : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
solveQuadratic abc : ((0)+(1))_((0)+((1)*(3)))_((0)+((-1)*((7)/(4))))
solveQuadratic abc : ((1))_((3))_(((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((3))^(2))+((-4)*(((-7)/(4)))*((1))))
sq before looú
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1)*((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (2)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((3))^(2))+((-4)*(((-7)/(4)))*((1))))
SolveQuadratic adding \\\frac{\\\sqrt{3^2-4\\\cdot (\\\frac{-7}{4})\\\cdot (1)}-3)}{2\\\cdot (1)}
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1)*((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (2)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((3))^(2))+((-4)*(((-7)/(4)))*((1))))
SolveQuadratic adding \\\frac{-\\\sqrt{3^2-4\\\cdot (\\\frac{-7}{4})\\\cdot (1)}-3)}{2\\\cdot (1)}
I'm ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x)) and I'm about to propagate.
EqEx : (((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1)))) is suggesting alterators now.
nouth.les.AlteratorMulti@6aa8ceb6
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@2530c12 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@73c6c3b2 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@73c6c3b2 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherExpand@48533e64 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.PowerCruncherExpand@48533e64 has brought me a new dirty child : ((((((((3))*((3)))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@64a294a6 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@7e0b37bc is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@3b95a09c is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@6ae40994 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@1a93a7ca is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@3d82c5f3 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN listadd(((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@3d82c5f3 has brought me a new dirty child : (((((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@2b05039f is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.AddCruncherEqual@61e717c2 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@66cd51c3 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@66cd51c3 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@4dcbadb4 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@4e515669 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@4e515669 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@17d10166 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@1b9e1916 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@1b9e1916 has brought me a new dirty child : ((((((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@ba8a1dc is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@4f8e5cde is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@504bae78 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 3
nouth.les.MultiCruncherPowerise@504bae78 has brought me a new dirty child : ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@3b764bce is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@759ebb3d is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@759ebb3d has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@484b61fc is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN listadd(((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@484b61fc has brought me a new dirty child : (((((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@45fe3ee3 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherExpand@4cdf35a9 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.PowerCruncherExpand@4cdf35a9 has brought me a new dirty child : ((((((((3))*((3)))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@4c98385c is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@5fcfe4b2 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@6bf2d08e is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@5eb5c224 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@53e25b76 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.AddCruncherEqual@73a8dfcc is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@ea30797 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@ea30797 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@7e774085 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@3f8f9dd6 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@3f8f9dd6 has brought me a new dirty child : ((((((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@aec6354 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@1c655221 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@58d25a40 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 3
nouth.les.MultiCruncherPowerise@58d25a40 has brought me a new dirty child : ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@1b701da1 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@726f3b58 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@726f3b58 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@442d9b6e is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@ee7d9f1 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@ee7d9f1 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@15615099 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@1edf1c96 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@1edf1c96 has brought me a new dirty child : ((((((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@368102c8 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@6996db8 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@1963006a is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 3
nouth.les.MultiCruncherPowerise@1963006a has brought me a new dirty child : ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@7fbe847c is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN listadd(((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@7fbe847c has brought me a new dirty child : (((((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@41975e01 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
I'm (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x)) and I'm about to propagate.
EqEx : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@c2e1f26
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@dcf3e99 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN dealt : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN listadd((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@dcf3e99 has brought me a new dirty child : ((((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6d9c638 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@7dc5e7b4 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@7dc5e7b4 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherExpand@1ee0005 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@75a1cd57 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@75a1cd57 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@3d012ddd is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@3d012ddd has brought me a new dirty child : (((((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@6f2b958e is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 2
nouth.les.MultiCruncherPowerise@6f2b958e has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherExpand@1eb44e46 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@1eb44e46 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@6504e3b2 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@515f550a is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@515f550a has brought me a new dirty child : (((((((-4)*((-7)/(4)))+(9))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((9)+((-4)*((-7)/(4))))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@626b2d4a is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@5e91993f is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@1c4af82c is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@379619aa is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@cac736f is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of (((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5e265ba4 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN dealt : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN listadd((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@5e265ba4 has brought me a new dirty child : ((((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@156643d4 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@123a439b is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@123a439b has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@7de26db8 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@1175e2db is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@1175e2db has brought me a new dirty child : (((((((-4)*((-7)/(4)))+(9))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((9)+((-4)*((-7)/(4))))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@36aa7bc2 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@76ccd017 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@182decdb is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@26f0a63f is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@26f0a63f has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherExpand@4361bd48 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@53bd815b is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@53bd815b has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@2401f4c3 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@2401f4c3 has brought me a new dirty child : (((((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@7637f22 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 2
nouth.les.MultiCruncherPowerise@7637f22 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@4926097b is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@762efe5d is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of (((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5d22bbb7 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN dealt : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN listadd((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@5d22bbb7 has brought me a new dirty child : ((((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@41a4555e is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
I'm ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@3830f1c0
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@39ed3c8d is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@39ed3c8d has brought me a new dirty child : (((((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@71dac704 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@123772c4 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@2d363fb3 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7d6f77cc is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@7d6f77cc has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherNumerator@5aaa6d82 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@5aaa6d82 has brought me a new dirty child : ((((-3)+((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherPowerise@73a28541 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@73a28541 has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherExpand@6f75e721 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@6f75e721 has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherConsolide@69222c14 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@606d8acf is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@606d8acf has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+(9))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@782830e is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@470e2030 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@3fb4f649 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@33833882 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@200a570f is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@16b3fc9e is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@16b3fc9e has brought me a new dirty child : (((((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@e2d56bf is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@244038d0 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@244038d0 has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherConsolide@5680a178 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@5fdef03a is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@5fdef03a has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+(9))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@3b22cdd0 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@1e81f4dc is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@4d591d15 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@65ae6ba4 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@48cf768c is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@59f95c5d is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@59f95c5d has brought me a new dirty child : (((((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5ccd43c2 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@4aa8f0b4
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@7960847b is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7960847b has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6a6824be is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@5c8da962 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@512ddf17 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2c13da15 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@2c13da15 has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherNumerator@77556fd is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@77556fd has brought me a new dirty child : ((((-3)+(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherPowerise@368239c8 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@368239c8 has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherEqual@9e89d68 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3b192d32 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@16f65612 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@16f65612 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@311d617d is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@7c53a9eb is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@ed17bee is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@2a33fae0 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@707f7052 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@11028347 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@14899482 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@21588809 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@2aae9190 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@2f333739 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@2f333739 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@77468bd9 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher is new : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I'm ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@12bb4df8
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@4cc77c2e is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@4cc77c2e has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@7a7b0070 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@39a054a5 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@71bc1ae4 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6ed3ef1 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@6ed3ef1 has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherNumerator@2437c6dc is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@2437c6dc has brought me a new dirty child : ((((-3)+(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherPowerise@1f89ab83 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@1f89ab83 has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherEqual@e73f9ac is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@61064425 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@7b1d7fff is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7b1d7fff has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@299a06ac is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@383534aa is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@6bc168e5 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@7b3300e5 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@2e5c649 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@136432db is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@7382f612 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@1055e4af is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3caeaf62 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@e6ea0c6 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@e6ea0c6 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6a38e57f is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I'm ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@5577140b
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@1c6b6478 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@1c6b6478 has brought me a new dirty child : ((((-3)+(((9)+(((28))/(4)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((28)/(4)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherExpand@67f89fa3 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@4ac68d3e is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
mcd worklist (-4)
mcd worklist (-7)
into val 0
nouth.les.MultiCruncherNumerator@277c0f21 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@6073f712 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding (-7)
MCP res ((-4)*(-7))
into val 1
nouth.les.MultiCruncherPowerise@6073f712 has brought me a new dirty child : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@43556938 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@43556938 has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@3d04a311 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@7a46a697 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@5f205aa is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5f205aa has brought me a new dirty child : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@6d86b085 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@6d86b085 has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@75828a0f is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@3abfe836 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@2ff5659e is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@77afea7d is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@161cd475 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@532760d8 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@57fa26b7 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@5f8ed237 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@2f410acf is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@2f410acf has brought me a new dirty child : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@47089e5f is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@47089e5f has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4141d797 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((7)+(9))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@68f7aae2
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@4f47d241 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@4f47d241 has brought me a new dirty child : (((((-3))+((1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@4c3e4790 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((7)+(9))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((7)+(9))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@38cccef is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@38cccef has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5679c6c6 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@27ddd392 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@19e1023e is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@7cef4e59 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@64b8f8f4 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@2db0f6b2 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@3cd1f1c8 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@3a4afd8d is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@3a4afd8d has brought me a new dirty child : (((((-3))+((1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@1996cd68 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((7)+(9))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((7)+(9))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@3339ad8e is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@3339ad8e has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@555590 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+((16)^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((16)^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@6d1e7682
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@424c0bc4 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@424c0bc4 has brought me a new dirty child : (((((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@3c679bde is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@16b4a017 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@8807e25 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@2a3046da is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@2a098129 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
 s is 4.0
into val 1
nouth.les.PowerCruncherProcessRoot@2a098129 has brought me a new dirty child : ((((-3)+((4)^(1)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(4))/(2))=(x))
nouth.les.PowerCruncherSplitDen@198e2867 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@12f40c25 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@3ada9e37 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((16)^((1)/(2))))
ACE rwif ()
comparing() to (((16)^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@5cbc508c is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (16)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((16)^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((16)^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+((16)^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((16)^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@3419866c is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@3419866c has brought me a new dirty child : (((((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@63e31ee is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+(4))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(4))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@68fb2c38
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@567d299b is messing around now.
on child ((((-3)+(4))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@567d299b has brought me a new dirty child : (((((1)))/(2))=(x))
I've polished the child and now it looks like this : (((1)/(2))=(x))
nouth.les.AddCruncherSingleDenominator@2eafffde is messing around now.
on child ((((-3)+(4))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (4)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
ACSD 0 deno is 1 of ((-3)+(4))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(4))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(4))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@59690aa4 is messing around now.
on child ((((-3)+(4))/(2))=(x))
DCSN in : (((-3)+(4))/(2))
DCSN dealt : (((-3)+(4))/(2))
DCSN listadd(((-3)+(4))^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@59690aa4 has brought me a new dirty child : (((((-3)+(4))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(4))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6842775d is messing around now.
on child ((((-3)+(4))/(2))=(x))
into val 0
I'm (((1)/(2))=(x)) and I'm about to propagate.
EqEx : ((1)/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@574caa3f
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@64cee07 is messing around now.
on child (((1)/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@64cee07 has brought me a new dirty child : ((((1)^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((1)/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1761e840 is messing around now.
on child (((1)/(2))=(x))
into val 0
Comsearcher checkagainst : (((1)/(2))=(x))
I'm (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x)) and I'm about to propagate.
EqEx : ((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1)))) is suggesting alterators now.
nouth.les.AlteratorMulti@6c629d6e
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@5ecddf8f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@3f102e87 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@3f102e87 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherExpand@27abe2cd is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.PowerCruncherExpand@27abe2cd has brought me a new dirty child : (((((-1)*(((((3))*((3)))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@5f5a92bb is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@6fdb1f78 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@51016012 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@29444d75 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@2280cdac is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@1517365b is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN listadd((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@1517365b has brought me a new dirty child : ((((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4fccd51b is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.AddCruncherEqual@44e81672 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@60215eee is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@60215eee has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@4ca8195f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@65e579dc is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@65e579dc has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@61baa894 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@b065c63 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@b065c63 has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@768debd is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@490d6c15 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@7d4793a8 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@7d4793a8 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@449b2d27 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@5479e3f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5479e3f has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@27082746 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN listadd((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@27082746 has brought me a new dirty child : ((((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@66133adc is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherExpand@7bfcd12c is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.PowerCruncherExpand@7bfcd12c has brought me a new dirty child : (((((-1)*(((((3))*((3)))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@42f30e0a is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@24273305 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@5b1d2887 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@46f5f779 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@1c2c22f3 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPlain@18e8568 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@33e5ccce is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@33e5ccce has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@5a42bbf4 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@270421f5 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@52d455b8 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@52d455b8 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@4f4a7090 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@18ef96 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@18ef96 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@6956de9 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@769c9116 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@769c9116 has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@6aceb1a5 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@2d6d8735 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@ba4d54 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@ba4d54 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@12bc6874 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@de0a01f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@de0a01f has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@4c75cab9 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@1ef7fe8e is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@1ef7fe8e has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@6f79caec is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@67117f44 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@67117f44 has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@5d3411d is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@2471cca7 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@5fe5c6f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@5fe5c6f has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@6979e8cb is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN listadd((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@6979e8cb has brought me a new dirty child : ((((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@763d9750 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
I'm (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x)) and I'm about to propagate.
EqEx : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@5c0369c4
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@2be94b0f is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN dealt : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN listadd((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@2be94b0f has brought me a new dirty child : ((((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@d70c109 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@17ed40e0 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@17ed40e0 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@50675690 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@31b7dea0 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@31b7dea0 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@3ac42916 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@3ac42916 has brought me a new dirty child : (((((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@47d384ee is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 3
nouth.les.MultiCruncherPowerise@47d384ee has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherExpand@2d6a9952 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@2d6a9952 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@22a71081 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@3930015a is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@3930015a has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@629f0666 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@1bc6a36e is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@1ff8b8f is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@387c703b is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@224aed64 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@c39f790 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN dealt : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN listadd((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@c39f790 has brought me a new dirty child : ((((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@71e7a66b is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@2ac1fdc4 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@2ac1fdc4 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@5f150435 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@1c53fd30 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@1c53fd30 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@50cbc42f is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@75412c2f is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@282ba1e is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@13b6d03 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@13b6d03 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@f5f2bb7 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@73035e27 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@73035e27 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@64c64813 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@64c64813 has brought me a new dirty child : (((((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@3ecf72fd is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 3
nouth.les.MultiCruncherPowerise@3ecf72fd has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@483bf400 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@483bf400 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@21a06946 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@77f03bb1 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@77f03bb1 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@326de728 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@326de728 has brought me a new dirty child : (((((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@25618e91 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 3
nouth.les.MultiCruncherPowerise@25618e91 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@7a92922 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@71f2a7d5 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@2cfb4a64 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN dealt : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN listadd((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@2cfb4a64 has brought me a new dirty child : ((((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5474c6c is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@4b6995df
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@2fc14f68 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@2fc14f68 has brought me a new dirty child : (((((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@591f989e is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@66048bfd is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@61443d8f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@445b84c0 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@445b84c0 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@61a52fbd is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@61a52fbd has brought me a new dirty child : ((((-3)+((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@233c0b17 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@233c0b17 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherExpand@63d4e2ba is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@63d4e2ba has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherConsolide@7bb11784 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@33a10788 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@33a10788 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@7006c658 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@34033bd0 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@47fd17e3 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@7cdbc5d3 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3aa9e816 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@17d99928 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@17d99928 has brought me a new dirty child : (((((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@3834d63f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@1ae369b7 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.PowerCruncherExpand@1ae369b7 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)*(3)))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherConsolide@6fffcba5 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@34340fab is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@34340fab has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@2aafb23c is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@2b80d80f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@3ab39c39 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@2eee9593 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@7907ec20 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@546a03af is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@546a03af has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@721e0f4f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@721e0f4f has brought me a new dirty child : ((((-3)+((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@28864e92 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@28864e92 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@6ea6d14e is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@6ad5c04e is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@6833ce2c is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@6833ce2c has brought me a new dirty child : (((((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@725bef66 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@2aaf7cc2
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@6e3c1e69 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@6e3c1e69 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1888ff2c is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@35851384 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@649d209a is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6adca536 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@6adca536 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@357246de is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@357246de has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@28f67ac7 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@28f67ac7 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@256216b3 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@2a18f23c is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@d7b1517 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@d7b1517 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@16c0663d is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@23223dd8 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@4ec6a292 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@1b40d5f0 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@ea4a92b is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@3c5a99da is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@47f37ef1 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@5a01ccaa is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@71c7db30 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@19bb089b is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@19bb089b has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@4563e9ab is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@4563e9ab has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@11531931 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@11531931 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@5e025e70 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@1fbc7afb is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@45c8e616 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@45c8e616 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4cdbe50f is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher is new : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I'm ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@66d33a
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@7cf10a6f is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7cf10a6f has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@7e0babb1 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@6debcae2 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@5ba23b66 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2ff4f00f is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@2ff4f00f has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@c818063 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@c818063 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@3f0ee7cb is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@3f0ee7cb has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@75bd9247 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@7d417077 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@7dc36524 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7dc36524 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@35bbe5e8 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@2c8d66b2 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@5a39699c is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@3cb5cdba is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@56cbfb61 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@1134affc is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@d041cf is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@129a8472 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@1b0375b3 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2f7c7260 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@2f7c7260 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@2d209079 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@2d209079 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@6bdf28bb is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@6bdf28bb has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@6b71769e is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@2752f6e2 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@e580929 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@e580929 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1cd072a9 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I'm ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@7c75222b
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@4c203ea1 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@4c203ea1 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((28))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((28)/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@27f674d is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1d251891 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
mcd worklist (-4)
mcd worklist (-7)
mcd worklist (-1)
mcd worklist (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@48140564 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@58ceff1 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding (-7)
MCP res ((-4)*(-7))
MCP adding (-1)
MCP adding (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
MCP res ((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@58ceff1 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@7c30a502 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7c30a502 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@49e4cb85 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@2133c8f8 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@43a25848 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@43a25848 has brought me a new dirty child : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@3ac3fd8b is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@3ac3fd8b has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5594a1b5 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@6a5fc7f7 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@3b6eb2ec is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@1e643faf is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@6e8dacdf is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@7a79be86 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@34ce8af7 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@b684286 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@b684286 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((28))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((28)/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@880ec60 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@3f3afe78 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
mcd worklist (-4)
mcd worklist (-7)
mcd worklist (-1)
mcd worklist (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@7f63425a is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@36d64342 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding (-7)
MCP res ((-4)*(-7))
MCP adding (-1)
MCP adding (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
MCP res ((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@36d64342 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@39ba5a14 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@511baa65 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@511baa65 has brought me a new dirty child : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@340f438e is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@340f438e has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@30c7da1e is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@5b464ce8
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@57829d67 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@57829d67 has brought me a new dirty child : (((((-3))+((-1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@19dfb72a is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
ACSD 0 not addex ((-1)*(((7)+(9))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((7)+(9))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@17c68925 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@17c68925 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@7e0ea639 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@3d24753a is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@59a6e353 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@7a0ac6e3 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@71be98f5 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@6fadae5d is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@17f6480 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@2d6e8792 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@2812cbfa is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2acf57e3 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
mcd worklist (-1)
mcd worklist (((7)+(9))^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@506e6d5e is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@96532d6 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
MCP adding (-1)
MCP adding (((7)+(9))^((1)/(2)))
MCP res ((-1)*(((7)+(9))^((1)/(2))))
into val 1
nouth.les.MultiCruncherPowerise@96532d6 has brought me a new dirty child : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@3796751b is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@3796751b has brought me a new dirty child : (((((-3))+((-1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@67b64c45 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
ACSD 0 not addex ((-1)*(((7)+(9))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((7)+(9))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@4411d970 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@4411d970 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6442b0a6 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*((16)^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@60f82f98
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@35f983a6 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@35f983a6 has brought me a new dirty child : (((((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@7f690630 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherExpand@edf4efb is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@2f7a2457 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@566776ad is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@6108b2d7 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
 s is 4.0
into val 1
nouth.les.PowerCruncherProcessRoot@6108b2d7 has brought me a new dirty child : ((((-3)+((-1)*((4)^(1))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(4)))/(2))=(x))
nouth.les.PowerCruncherSplitDen@1554909b is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@6bf256fa is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@6cd8737 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@22f71333 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@13969fbe is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
mcd worklist (-1)
mcd worklist ((16)^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@6aaa5eb0 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@3498ed is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
MCP adding (-1)
MCP adding ((16)^((1)/(2)))
MCP res ((-1)*((16)^((1)/(2))))
into val 1
nouth.les.MultiCruncherPowerise@3498ed has brought me a new dirty child : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@1a407d53 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((16)^((1)/(2))))
ACE rwif ()
comparing() to (((16)^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3d8c7aca is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (16)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((16)^((1)/(2)))
ACSD 0 not addex ((-1)*((16)^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*((16)^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*((16)^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5ebec15 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@5ebec15 has brought me a new dirty child : (((((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@21bcffb5 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*(4)))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(4)))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@380fb434
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@668bc3d5 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@668bc3d5 has brought me a new dirty child : ((((-3)+((-4)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(-4))/(2))=(x))
nouth.les.MultiCruncherExpand@3cda1055 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7a5d012c is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
mcd worklist (-1)
mcd worklist (4)
into val 0
nouth.les.MultiCruncherNumerator@3fb6a447 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@79b4d0f is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
MCP adding (-1)
MCP adding (4)
MCP res ((-1)*(4))
into val 1
nouth.les.MultiCruncherPowerise@79b4d0f has brought me a new dirty child : ((((-3)+((-1)*(4)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(4)))/(2))=(x))
nouth.les.AddCruncherEqual@6b2fad11 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@6b2fad11 has brought me a new dirty child : (((((-7)))/(2))=(x))
I've polished the child and now it looks like this : (((-7)/(2))=(x))
nouth.les.AddCruncherSingleDenominator@79698539 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (4)
ACSD 0 not addex ((-1)*(4))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
ACSD 0 deno is 1 of ((-3)+((-1)*(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(4)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(4)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@73f792cf is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
DCSN in : (((-3)+((-1)*(4)))/(2))
DCSN dealt : (((-3)+((-1)*(4)))/(2))
DCSN listadd(((-3)+((-1)*(4)))^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@73f792cf has brought me a new dirty child : (((((-3)+((-1)*(4)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(4)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@2ed94a8b is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
into val 0
I'm (((-7)/(2))=(x)) and I'm about to propagate.
EqEx : ((-7)/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@38082d64
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@dfd3711 is messing around now.
on child (((-7)/(2))=(x))
DCSN in : ((-7)/(2))
DCSN dealt : ((-7)/(2))
DCSN listadd((-7)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@dfd3711 has brought me a new dirty child : ((((-7)^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((-7)/(2))=(x))
nouth.les.DivCruncherEmergeDivs@42d3bd8b is messing around now.
on child (((-7)/(2))=(x))
into val 0
Comsearcher checkagainst : (((-7)/(2))=(x))
all values : \\\frac{1}{2}=x
all values : \\\frac{-7}{2}=x
outputer found ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
