((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
tparser ( ( ( 0 ) = ( ( ( - 1 ) * ( 5 ) * ( x ) ) + ( ( 10 ) / ( 5 ) ) + ( y ) ) ) )
tparser ( ( ( 0 ) = ( ( ( - 1 ) * ( 5 ) * ( x ) ) + ( ( 10 ) / ( 5 ) ) + ( y ) ) ) )
ready S : ( ( ( 0 ) = ( ( ( - 1 ) * ( 5 ) * ( x ) ) + ( ( 10 ) / ( 5 ) ) + ( y ) ) ) ) 
operators push (
operators push (
new op ( vs last op (
operators pop (
operators pop (
operators return back :  ( (
operators push (
new op ( vs last op (
operators pop (
operators pop (
operators return back :  ( (
members push 0
operators push )
operators pop : )
operators pop : (
operators push =
new op = vs last op (
operators pop =
operators pop (
operators return back :  ( =
operators push (
new op ( vs last op =
operators push (
new op ( vs last op (
operators pop (
operators pop (
operators return back :  ( (
operators push (
new op ( vs last op (
operators pop (
operators pop (
operators return back :  ( (
operators push -
operators pop : -
members push -1
operators push )
operators pop : )
operators pop : (
operators push *
new op * vs last op (
operators push (
new op ( vs last op *
operators pop (
operators pop *
operators return back :  * (
members push 5
operators push )
operators pop : )
operators pop : (
operators push *
new op * vs last op *
operators pop *
operators pop *
operators undo pop before the last pop.
new op * vs last op *
operators pop *
operators pop (
operators return back :  ( *
operators push (
new op ( vs last op *
operators pop (
operators pop *
operators return back :  * (
members push x
operators push )
operators pop : )
operators pop : (
operators push )
operators pop : )
operators pop into execute
operators pop : (
operators push +
new op + vs last op (
operators push (
new op ( vs last op +
operators pop (
operators pop +
operators return back :  + (
operators push (
new op ( vs last op (
operators pop (
operators pop (
operators return back :  ( (
members push 10
operators push )
operators pop : )
operators pop : (
operators push /
new op / vs last op (
operators push (
new op ( vs last op /
operators pop (
operators pop /
operators return back :  / (
members push 5
operators push )
operators pop : )
operators pop : (
operators push )
operators pop : )
operators pop into execute
operators pop : (
operators push +
new op + vs last op +
operators pop +
operators pop +
operators undo pop before the last pop.
new op + vs last op +
operators pop +
operators pop (
operators return back :  ( +
operators push (
new op ( vs last op +
operators pop (
operators pop +
operators return back :  + (
members push y
operators push )
operators pop : )
operators pop : (
operators push )
operators pop : )
operators pop into execute
operators pop : (
operators push )
operators pop : )
operators pop into execute
operators pop : (
operators push )
operators pop : )
operators pop : (
0 -1 5 * x * 10 5 / + y + =
 0 ((-1)*(5)) x * 10 5 / + y + = 
 0 ((((-1)*(5)))*(x)) 10 5 / + y + = 
 0 ((((-1)*(5)))*(x)) ((10)/(5)) + y + = 
 0 ((((((-1)*(5)))*(x)))+(((10)/(5)))) y + = 
 0 ((((((((-1)*(5)))*(x)))+(((10)/(5)))))+(y)) = 
 ((0)=(((((((((-1)*(5)))*(x)))+(((10)/(5)))))+(y)))) 
Parsing ex from  ((0)=(((((((((-1)*(5)))*(x)))+(((10)/(5)))))+(y)))) 
TP:Start of new ex.
TP:Start of new ex.
TP:default 0
TP: end of ex of 0
TP:default =
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default -
TP:default 1
TP: end of ex of -1
TP:default *
TP:Start of new ex.
TP:default 5
TP: end of ex of 5
TP: end of ex of 
TP: end of ex of 
TP:default *
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 1
TP:default 0
TP: end of ex of 10
TP:default /
TP:Start of new ex.
TP:default 5
TP: end of ex of 5
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:default y
TP: end of ex of y
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
DE replaceself numeric 0
DE replaceself numeric -1
DE replaceself numeric 5
DE Blank value with rs of *
DE Blank value with rs of *
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE replaceself x
DE Blank value with rs of *
DE Blank value with rs of *
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE replaceself numeric 10
DE replaceself numeric 5
DE Blank value with rs of /
DE Blank value with rs of /
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of +
DE Blank value with rs of +
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE replaceself y
DE Blank value with rs of +
DE Blank value with rs of +
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of =
DE Blank value with rs of =
DE Blank value with rs of $
DE replacing self with only child!
DE Blank value with rs of $
DE replacing self with only child!
Parsed ex as : ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
=====================================STATE 1 , generation 0
CurrState is ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
It's hf is 2011
It's parent's operator is : nouth.les.DefOperator@5451c3a8
It's operator is : nouth.les.DefOperator@5451c3a8
I'm ((0)=(((-1)*(5)*(x))+((10)/(5))+(y))) and I'm about to propagate.
EqEx : (0) is suggesting alterators now.
EqEx : (((-1)*(5)*(x))+((10)/(5))+(y)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
nouth.les.AlteratorAdd@f6f4d33
adding it.
nouth.les.AlteratorAdd@23fc625e
adding it.
nouth.les.AlteratorAdd@3f99bd52
adding it.
nouth.les.AlteratorAdd@4f023edb
adding it.
nouth.les.MultiCruncherPlain@3a71f4dd is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
into val 1
nouth.les.MultiCruncherPlain@3a71f4dd has brought me a new dirty child : ((0)=(((-5)*(x))+((10)/(5))+(y)))
State polishing child : ((0)=(((-5)*(x))+((10)/(5))+(y)))
nouth.les.MultiCruncherExpand@7adf9f5f is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@63961c42 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
mcd worklist (-1)
mcd worklist (5)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@65b54208 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
into val 0
nouth.les.MultiCruncherPowerise@1be6f5c3 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
MCP adding (-1)
MCP adding (5)
MCP adding (x)
MCP res ((-1)*(5)*(x))
into val 1
nouth.les.MultiCruncherPowerise@1be6f5c3 has brought me a new dirty child : ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
State polishing child : ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
nouth.les.DivCruncherSimplifyNew@38af3868 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
DCSN listadd((10)^(1))
DCSN listadd((5)^(1))
DCSN new num ((10)^(1))
DCSN new den ((5)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@38af3868 has brought me a new dirty child : ((0)=(((-1)*(5)*(x))+(((10)^(1))/((5)^(1)))+(y)))
State polishing child : ((0)=(((-1)*(5)*(x))+(((10)^(1))/((5)^(1)))+(y)))
nouth.les.DivCruncherEmergeDivs@77459877 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
into val 0
nouth.les.AddCruncherEqual@5b2133b1 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
ACE rwif ((x))
ACE rwif ((5))
ACE rwif ((x))
comparing((x)) to ((5))
ACE rwif ((y))
ACE rwif ((x))
comparing((x)) to ((y))
ACE rwif ((5))
comparing((5)) to ((y))
into val 0
nouth.les.AddCruncherSingleDenominator@72ea2f77 is messing around now.
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
ACSD 0 not addex (0)
ACSD 0 not addex (-1)
ACSD 0 not addex (5)
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*(5)*(x))
ACSD 0 not addex (10)
ACSD 0 not addex (5)
ACSD 0 not addex ((10)/(5))
ACSD 0 not addex (y)
DCS start ((5)/(1))
DCS after crossout before single plain :((5)) / ((1))
DCS single plain :((5)) / ((1))
DCS computing gcd from 5 and 1 = 1
DCS ZERO return resulting ((5)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(5))
DCS after crossout before single plain :((1)) / ((5))
DCS single plain :((1)) / ((5))
DCS computing gcd from 1 and 5 = 1
DCS ZERO return resulting ((1)/(5))
ACSD polished unide is (5)
DCS start ((5)/(5))
DCS crossing out (5)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
ACSD 0 not addex ((0)=(((10)+((-1)*(5)*(5)*(x))+((5)*(y)))/(5)))
into val 1
nouth.les.AddCruncherSingleDenominator@72ea2f77 has brought me a new dirty child : ((0)=(((10)+((-1)*(5)*(5)*(x))+((5)*(y)))/(5)))
State polishing child : ((0)=(((10)+((-1)*(5)*(5)*(x))+((5)*(y)))/(5)))
nouth.les.AlteratorAdd@f6f4d33 is messing around now.
It's altEx is (((-1)*(-1)*(5)*(x)))
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
ACE rwif ((x))
ACE rwif ((5))
ACE rwif ((x))
comparing((x)) to ((5))
ACE rwif ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((y))
ACE rwif ((x))
comparing((x)) to ((y))
ACE rwif ((5))
comparing((5)) to ((y))
into val 1
nouth.les.AlteratorAdd@f6f4d33 has brought me a new dirty child : (((5)*(x))=((((10))/(5))+((0)*(x))+((1)*(y))))
State polishing child : (((5)*(x))=((((10))/(5))+((0)*(x))+((1)*(y))))
nouth.les.AlteratorAdd@23fc625e is messing around now.
It's altEx is ((((-1)*(10))/(5))+((-1)*(y)))
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
ACE rwif ((5))
ACE rwif ((y))
ACE rwif ((5))
comparing((5)) to ((y))
ACE rwif ((5))
ACE rwif ((x))
ACE rwif ((5))
comparing((5)) to ((x))
ACE rwif ((y))
ACE rwif ((5))
comparing((5)) to ((y))
ACE rwif ((x))
comparing((x)) to ((y))
ACE rwif ((5))
ACE rwif ((5))
comparing((5)) to ((5))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((y))
ACE rwif ((5))
comparing((5)) to ((y))
ACE rwif ((x))
comparing((x)) to ((y))
ACE rwif ((y))
comparing((y)) to ((y))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@23fc625e has brought me a new dirty child : (((((-10))/(5))+((-1)*(y)))=(((-5)*(x))+((0)*(y))+((0)/(5))))
State polishing child : (((((-10))/(5))+((-1)*(y)))=(((-5)*(x))+((0)*(y))+((0)/(5))))
nouth.les.AlteratorAdd@3f99bd52 is messing around now.
It's altEx is (((-1)*(y)))
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
ACE rwif ((x))
ACE rwif ((y))
ACE rwif ((x))
comparing((x)) to ((y))
ACE rwif ((5))
ACE rwif ((x))
comparing((x)) to ((5))
ACE rwif ((y))
comparing((y)) to ((5))
ACE rwif ((y))
ACE rwif ((x))
comparing((x)) to ((y))
ACE rwif ((y))
comparing((y)) to ((y))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@3f99bd52 has brought me a new dirty child : (((-1)*(y))=((((10))/(5))+((-5)*(x))+((0)*(y))))
State polishing child : (((-1)*(y))=((((10))/(5))+((-5)*(x))+((0)*(y))))
nouth.les.AlteratorAdd@4f023edb is messing around now.
It's altEx is ((((-1)*(10))/(5))+((-1)*(-1)*(5)*(x)))
on child ((0)=(((-1)*(5)*(x))+((10)/(5))+(y)))
ACE rwif ((5))
ACE rwif ((x))
ACE rwif ((5))
comparing((5)) to ((x))
ACE rwif ((5))
ACE rwif ((x))
ACE rwif ((5))
comparing((5)) to ((x))
ACE rwif ((5))
ACE rwif ((5))
comparing((5)) to ((5))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif ((5))
comparing((5)) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((y))
ACE rwif ((5))
comparing((5)) to ((y))
ACE rwif ((x))
comparing((x)) to ((y))
into val 1
nouth.les.AlteratorAdd@4f023edb has brought me a new dirty child : (((((-10))/(5))+((5)*(x)))=(((0)*(x))+((0)/(5))+((1)*(y))))
State polishing child : (((((-10))/(5))+((5)*(x)))=(((0)*(x))+((0)/(5))+((1)*(y))))
It just propagated.
New unique children : <((0)=(((-5)*(x))+((10)/(5))+(y))) ; ((0)=((((10)^(1))/((5)^(1)))+((-1)*(5)*(x))+(y))) ; ((0)=(((10)+((-1)*(5)*(5)*(x))+((5)*(y)))/(5))) ; (((5)*(x))=(((10)/(5))+(y))) ; ((((-1)*(y))+((-10)/(5)))=((-5)*(x))) ; (((-1)*(y))=(((-5)*(x))+((10)/(5)))) ; ((((-10)/(5))+((5)*(x)))=(y)) ; >
Children hfs : <2010 ; 2015 ; 3014 ; 1009 ; 1011 ; 2011 ; 2009 ; >
Children ops : <nouth.les.MultiCruncherPlain@3a71f4ddnouth.les.DivCruncherSimplifyNew@38af3868nouth.les.AddCruncherSingleDenominator@72ea2f77nouth.les.AlteratorAdd@f6f4d33nouth.les.AlteratorAdd@23fc625enouth.les.AlteratorAdd@3f99bd52nouth.les.AlteratorAdd@4f023edb>
=====================================STATE 2 , generation 1
CurrState is (((5)*(x))=(((10)/(5))+(y)))
It's hf is 1009
It's parent's operator is : nouth.les.DefOperator@5451c3a8
It's operator is : nouth.les.AlteratorAdd@f6f4d33
I'm (((5)*(x))=(((10)/(5))+(y))) and I'm about to propagate.
EqEx : ((5)*(x)) is suggesting alterators now.
MultiEx suggestAlts : ((5)*(x)) suggesting now.
ME sA checking (5)
ME sA multied by (5) into ((5))
ME sA checking (x)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((5))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((5))
nouth.les.AlteratorDiv@2f2c9b19
adding it.
EqEx : (((10)/(5))+(y)) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
nouth.les.AlteratorAdd@31befd9f
adding it.
nouth.les.AlteratorAdd@1c20c684
adding it.
nouth.les.MultiCruncherPlain@1fb3ebeb is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
into val 0
nouth.les.MultiCruncherExpand@548c4f57 is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1218025c is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
mcd worklist (5)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@816f27d is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
into val 0
nouth.les.MultiCruncherPowerise@87aac27 is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
MCP adding (5)
MCP adding (x)
MCP res ((5)*(x))
into val 1
nouth.les.MultiCruncherPowerise@87aac27 has brought me a new dirty child : (((5)*(x))=(((10)/(5))+(y)))
State polishing child : (((5)*(x))=(((10)/(5))+(y)))
nouth.les.DivCruncherSimplifyNew@3e3abc88 is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
DCSN listadd((10)^(1))
DCSN listadd((5)^(1))
DCSN new num ((10)^(1))
DCSN new den ((5)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@3e3abc88 has brought me a new dirty child : (((5)*(x))=((((10)^(1))/((5)^(1)))+(y)))
State polishing child : (((5)*(x))=((((10)^(1))/((5)^(1)))+(y)))
nouth.les.DivCruncherEmergeDivs@6ce253f1 is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
into val 0
nouth.les.AddCruncherEqual@53d8d10a is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
ACE rwif ((5))
ACE rwif ((y))
ACE rwif ((5))
comparing((5)) to ((y))
into val 0
nouth.les.AddCruncherSingleDenominator@e9e54c2 is messing around now.
on child (((5)*(x))=(((10)/(5))+(y)))
ACSD 0 not addex (5)
ACSD 0 not addex (x)
ACSD 0 not addex ((5)*(x))
ACSD 0 not addex (10)
ACSD 0 not addex (5)
ACSD 0 not addex ((10)/(5))
ACSD 0 not addex (y)
DCS start ((1)/(5))
DCS after crossout before single plain :((1)) / ((5))
DCS single plain :((1)) / ((5))
DCS computing gcd from 1 and 5 = 1
DCS ZERO return resulting ((1)/(5))
ACSD polished unide is (5)
DCS start ((5)/(5))
DCS crossing out (5)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (y)
ACSD 0 not addex (((5)*(x))=(((10)+((5)*(y)))/(5)))
into val 1
nouth.les.AddCruncherSingleDenominator@e9e54c2 has brought me a new dirty child : (((5)*(x))=(((10)+((5)*(y)))/(5)))
State polishing child : (((5)*(x))=(((10)+((5)*(y)))/(5)))
nouth.les.AlteratorDiv@2f2c9b19 is messing around now.
It's altEx is (5)
on child (((5)*(x))=(((10)/(5))+(y)))
AD polishing ((((5)*(x))/(5))=((((10)/(5))+(y))/(5)))
AD polished into ((((5)*(x))/(5))=((((10)/(5))+(y))/(5)))
DCS start (((5)*(x))/(5))
DCS crossing out (5)
DCS after crossout before single plain :((1)*(x)) / ((1))
DCS single plain :((1)*(x)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting (((1)*(x))/(1))
DCS start ((10)/(5))
DCS after crossout before single plain :((10)) / ((5))
DCS single plain :((10)) / ((5))
DCS computing gcd from 10 and 5 = 5
DCS resulting ((2)/(1))
DCS start ((((2)/(1))+(y))/(5))
DCS after crossout before single plain :((((2)/(1))+(y))) / ((5))
DCS single plain :((((2)/(1))+(y))) / ((5))
DCS computing gcd from 1 and 5 = 1
DCS ZERO return resulting ((((2)/(1))+(y))/(5))
into val 1
nouth.les.AlteratorDiv@2f2c9b19 has brought me a new dirty child : ((((1)*(x))/(1))=((((2)/(1))+(y))/(5)))
State polishing child : ((((1)*(x))/(1))=((((2)/(1))+(y))/(5)))
nouth.les.AlteratorAdd@31befd9f is messing around now.
It's altEx is (((-1)*(y)))
on child (((5)*(x))=(((10)/(5))+(y)))
ACE rwif ((y))
ACE rwif ((x))
ACE rwif ((y))
comparing((y)) to ((x))
ACE rwif ((y))
ACE rwif ((5))
ACE rwif ((y))
comparing((y)) to ((5))
ACE rwif ((y))
ACE rwif ((y))
comparing((y)) to ((y))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@31befd9f has brought me a new dirty child : ((((-1)*(y))+((5)*(x)))=((((10))/(5))+((0)*(y))))
State polishing child : ((((-1)*(y))+((5)*(x)))=((((10))/(5))+((0)*(y))))
nouth.les.AlteratorAdd@1c20c684 is messing around now.
It's altEx is ((((-1)*(10))/(5)))
on child (((5)*(x))=(((10)/(5))+(y)))
ACE rwif ((5))
ACE rwif ((x))
ACE rwif ((5))
comparing((5)) to ((x))
ACE rwif ((5))
ACE rwif ((5))
ACE rwif ((5))
comparing((5)) to ((5))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((y))
ACE rwif ((5))
comparing((5)) to ((y))
into val 1
nouth.les.AlteratorAdd@1c20c684 has brought me a new dirty child : (((((-10))/(5))+((5)*(x)))=(((0)/(5))+((1)*(y))))
State polishing child : (((((-10))/(5))+((5)*(x)))=(((0)/(5))+((1)*(y))))
It just propagated.
Result found in children !
it's ((x)=(((2)+(y))/(5)))
cleaned up : ((x)=(((2)+(y))/(5)))
outputer found ((x)=(((2)+(y))/(5)))
