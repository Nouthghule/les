2x^2 + 3x -\frac{7}{4} = x^2
2x^2 + 3x -\frac{7}{4} = x^2
2x^2 + 3x -(7)/(4) = x^2
2x^2 + 3x -(7)/(4) = x^2
tparser ( 2 * x ^ 2 + 3 * x - ( 7 ) / ( 4 ) = x ^ 2 )
tparser ( 2 * x ^ 2 + 3 * x - ( 7 ) / ( 4 ) = x ^ 2 )
ready S : ( 2 * x ^ 2 + 3 * x - ( 7 ) / ( 4 ) = x ^ 2 ) 
operators push (
members push 2
operators push *
new op * vs last op (
members push x
operators push ^
new op ^ vs last op *
members push 2
operators push +
new op + vs last op ^
operators pop +
operators pop ^
operators undo pop before the last pop.
new op + vs last op *
operators pop +
operators pop *
operators undo pop before the last pop.
new op + vs last op (
members push 3
operators push *
new op * vs last op +
members push x
operators push -
new op - vs last op *
operators pop -
operators pop *
operators undo pop before the last pop.
new op - vs last op +
operators pop -
operators pop +
operators undo pop before the last pop.
new op - vs last op (
operators push (
new op ( vs last op -
operators pop (
operators pop -
operators return back :  - (
members push 7
operators push )
operators pop : )
operators pop : (
operators push /
new op / vs last op -
operators push (
new op ( vs last op /
operators pop (
operators pop /
operators return back :  / (
members push 4
operators push )
operators pop : )
operators pop : (
operators push =
new op = vs last op /
operators pop =
operators pop /
operators undo pop before the last pop.
new op = vs last op -
operators pop =
operators pop -
operators undo pop before the last pop.
new op = vs last op (
operators pop =
operators pop (
operators return back :  ( =
members push x
operators push ^
new op ^ vs last op =
members push 2
operators push )
operators pop : )
operators pop into execute
operators pop into execute
operators pop : (
2 x 2 ^ * 3 x * + 7 4 / - x 2 ^ =
 2 ((x)^(2)) * 3 x * + 7 4 / - x 2 ^ = 
 ((2)*(((x)^(2)))) 3 x * + 7 4 / - x 2 ^ = 
 ((2)*(((x)^(2)))) ((3)*(x)) + 7 4 / - x 2 ^ = 
 ((((2)*(((x)^(2)))))+(((3)*(x)))) 7 4 / - x 2 ^ = 
 ((((2)*(((x)^(2)))))+(((3)*(x)))) ((7)/(4)) - x 2 ^ = 
 ((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))) x 2 ^ = 
 ((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))) ((x)^(2)) = 
 ((((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))))=(((x)^(2)))) 
Parsing ex from  ((((((((2)*(((x)^(2)))))+(((3)*(x)))))-(((7)/(4)))))=(((x)^(2)))) 
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP:default *
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default ^
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 3
TP: end of ex of 3
TP:default *
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 7
TP: end of ex of 7
TP:default /
TP:Start of new ex.
TP:default 4
TP: end of ex of 4
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default =
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default ^
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
Negating ((()/()))
DE replaceself numeric 2
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of * and val of ((2)*((x)^(2)))
DE Blank value with rs of * and val of ((2)*((x)^(2)))
DE Blank value with rs of $ and val of (((2)*((x)^(2))))
DE replacing self with only child! : ((2)*((x)^(2)))
DE Blank value with rs of $ and val of (((2)*((x)^(2))))
DE replacing self with only child! : ((2)*((x)^(2)))
DE replaceself numeric 3
DE replaceself x
DE Blank value with rs of * and val of ((3)*(x))
DE Blank value with rs of * and val of ((3)*(x))
DE Blank value with rs of $ and val of (((3)*(x)))
DE replacing self with only child! : ((3)*(x))
DE Blank value with rs of $ and val of (((3)*(x)))
DE replacing self with only child! : ((3)*(x))
DE Blank value with rs of + and val of (((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of + and val of (((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of $ and val of ((((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of $ and val of ((((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((2)*((x)^(2)))+((3)*(x)))
DE replaceself numeric 7
DE replaceself numeric 4
DE Blank value with rs of / and val of ((7)/(4))
DE Blank value with rs of / and val of ((7)/(4))
DE Blank value with rs of $ and val of (((7)/(4)))
DE replacing self with only child! : ((7)/(4))
DE Blank value with rs of $ and val of (((7)/(4)))
DE replacing self with only child! : ((7)/(4))
DE Blank value with rs of + and val of ((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4))))
DE Blank value with rs of + and val of ((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4))))
DE Blank value with rs of $ and val of (((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4)))))
DE replacing self with only child! : ((((2)*((x)^(2)))+((3)*(x)))+((-1)*((7)/(4))))
DE Blank value with rs of $ and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))
DE Blank value with rs of $ and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
DE replacing self with only child! : (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of = and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DE Blank value with rs of = and val of ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DE Blank value with rs of $ and val of (((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))))
DE replacing self with only child! : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DE Blank value with rs of $ and val of (((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))))
DE replacing self with only child! : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
TextParser returning : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
Parsed ex as : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
#hf 30000
#hf 30018
#hf 30018
startingstate hfval is 30018
=====================================STATE 1 , generation 0
CurrState is ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
It's hf is 30018
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.DefOperator@4d7e1886
I'm ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))) and I'm about to propagate.
EqEx : (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@7adf9f5f
adding it.
nouth.les.AlteratorAdd@85ede7b
adding it.
EqEx : ((x)^(2)) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@5674cd4d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@5674cd4d has brought me a new dirty child : ((((-1)*(((7)^(1))/((4)^(1))))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.DivCruncherEmergeDivs@63961c42 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherPlain@6b884d57 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherExpand@38af3868 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5b2133b1 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist ((x)^(2))
mcd worklist (3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@5b2133b1 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherNumerator@33c7353a is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 1
nouth.les.MultiCruncherNumerator@33c7353a has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPowerise@681a9515 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@681a9515 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.PowerCruncherConsolide@19469ea2 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRaise@13221655 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRoot@31befd9f is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitDen@1c20c684 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitNum@1fb3ebeb is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherPlain@548c4f57 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherExpand@1218025c is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@816f27d is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist ((x)^(2))
mcd worklist (3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@816f27d has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherNumerator@87aac27 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 1
nouth.les.MultiCruncherNumerator@87aac27 has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPowerise@6ce253f1 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@6ce253f1 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPlain@53d8d10a is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.MultiCruncherExpand@e9e54c2 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@65ab7765 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (2)
mcd worklist ((x)^(2))
mcd worklist (3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@65ab7765 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherNumerator@1b28cdfa is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 1
nouth.les.MultiCruncherNumerator@1b28cdfa has brought me a new dirty child : ((((1)*(((-1)*(7))/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : (((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.MultiCruncherPowerise@eed1f14 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
MCP adding (3)
MCP adding (x)
MCP res ((3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@eed1f14 has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
nouth.les.AddCruncherEqual@7229724f is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACE rwif (((7)/(4)))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@4c873330 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((2)*((x)^(2)))
ACSD 0 not addex (3)
ACSD 0 not addex (x)
ACSD 0 not addex ((3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))))
ACSD 0 deno is 1 of (((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherConsolide@119d7047 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRaise@776ec8df is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherProcessRoot@4eec7777 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitDen@3b07d329 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.PowerCruncherSplitNum@41629346 is messing around now.
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
into val 0
nouth.les.AlteratorAdd@7adf9f5f is messing around now.
It's altEx is (((-1)*(2)*((x)^(2)))+((-1)*(3)*(x)))
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACE rwif (((7)/(4)))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7adf9f5f has brought me a new dirty child : ((((-1)*((7)/(4)))+((0)*((x)^(2)))+((0)*(x)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.AlteratorAdd@85ede7b is messing around now.
It's altEx is (((-1)*(-1)*((7)/(4))))
on child ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2)))
ACE rwif (((7)/(4)))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif ((4))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((4))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((4))
ACE rwif ((x))
comparing((x)) to ((4))
ACE rwif ((4))
ACE rwif (((x)^(2)))
ACE rwif ((4))
comparing((4)) to (((x)^(2)))
into val 1
nouth.les.AlteratorAdd@85ede7b has brought me a new dirty child : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+(((7))/(4)))=((((7))/(4))+((1)*((x)^(2)))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2))))
It just propagated.
#hf 30000
#hf 30018
#hf 31018
#hf 30000
#hf 30015
#hf 31015
#hf 30000
#hf 30025
#hf 31025
New unique children : <(((((-1)*(7))/(4))+((2)*((x)^(2)))+((3)*(x)))=((x)^(2))) ; (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x)))) ; ((((-1)*((7)/(4)))+((2)*((x)^(2)))+((3)*(x))+((7)/(4)))=(((7)/(4))+((x)^(2)))) ; >
Children hfs : <31018 ; 31015 ; 31025 ; >
Children ops : <nouth.les.MultiCruncherNumerator@33c7353anouth.les.AlteratorAdd@7adf9f5fnouth.les.AlteratorAdd@85ede7b>
=====================================STATE 2 , generation 1
CurrState is (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
It's hf is 31015
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.AlteratorAdd@7adf9f5f
I'm (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x)))) and I'm about to propagate.
EqEx : ((-1)*((7)/(4))) is suggesting alterators now.
MultiEx suggestAlts : ((-1)*((7)/(4))) suggesting now.
EqEx : (((-1)*((x)^(2)))+((-3)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@404b9385
adding it.
nouth.les.DivCruncherSimplifyNew@6d311334 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@6d311334 has brought me a new dirty child : (((-1)*(((7)^(1))/((4)^(1))))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.DivCruncherEmergeDivs@682a0b20 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPlain@3d075dc0 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@214c265e is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@448139f0 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd worklist ((x)^(2))
mcd worklist (-3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@448139f0 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherNumerator@7cca494b is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@7cca494b has brought me a new dirty child : (((1)*(((-1)*(7))/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPowerise@7ba4f24f is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (-1)
MCP adding ((x)^(2))
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@7ba4f24f has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.PowerCruncherConsolide@3b9a45b3 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.PowerCruncherProcessRaise@7699a589 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.PowerCruncherProcessRoot@58372a00 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.PowerCruncherSplitDen@4dd8dc3 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.PowerCruncherSplitNum@6d03e736 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherPlain@568db2f2 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@378bf509 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5fd0d5ae is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd worklist ((x)^(2))
mcd worklist (-3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@5fd0d5ae has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherNumerator@2d98a335 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@2d98a335 has brought me a new dirty child : (((1)*(((-1)*(7))/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPowerise@16b98e56 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (-1)
MCP adding ((x)^(2))
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@16b98e56 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPlain@7ef20235 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.MultiCruncherExpand@27d6c5e0 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@4f3f5b24 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd worklist ((x)^(2))
mcd worklist (-3)
mcd worklist (x)
into val 1
nouth.les.MultiCruncherDivs@4f3f5b24 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherNumerator@15aeb7ab is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 1
nouth.les.MultiCruncherNumerator@15aeb7ab has brought me a new dirty child : (((1)*(((-1)*(7))/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : ((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.MultiCruncherPowerise@7b23ec81 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
MCP adding (-1)
MCP adding ((x)^(2))
MCP res ((-1)*((x)^(2)))
MCP adding (-3)
MCP adding (x)
MCP res ((-3)*(x))
into val 3
nouth.les.MultiCruncherPowerise@7b23ec81 has brought me a new dirty child : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
I've polished the child and now it looks like this : (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
nouth.les.AddCruncherEqual@6acbcfc0 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
ACE rwif (((x)^(2)))
ACE rwif ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
into val 0
nouth.les.AddCruncherSingleDenominator@5f184fc6 is messing around now.
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD 0 not addex (-1)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((-1)*((x)^(2)))
ACSD 0 not addex (-3)
ACSD 0 not addex (x)
ACSD 0 not addex ((-3)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((x)^(2)))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((x)^(2)))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((x)^(2)))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((x)^(2)))+((-3)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((x)^(2)))+((-3)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((x)^(2)))+((-3)*(x))))
ACSD 0 deno is 1 of (((-1)*((x)^(2)))+((-3)*(x)))
ACSD 0 not addex (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
into val 0
nouth.les.AlteratorAdd@404b9385 is messing around now.
It's altEx is (((-1)*(-1)*((x)^(2)))+((-1)*(-3)*(x)))
on child (((-1)*((7)/(4)))=(((-1)*((x)^(2)))+((-3)*(x))))
ACE rwif (((7)/(4)))
ACE rwif ((x))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to ((x))
ACE rwif (((x)^(2)))
ACE rwif (((7)/(4)))
comparing(((7)/(4))) to (((x)^(2)))
ACE rwif ((x))
comparing((x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif ((x))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ((x))
ACE rwif ((x))
comparing((x)) to ((x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@404b9385 has brought me a new dirty child : ((((-1)*((7)/(4)))+((3)*(x))+((1)*((x)^(2))))=(((0)*((x)^(2)))+((0)*(x))))
I've polished the child and now it looks like this : ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
It just propagated.
#hf 30000
#hf 30015
#hf 32015
New unique children : <((((-1)*(7))/(4))=(((-1)*((x)^(2)))+((-3)*(x)))) ; ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0)) ; >
Children hfs : <32015 ; 0 ; >
Children ops : <nouth.les.MultiCruncherNumerator@7cca494bnouth.les.AlteratorAdd@404b9385>
=====================================STATE 3 , generation 2
CurrState is ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
It's hf is 0
It's parent's operator is : nouth.les.AlteratorAdd@7adf9f5f
It's operator is : nouth.les.AlteratorAdd@404b9385
Result found !
Solutionmaker rank = 2
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
solveQuadratic ready for abc
I'm ((0)+(1)) and I'm about to propagate.
nouth.les.AddCruncherEqual@6f496d9f is messing around now.
on child ((0)+(1))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@6f496d9f has brought me a new dirty child : (((1)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
I've polished the child and now it looks like this : ((1))
nouth.les.AddCruncherSingleDenominator@723279cf is messing around now.
on child ((0)+(1))
ACSD 0 not addex (0)
ACSD 0 not addex (1)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((0)+(1))
into val 0
I'm ((1)) and I'm about to propagate.
nouth.les.AddCruncherEqual@10f87f48 is messing around now.
on child ((1))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@b4c966a is messing around now.
on child ((1))
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
into val 0
I'm ((0)+((1)*(3))) and I'm about to propagate.
nouth.les.MultiCruncherPlain@2f4d3709 is messing around now.
on child ((0)+((1)*(3)))
into val 1
nouth.les.MultiCruncherPlain@2f4d3709 has brought me a new dirty child : ((0)+((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
I've polished the child and now it looks like this : ((3))
nouth.les.MultiCruncherExpand@4e50df2e is messing around now.
on child ((0)+((1)*(3)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1d81eb93 is messing around now.
on child ((0)+((1)*(3)))
mcd worklist (1)
mcd worklist (3)
into val 0
nouth.les.MultiCruncherNumerator@7291c18f is messing around now.
on child ((0)+((1)*(3)))
into val 0
nouth.les.MultiCruncherPowerise@34a245ab is messing around now.
on child ((0)+((1)*(3)))
MCP adding (1)
MCP adding (3)
MCP res ((1)*(3))
into val 1
nouth.les.MultiCruncherPowerise@34a245ab has brought me a new dirty child : ((0)+((1)*(3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
I've polished the child and now it looks like this : ((3))
nouth.les.AddCruncherEqual@7cc355be is messing around now.
on child ((0)+((1)*(3)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@7cc355be has brought me a new dirty child : (((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
I've polished the child and now it looks like this : ((3))
nouth.les.AddCruncherSingleDenominator@6e8cf4c6 is messing around now.
on child ((0)+((1)*(3)))
ACSD 0 not addex (0)
ACSD 0 not addex (1)
ACSD 0 not addex (3)
ACSD 0 not addex ((1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((0)+((1)*(3)))
into val 0
I'm ((3)) and I'm about to propagate.
nouth.les.AddCruncherEqual@12edcd21 is messing around now.
on child ((3))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@34c45dca is messing around now.
on child ((3))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
into val 0
I'm ((3)) and I'm about to propagate.
nouth.les.AddCruncherEqual@52cc8049 is messing around now.
on child ((3))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@5b6f7412 is messing around now.
on child ((3))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
into val 0
I'm ((3)) and I'm about to propagate.
nouth.les.AddCruncherEqual@27973e9b is messing around now.
on child ((3))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@312b1dae is messing around now.
on child ((3))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
into val 0
I'm ((0)+((-1)*((7)/(4)))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@7530d0a is messing around now.
on child ((0)+((-1)*((7)/(4))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@7530d0a has brought me a new dirty child : ((0)+((-1)*(((7)^(1))/((4)^(1)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.DivCruncherEmergeDivs@27bc2616 is messing around now.
on child ((0)+((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherPlain@3941a79c is messing around now.
on child ((0)+((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherExpand@506e1b77 is messing around now.
on child ((0)+((-1)*((7)/(4))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@4fca772d is messing around now.
on child ((0)+((-1)*((7)/(4))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@4fca772d has brought me a new dirty child : ((0)+((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.MultiCruncherNumerator@9807454 is messing around now.
on child ((0)+((-1)*((7)/(4))))
into val 1
nouth.les.MultiCruncherNumerator@9807454 has brought me a new dirty child : ((0)+((1)*(((-1)*(7))/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.MultiCruncherPowerise@3d494fbf is messing around now.
on child ((0)+((-1)*((7)/(4))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@3d494fbf has brought me a new dirty child : ((0)+((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.AddCruncherEqual@1ddc4ec2 is messing around now.
on child ((0)+((-1)*((7)/(4))))
ACE rwif ()
ACE rwif (((7)/(4)))
ACE rwif ()
comparing() to (((7)/(4)))
into val 0
nouth.les.AddCruncherSingleDenominator@133314b is messing around now.
on child ((0)+((-1)*((7)/(4))))
ACSD 0 not addex (0)
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
ACSD 0 deno is 1 of ((0)+((-1)*((7)/(4))))
into val 0
I'm (((-1)*((7)/(4)))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@b1bc7ed is messing around now.
on child (((-1)*((7)/(4))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@b1bc7ed has brought me a new dirty child : (((-1)*(((7)^(1))/((4)^(1)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.DivCruncherEmergeDivs@7cd84586 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherPlain@30dae81 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherExpand@1b2c6ec2 is messing around now.
on child (((-1)*((7)/(4))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@4edde6e5 is messing around now.
on child (((-1)*((7)/(4))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@4edde6e5 has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.MultiCruncherNumerator@70177ecd is messing around now.
on child (((-1)*((7)/(4))))
into val 1
nouth.les.MultiCruncherNumerator@70177ecd has brought me a new dirty child : (((1)*(((-1)*(7))/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.MultiCruncherPowerise@1e80bfe8 is messing around now.
on child (((-1)*((7)/(4))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@1e80bfe8 has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.AddCruncherEqual@66a29884 is messing around now.
on child (((-1)*((7)/(4))))
ACE rwif (((7)/(4)))
into val 0
nouth.les.AddCruncherSingleDenominator@4769b07b is messing around now.
on child (((-1)*((7)/(4))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
ACSD 0 deno is 1 of (((-1)*((7)/(4))))
into val 0
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : ((((-1)*(7))/(4)))
Comsearcher checkagainst : (((-1)*((7)/(4))))
I'm (((-1)*((7)/(4)))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@cc34f4d is messing around now.
on child (((-1)*((7)/(4))))
DCSN in : ((7)/(4))
DCSN dealt : ((7)/(4))
DCSN listadd((7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@cc34f4d has brought me a new dirty child : (((-1)*(((7)^(1))/((4)^(1)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.DivCruncherEmergeDivs@17a7cec2 is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherPlain@65b3120a is messing around now.
on child (((-1)*((7)/(4))))
into val 0
nouth.les.MultiCruncherExpand@6f539caf is messing around now.
on child (((-1)*((7)/(4))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@79fc0f2f is messing around now.
on child (((-1)*((7)/(4))))
mcd e = ((7)/(4))
mcd worklist (-1)
mcd ((-1)*((7)/(4)))
mcd worklist (-1)
mcd ((-1))
mcd ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@79fc0f2f has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.MultiCruncherNumerator@50040f0c is messing around now.
on child (((-1)*((7)/(4))))
into val 1
nouth.les.MultiCruncherNumerator@50040f0c has brought me a new dirty child : (((1)*(((-1)*(7))/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.MultiCruncherPowerise@2dda6444 is messing around now.
on child (((-1)*((7)/(4))))
MCP adding (-1)
MCP adding ((7)/(4))
MCP res ((-1)*((7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@2dda6444 has brought me a new dirty child : (((-1)*((7)/(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4))))
I've polished the child and now it looks like this : (((-1)*((7)/(4))))
nouth.les.AddCruncherEqual@5e9f23b4 is messing around now.
on child (((-1)*((7)/(4))))
ACE rwif (((7)/(4)))
into val 0
nouth.les.AddCruncherSingleDenominator@4783da3f is messing around now.
on child (((-1)*((7)/(4))))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (4)
ACSD 0 not addex ((7)/(4))
ACSD 0 not addex ((-1)*((7)/(4)))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*((7)/(4)))/(1))
ACSD 0 deno is 1 of (((-1)*((7)/(4))))
into val 0
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : (((-1)*((7)/(4))))
Comsearcher checkagainst : ((((-1)*(7))/(4)))
Comsearcher checkagainst : (((-1)*((7)/(4))))
I'm ((((-1)*(7))/(4))) and I'm about to propagate.
nouth.les.MultiCruncherPlain@378fd1ac is messing around now.
on child ((((-1)*(7))/(4)))
into val 1
nouth.les.MultiCruncherPlain@378fd1ac has brought me a new dirty child : ((((-7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.MultiCruncherExpand@49097b5d is messing around now.
on child ((((-1)*(7))/(4)))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6e2c634b is messing around now.
on child ((((-1)*(7))/(4)))
mcd worklist (-1)
mcd worklist (7)
into val 0
nouth.les.MultiCruncherNumerator@37a71e93 is messing around now.
on child ((((-1)*(7))/(4)))
into val 0
nouth.les.MultiCruncherPowerise@7e6cbb7a is messing around now.
on child ((((-1)*(7))/(4)))
MCP adding (-1)
MCP adding (7)
MCP res ((-1)*(7))
into val 1
nouth.les.MultiCruncherPowerise@7e6cbb7a has brought me a new dirty child : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
nouth.les.DivCruncherSimplifyNew@7c3df479 is messing around now.
on child ((((-1)*(7))/(4)))
DCSN in : (((-1)*(7))/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@7c3df479 has brought me a new dirty child : ((((-7)^(1))/((4)^(1))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.DivCruncherEmergeDivs@7106e68e is messing around now.
on child ((((-1)*(7))/(4)))
into val 0
nouth.les.AddCruncherEqual@7eda2dbb is messing around now.
on child ((((-1)*(7))/(4)))
ACE rwif ((4))
into val 0
nouth.les.AddCruncherSingleDenominator@6576fe71 is messing around now.
on child ((((-1)*(7))/(4)))
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex ((-1)*(7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-1)*(7))/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
into val 1
nouth.les.AddCruncherSingleDenominator@6576fe71 has brought me a new dirty child : ((((-1)*(7))/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*(7))/(4)))
I've polished the child and now it looks like this : ((((-1)*(7))/(4)))
I'm (((-7)/(4))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@76fb509a is messing around now.
on child (((-7)/(4)))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@76fb509a has brought me a new dirty child : ((((-7)^(1))/((4)^(1))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.DivCruncherEmergeDivs@300ffa5d is messing around now.
on child (((-7)/(4)))
into val 0
nouth.les.AddCruncherEqual@1f17ae12 is messing around now.
on child (((-7)/(4)))
ACE rwif ((4))
into val 0
nouth.les.AddCruncherSingleDenominator@4d405ef7 is messing around now.
on child (((-7)/(4)))
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
into val 1
nouth.les.AddCruncherSingleDenominator@4d405ef7 has brought me a new dirty child : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
I'm (((-7)/(4))) and I'm about to propagate.
nouth.les.DivCruncherSimplifyNew@6193b845 is messing around now.
on child (((-7)/(4)))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@6193b845 has brought me a new dirty child : ((((-7)^(1))/((4)^(1))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
nouth.les.DivCruncherEmergeDivs@2e817b38 is messing around now.
on child (((-7)/(4)))
into val 0
nouth.les.AddCruncherEqual@c4437c4 is messing around now.
on child (((-7)/(4)))
ACE rwif ((4))
into val 0
nouth.les.AddCruncherSingleDenominator@433c675d is messing around now.
on child (((-7)/(4)))
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
into val 1
nouth.les.AddCruncherSingleDenominator@433c675d has brought me a new dirty child : (((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-7)/(4)))
I've polished the child and now it looks like this : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
Comsearcher checkagainst : (((-7)/(4)))
solveQuadratic abc : ((0)+(1))_((0)+((1)*(3)))_((0)+((-1)*((7)/(4))))
solveQuadratic abc : ((1))_((3))_(((-7)/(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((3))^(2))+((-4)*(((-7)/(4)))*((1))))
sq before looú
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1)*((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (2)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((3))^(2))+((-4)*(((-7)/(4)))*((1))))
SolveQuadratic adding \\\frac{\\\sqrt{3^2-4\\\cdot (\\\frac{-7}{4})\\\cdot (1)}-3)}{2\\\cdot (1)}
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1)*((3)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (2)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((3))^(2))+((-4)*(((-7)/(4)))*((1))))
SolveQuadratic adding \\\frac{-\\\sqrt{3^2-4\\\cdot (\\\frac{-7}{4})\\\cdot (1)}-3)}{2\\\cdot (1)}
I'm ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x)) and I'm about to propagate.
EqEx : (((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1)))) is suggesting alterators now.
nouth.les.AlteratorMulti@37bba400
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@179d3b25 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@254989ff is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@254989ff has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@5d099f62 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@37f8bb67 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@49c2faae is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@20ad9418 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@31cefde0 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@439f5b3d is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN listadd(((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@439f5b3d has brought me a new dirty child : (((((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1d56ce6a is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.AddCruncherEqual@5197848c is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@17f052a3 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@17f052a3 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@2e0fa5d3 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@5010be6 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5010be6 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@685f4c2e is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@7daf6ecc is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@7daf6ecc has brought me a new dirty child : ((((((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@2e5d6d97 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@238e0d81 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@31221be2 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 3
nouth.les.MultiCruncherPowerise@31221be2 has brought me a new dirty child : ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@377dca04 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@728938a9 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@728938a9 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@21b8d17c is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN listadd(((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@21b8d17c has brought me a new dirty child : (((((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6433a2 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherConsolide@5910e440 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@6267c3bb is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@533ddba is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@246b179d is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@7a07c5b4 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.AddCruncherEqual@26a1ab54 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@3d646c37 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@3d646c37 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@41cf53f9 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@5a10411 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@5a10411 has brought me a new dirty child : ((((((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@2ef1e4fa is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@306a30c7 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@b81eda8 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 3
nouth.les.MultiCruncherPowerise@b81eda8 has brought me a new dirty child : ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@68de145 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@27fa135a is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@27fa135a has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@46f7f36a is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@421faab1 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of ((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex (((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@421faab1 has brought me a new dirty child : ((((((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@2b71fc7e is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@5ce65a89 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@5ce65a89 has brought me a new dirty child : ((((((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@25f38edc is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@1a86f2f1 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@3eb07fd3 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 3
nouth.les.MultiCruncherPowerise@3eb07fd3 has brought me a new dirty child : ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@506c589e is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : (((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))/((2)*((1))))
DCSN listadd(((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@506c589e has brought me a new dirty child : (((((((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@69d0a921 is messing around now.
on child ((((((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
I'm (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x)) and I'm about to propagate.
EqEx : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@446cdf90
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@799f7e29 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN dealt : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN listadd((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@799f7e29 has brought me a new dirty child : ((((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4b85612c is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@277050dc is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@277050dc has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherExpand@5c29bfd is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7aec35a is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@7aec35a has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@67424e82 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@67424e82 has brought me a new dirty child : (((((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@42110406 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 2
nouth.les.MultiCruncherPowerise@42110406 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@531d72ca is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@22d8cfe0 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@22d8cfe0 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+(9))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((9)+((-4)*((-7)/(4))))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@579bb367 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@1de0aca6 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@255316f2 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@41906a77 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@4b9af9a9 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of (((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5387f9e0 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN dealt : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN listadd((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@5387f9e0 has brought me a new dirty child : ((((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6e5e91e4 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@2cdf8d8a is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@30946e09 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@30946e09 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+(9))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((9)+((-4)*((-7)/(4))))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@5cb0d902 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@46fbb2c1 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@1698c449 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@5ef04b5 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@5ef04b5 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherExpand@5f4da5c3 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@443b7951 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@443b7951 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@14514713 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@14514713 has brought me a new dirty child : (((((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : ((((((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@69663380 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 2
nouth.les.MultiCruncherPowerise@69663380 has brought me a new dirty child : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@5b37e0d2 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@4459eb14 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3))))
ACSD 0 deno is 1 of (((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5a2e4553 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN dealt : ((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))/(2))
DCSN listadd((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@5a2e4553 has brought me a new dirty child : ((((((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@28c97a5 is messing around now.
on child (((((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))+((-1)*(3)))/(2))=(x))
into val 0
I'm ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@6659c656
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@6d5380c2 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@6d5380c2 has brought me a new dirty child : (((((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@45ff54e6 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@2328c243 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@bebdb06 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7a4f0f29 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@7a4f0f29 has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherNumerator@45283ce2 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@45283ce2 has brought me a new dirty child : ((((-3)+((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherPowerise@2077d4de is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@2077d4de has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherConsolide@7591083d is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@77a567e1 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@77a567e1 has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+(9))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@736e9adb is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@6d21714c is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@108c4c35 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@4ccabbaa is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@4bf558aa is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@2d38eb89 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@2d38eb89 has brought me a new dirty child : (((((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5fa7e7ff is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@4629104a is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@27f8302d is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@27f8302d has brought me a new dirty child : ((((-3)+((((-4)*((-7)/(4)))+(9))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@4d76f3f8 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@2d8e6db6 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@23ab930d is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@4534b60d is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3fa77460 is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@619a5dff is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@619a5dff has brought me a new dirty child : (((((-3)+((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1ed6993a is messing around now.
on child ((((-3)+((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@7e32c033
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@7ab2bfe1 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7ab2bfe1 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@497470ed is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@63c12fb0 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@b1a58a3 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6438a396 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@6438a396 has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherNumerator@e2144e4 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@e2144e4 has brought me a new dirty child : ((((-3)+(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherPowerise@6477463f is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@6477463f has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherEqual@3d71d552 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@1cf4f579 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@18769467 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@18769467 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@46ee7fe8 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@7506e922 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@4ee285c6 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@621be5d1 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@573fd745 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@15327b79 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@4f2410ac is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@722c41f4 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5b80350b is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@5b80350b has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5d6f64b1 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher is new : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I'm ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@32a1bec0
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@22927a81 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@22927a81 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@78e03bb5 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@5e8c92f4 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@61e4705b is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@50134894 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherDivs@50134894 has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherNumerator@2957fcb0 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@2957fcb0 has brought me a new dirty child : ((((-3)+(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherPowerise@1376c05c is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
into val 1
nouth.les.MultiCruncherPowerise@1376c05c has brought me a new dirty child : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherEqual@51521cc1 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@1b4fb997 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@deb6432 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@deb6432 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@28ba21f3 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@694f9431 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@f2a0b8e is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@593634ad is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@20fa23c1 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@3581c5f3 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@6aa8ceb6 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@2530c12 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@73c6c3b2 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@73c6c3b2 has brought me a new dirty child : (((((-3)+(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@48533e64 is messing around now.
on child ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+(((9)+((-4)*((-7)/(4))))^((1)/(2))))/(2))=(x))
I'm ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@64a294a6
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@7e0b37bc is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@7e0b37bc has brought me a new dirty child : ((((-3)+(((9)+(((28))/(4)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+((28)/(4)))^((1)/(2))))/(2))=(x))
nouth.les.MultiCruncherExpand@3b95a09c is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6ae40994 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
mcd worklist (-4)
mcd worklist (-7)
into val 0
nouth.les.MultiCruncherNumerator@1a93a7ca is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@3d82c5f3 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
MCP adding (-4)
MCP adding (-7)
MCP res ((-4)*(-7))
into val 1
nouth.les.MultiCruncherPowerise@3d82c5f3 has brought me a new dirty child : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@2b05039f is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@2b05039f has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@61e717c2 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@66cd51c3 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@4dcbadb4 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@4dcbadb4 has brought me a new dirty child : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@4e515669 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@4e515669 has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@17d10166 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@1b9e1916 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@ba8a1dc is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@4f8e5cde is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@504bae78 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@3b764bce is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@759ebb3d is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@484b61fc is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@484b61fc has brought me a new dirty child : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@45fe3ee3 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((9)+(7))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@45fe3ee3 has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4cdf35a9 is messing around now.
on child ((((-3)+(((9)+(((-4)*(-7))/(4)))^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(((7)+(9))^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@4c98385c
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@5fcfe4b2 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@5fcfe4b2 has brought me a new dirty child : (((((-3))+((1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@6bf2d08e is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((7)+(9))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((7)+(9))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@5eb5c224 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@5eb5c224 has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@53e25b76 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@73a8dfcc is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@ea30797 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@7e774085 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@3f8f9dd6 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@aec6354 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@1c655221 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@1c655221 has brought me a new dirty child : (((((-3))+((1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@58d25a40 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(((7)+(9))^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+(((7)+(9))^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(((7)+(9))^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@1b701da1 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@1b701da1 has brought me a new dirty child : (((((-3)+(((7)+(9))^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@726f3b58 is messing around now.
on child ((((-3)+(((7)+(9))^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+((16)^((1)/(2))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((16)^((1)/(2))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@442d9b6e
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@ee7d9f1 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@ee7d9f1 has brought me a new dirty child : (((((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@15615099 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@1edf1c96 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@368102c8 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@6996db8 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
 s is 4.0
into val 1
nouth.les.PowerCruncherProcessRoot@6996db8 has brought me a new dirty child : ((((-3)+((4)^(1)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(4))/(2))=(x))
nouth.les.PowerCruncherSplitDen@1963006a is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@7fbe847c is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@41975e01 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
ACE rwif ()
ACE rwif (((16)^((1)/(2))))
ACE rwif ()
comparing() to (((16)^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@c2e1f26 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (16)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((16)^((1)/(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((16)^((1)/(2)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((16)^((1)/(2)))))
ACSD 0 deno is 1 of ((-3)+((16)^((1)/(2))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((16)^((1)/(2))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@dcf3e99 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN dealt : (((-3)+((16)^(((1)^(1))/((2)^(1)))))/(2))
DCSN listadd(((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@dcf3e99 has brought me a new dirty child : (((((-3)+((16)^(((1)^(1))/((2)^(1)))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((16)^((1)/(2))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6d9c638 is messing around now.
on child ((((-3)+((16)^((1)/(2))))/(2))=(x))
into val 0
I'm ((((-3)+(4))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+(4))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@7dc5e7b4
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@1ee0005 is messing around now.
on child ((((-3)+(4))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@1ee0005 has brought me a new dirty child : (((((1)))/(2))=(x))
I've polished the child and now it looks like this : (((1)/(2))=(x))
nouth.les.AddCruncherSingleDenominator@75a1cd57 is messing around now.
on child ((((-3)+(4))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (4)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+(4)))
ACSD 0 deno is 1 of ((-3)+(4))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+(4))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+(4))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@3d012ddd is messing around now.
on child ((((-3)+(4))/(2))=(x))
DCSN in : (((-3)+(4))/(2))
DCSN dealt : (((-3)+(4))/(2))
DCSN listadd(((-3)+(4))^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@3d012ddd has brought me a new dirty child : (((((-3)+(4))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+(4))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@6f2b958e is messing around now.
on child ((((-3)+(4))/(2))=(x))
into val 0
I'm (((1)/(2))=(x)) and I'm about to propagate.
EqEx : ((1)/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@1eb44e46
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@6504e3b2 is messing around now.
on child (((1)/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@6504e3b2 has brought me a new dirty child : ((((1)^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((1)/(2))=(x))
nouth.les.DivCruncherEmergeDivs@515f550a is messing around now.
on child (((1)/(2))=(x))
into val 0
Comsearcher checkagainst : (((1)/(2))=(x))
I'm (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x)) and I'm about to propagate.
EqEx : ((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1)))) is suggesting alterators now.
nouth.les.AlteratorMulti@626b2d4a
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@5e91993f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@1c4af82c is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@1c4af82c has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@379619aa is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@cac736f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@5e265ba4 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@156643d4 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@123a439b is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@7de26db8 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN listadd((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@7de26db8 has brought me a new dirty child : ((((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1175e2db is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.AddCruncherEqual@36aa7bc2 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@76ccd017 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@76ccd017 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@182decdb is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@26f0a63f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@26f0a63f has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@4361bd48 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@53bd815b is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@53bd815b has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@2401f4c3 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@7637f22 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@4926097b is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@4926097b has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@762efe5d is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@5d22bbb7 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5d22bbb7 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@41a4555e is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN listadd((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@41a4555e has brought me a new dirty child : ((((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@3830f1c0 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherConsolide@39ed3c8d is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@71dac704 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@123772c4 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@2d363fb3 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@7d6f77cc is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPlain@5aaa6d82 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@73a28541 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@73a28541 has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@6f75e721 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@69222c14 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@606d8acf is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@606d8acf has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@782830e is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@470e2030 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@470e2030 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@3fb4f649 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@33833882 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@33833882 has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@200a570f is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@16b3fc9e is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@e2d56bf is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@e2d56bf has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@244038d0 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@5680a178 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5680a178 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@5fdef03a is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
ACE rwif (((((3)))^(2)))
ACE rwif (((((-7))/(4)))*(((1))))
ACE rwif (((((3)))^(2)))
comparing(((((3)))^(2))) to (((((-7))/(4)))*(((1))))
ACE rwif ()
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
ACE rwif ((((3))))
ACE rwif (((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2))))
comparing(((((1)*((((3)))^(2)))+((-4)*((((-7))/(4)))*(((1)))))^((1)/(2)))) to ((((3))))
ACE rwif ()
into val 0
nouth.les.AddCruncherSingleDenominator@3b22cdd0 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex (2)
ACSD 0 not addex (((3))^(2))
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD polished unide is (4)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((-4)*((-7)/(4))*((1)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of ((((3))^(2))+((-4)*((-7)/(4))*((1))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
ACSD 0 deno is 1 of ((3))
ACSD 0 not addex ((-1)*((3)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1)/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((1))
ACSD 0 deno is 1 of ((1))
ACSD 0 not addex ((2)*((1)))
ACSD 0 not addex ((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@3b22cdd0 has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*((-7)/(4))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@1e81f4dc is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherExpand@4d591d15 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = (((-7)/(4)))
{{{w*r = (((-7)*(1))/(4))
{{{t = (((-7)*(1))/(4))
Templist : (((-7)*(1))/(4))
{{{current result = ((((-7)*(1))/(4)))
{{{(((-4)*(-7)*(1))/(4)) (multied by) (-4)
((((-4)*(-7))/(4))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((3))
{{{((-1)*(3)) (multied by) (-1)
(((-1)*(3))) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
{{{starting result = ((1))
{{{((1)*(2)) (multied by) (2)
((2)) is the result.
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 3
nouth.les.MultiCruncherExpand@4d591d15 has brought me a new dirty child : (((((-1)*(((((3))^(2))+(((-4)*(-7))/(4)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherDivs@65ae6ba4 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
mcd worklist (-4)
mcd worklist (((-7)/(4)))
mcd worklist ((1))
mcd worklist (-1)
mcd worklist (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
mcd worklist (-1)
mcd worklist ((3))
mcd worklist (2)
mcd worklist ((1))
into val 0
nouth.les.MultiCruncherNumerator@48cf768c is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
nouth.les.MultiCruncherPowerise@59f95c5d is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
MCP adding (-4)
MCP adding (((-7)/(4)))
MCP adding ((1))
MCP res ((-4)*(((-7)/(4)))*((1)))
MCP adding (-1)
MCP adding (((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2)))
MCP res ((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))
MCP adding (-1)
MCP adding ((3))
MCP res ((-1)*((3)))
MCP adding (2)
MCP adding ((1))
MCP res ((2)*((1)))
into val 4
nouth.les.MultiCruncherPowerise@59f95c5d has brought me a new dirty child : (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@5ccd43c2 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN dealt : ((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))/((2)*((1))))
DCSN listadd((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
MCP adding (2)
MCP res (((2)^(1)))
DCSN list is subexlist of (((2)^(1)))
into val 3
nouth.les.DivCruncherSimplifyNew@5ccd43c2 has brought me a new dirty child : ((((((-1)*(((((3))^(2))+((-4)*((((-7)^(1))/((4)^(1))))*((1))))^(((1)^(1))/((2)^(1)))))+((-1)*((3))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4aa8f0b4 is messing around now.
on child (((((-1)*(((((3))^(2))+((-4)*(((-7)/(4)))*((1))))^((1)/(2))))+((-1)*((3))))/((2)*((1))))=(x))
into val 0
I'm (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x)) and I'm about to propagate.
EqEx : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@7960847b
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@6a6824be is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN dealt : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN listadd((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@6a6824be has brought me a new dirty child : ((((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5c8da962 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@512ddf17 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@512ddf17 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@2c13da15 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@77556fd is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@77556fd has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@368239c8 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@368239c8 has brought me a new dirty child : (((((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@9e89d68 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 3
nouth.les.MultiCruncherPowerise@9e89d68 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherConsolide@3b192d32 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@16f65612 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@16f65612 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@311d617d is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@7c53a9eb is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@ed17bee is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@2a33fae0 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@707f7052 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@11028347 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN dealt : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN listadd((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@11028347 has brought me a new dirty child : ((((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@14899482 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@21588809 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@2aae9190 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@2aae9190 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@2f333739 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@77468bd9 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@12bb4df8 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@4cc77c2e is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@4cc77c2e has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@7a7b0070 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@39a054a5 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@39a054a5 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@71bc1ae4 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@71bc1ae4 has brought me a new dirty child : (((((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@6ed3ef1 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 3
nouth.les.MultiCruncherPowerise@6ed3ef1 has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPlain@2437c6dc is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@2437c6dc has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-3)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@1f89ab83 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@e73f9ac is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
mcd worklist (-1)
mcd worklist (3)
into val 1
nouth.les.MultiCruncherDivs@e73f9ac has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherNumerator@61064425 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@61064425 has brought me a new dirty child : (((((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.MultiCruncherPowerise@7b1d7fff is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
MCP adding (-1)
MCP adding (3)
MCP res ((-1)*(3))
into val 3
nouth.les.MultiCruncherPowerise@7b1d7fff has brought me a new dirty child : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.AddCruncherEqual@299a06ac is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
comparing(((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2)))) to ()
into val 0
nouth.les.AddCruncherSingleDenominator@383534aa is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
ACSD 0 not addex (-1)
ACSD 0 not addex (3)
ACSD 0 not addex ((-1)*(3))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3))))
ACSD 0 deno is 1 of (((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))
ACSD 0 not addex (2)
ACSD 0 not addex ((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@6bc168e5 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN dealt : ((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))/(2))
DCSN listadd((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@6bc168e5 has brought me a new dirty child : ((((((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1)))))+((-1)*(3)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@7b3300e5 is messing around now.
on child (((((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))+((-1)*(3)))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@2e5c649
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@136432db is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@136432db has brought me a new dirty child : (((((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@7382f612 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@1055e4af is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@3caeaf62 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@e6ea0c6 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@e6ea0c6 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@6a38e57f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@6a38e57f has brought me a new dirty child : ((((-3)+((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@5577140b is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@5577140b has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherConsolide@1c6b6478 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@67f89fa3 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@67f89fa3 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@4ac68d3e is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@277c0f21 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@6073f712 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@43556938 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3d04a311 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@7a46a697 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7a46a697 has brought me a new dirty child : (((((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5f205aa is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@6d86b085 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@75828a0f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.PowerCruncherProcessRaise@75828a0f has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+(9))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.PowerCruncherProcessRoot@3abfe836 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@2ff5659e is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@77afea7d is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@161cd475 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@532760d8 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@57fa26b7 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@57fa26b7 has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@5f8ed237 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@5f8ed237 has brought me a new dirty child : ((((-3)+((-1)*((((1)*(((-4)*(-7))/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))/(4))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@2f410acf is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
MCP res ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@2f410acf has brought me a new dirty child : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@47089e5f is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACE rwif (((-7)/(4)))
ACE rwif (((3)^(2)))
ACE rwif (((-7)/(4)))
comparing(((-7)/(4))) to (((3)^(2)))
ACE rwif ()
ACE rwif (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
ACE rwif ()
comparing() to (((((-4)*((-7)/(4)))+((1)*((3)^(2))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@4141d797 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
ACSD 0 not addex (3)
ACSD 0 not addex (2)
ACSD 0 not addex ((3)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-4)*((-7)/(4)))+((3)^(2))))
ACSD 0 deno is 1 of (((-4)*((-7)/(4)))+((3)^(2)))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))
ACSD 0 not addex ((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@68f7aae2 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@68f7aae2 has brought me a new dirty child : (((((-3)+((-1)*((((-4)*(((-7)^(1))/((4)^(1))))+((3)^(2)))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@4f47d241 is messing around now.
on child ((((-3)+((-1)*((((-4)*((-7)/(4)))+((3)^(2)))^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@4c3e4790
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@38cccef is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@38cccef has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5679c6c6 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@27ddd392 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@19e1023e is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7cef4e59 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@7cef4e59 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@64b8f8f4 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@64b8f8f4 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@2db0f6b2 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@2db0f6b2 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@3cd1f1c8 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@3a4afd8d is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@1996cd68 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@1996cd68 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@3339ad8e is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@555590 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@6d1e7682 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@424c0bc4 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@3c679bde is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@16b4a017 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@8807e25 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@2a3046da is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@2a098129 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@2a098129 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@198e2867 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@198e2867 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@12f40c25 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@12f40c25 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@3ada9e37 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@5cbc508c is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@3419866c is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@3419866c has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@63e31ee is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher is new : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I'm ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@68fb2c38
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@567d299b is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@567d299b has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@2eafffde is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@59690aa4 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@6842775d is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@574caa3f is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@574caa3f has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@64cee07 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@64cee07 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@1761e840 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@1761e840 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@6c629d6e is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@5ecddf8f is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@3f102e87 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@3f102e87 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@27abe2cd is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@5f5a92bb is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@6fdb1f78 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@51016012 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@29444d75 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@2280cdac is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@1517365b is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@4fccd51b is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@44e81672 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
mcd e = ((-7)/(4))
mcd worklist (-4)
mcd ((-4)*((-7)/(4)))
mcd worklist (-4)
mcd ((-4))
mcd ((-4)*((-7)/(4)))
mcd worklist (-1)
mcd worklist (((9)+((-4)*((-7)/(4))))^((1)/(2)))
into val 1
nouth.les.MultiCruncherDivs@44e81672 has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherNumerator@60215eee is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherNumerator@60215eee has brought me a new dirty child : ((((-3)+((-1)*(((9)+((1)*(((-4)*(-7))/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherPowerise@4ca8195f is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding ((-7)/(4))
MCP res ((-4)*((-7)/(4)))
MCP adding (-1)
MCP adding (((9)+((-4)*((-7)/(4))))^((1)/(2)))
MCP res ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@4ca8195f has brought me a new dirty child : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@65e579dc is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((-7)/(4)))
ACE rwif ()
comparing() to (((-7)/(4)))
ACE rwif ()
ACE rwif (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+((-4)*((-7)/(4))))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@61baa894 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex (4)
ACSD 0 not addex ((-7)/(4))
ACSD 0 not addex ((-4)*((-7)/(4)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((9)+((-4)*((-7)/(4)))))
ACSD 0 deno is 1 of ((9)+((-4)*((-7)/(4))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((9)+((-4)*((-7)/(4))))^((1)/(2)))
ACSD 0 not addex ((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@b065c63 is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
DCSN in : ((-7)/(4))
DCSN dealt : ((-7)/(4))
DCSN listadd((-7)^(1))
DCSN listadd((4)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@b065c63 has brought me a new dirty child : (((((-3)+((-1)*(((9)+((-4)*(((-7)^(1))/((4)^(1)))))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@768debd is messing around now.
on child ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
into val 0
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
Comsearcher checkagainst : ((((-3)+((-1)*(((9)+((-4)*((-7)/(4))))^((1)/(2)))))/(2))=(x))
I'm ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@490d6c15
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@7d4793a8 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@7d4793a8 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((28))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((28)/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@449b2d27 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5479e3f is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
mcd worklist (-4)
mcd worklist (-7)
mcd worklist (-1)
mcd worklist (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@27082746 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@66133adc is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding (-7)
MCP res ((-4)*(-7))
MCP adding (-1)
MCP adding (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
MCP res ((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@66133adc has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@7bfcd12c is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@7bfcd12c has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@42f30e0a is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.AddCruncherEqual@24273305 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@5b1d2887 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@5b1d2887 has brought me a new dirty child : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@46f5f779 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@46f5f779 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1c2c22f3 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@18e8568 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@33e5ccce is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@5a42bbf4 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@270421f5 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@52d455b8 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@4f4a7090 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@4f4a7090 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((28))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+((28)/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.MultiCruncherExpand@18ef96 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@6956de9 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
mcd worklist (-4)
mcd worklist (-7)
mcd worklist (-1)
mcd worklist (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@769c9116 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@6aceb1a5 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
MCP adding (-4)
MCP adding (-7)
MCP res ((-4)*(-7))
MCP adding (-1)
MCP adding (((9)+(((-4)*(-7))/(4)))^((1)/(2)))
MCP res ((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2))))
into val 2
nouth.les.MultiCruncherPowerise@6aceb1a5 has brought me a new dirty child : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@2d6d8735 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ((4))
ACE rwif ()
comparing() to ((4))
ACE rwif ()
ACE rwif (((((9))+(((28))/(4)))^((1)/(2))))
ACE rwif ()
comparing() to (((((9))+(((28))/(4)))^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@ba4d54 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (9)
ACSD 0 not addex (-4)
ACSD 0 not addex (-7)
ACSD 0 not addex ((-4)*(-7))
ACSD 0 not addex (4)
ACSD 0 not addex (((-4)*(-7))/(4))
DCS start ((4)/(1))
DCS after crossout before single plain :((4)) / ((1))
DCS single plain :((4)) / ((1))
DCS computing gcd from 4 and 1 = 1
DCS ZERO return resulting ((4)/(1))
ACSD polished unide is (4)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
DCS start ((4)/(4))
DCS crossing out (4)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD : holderEx past crunch is ((1)/(1))
ACSD : holderEx polished is (1)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))
ACSD 0 not addex ((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
into val 1
nouth.les.AddCruncherSingleDenominator@ba4d54 has brought me a new dirty child : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((((-4)*(-7))+((4)*(9)))/(4))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherSimplifyNew@12bc6874 is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
DCSN in : (((-4)*(-7))/(4))
DCSN dealt : ((7)/(1))
DCSN listadd((7)^(1))
DCSN listadd((1)^(1))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((9)+(7))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 3
nouth.les.DivCruncherSimplifyNew@12bc6874 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@de0a01f is messing around now.
on child ((((-3)+((-1)*(((9)+(((-4)*(-7))/(4)))^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@4c75cab9
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.AddCruncherEqual@1ef7fe8e is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@1ef7fe8e has brought me a new dirty child : (((((-3))+((-1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@6f79caec is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
ACSD 0 not addex ((-1)*(((7)+(9))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((7)+(9))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@67117f44 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@67117f44 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@5d3411d is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@2471cca7 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@5fe5c6f is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@6979e8cb is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitDen@763d9750 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@5c0369c4 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@2be94b0f is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@d70c109 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@17ed40e0 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
mcd worklist (-1)
mcd worklist (((7)+(9))^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@50675690 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@31b7dea0 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
MCP adding (-1)
MCP adding (((7)+(9))^((1)/(2)))
MCP res ((-1)*(((7)+(9))^((1)/(2))))
into val 1
nouth.les.MultiCruncherPowerise@31b7dea0 has brought me a new dirty child : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@3ac42916 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((((16)))^((1)/(2))))
ACE rwif ()
comparing() to (((((16)))^((1)/(2))))
into val 1
nouth.les.AddCruncherEqual@3ac42916 has brought me a new dirty child : (((((-3))+((-1)*((((16)))^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherSingleDenominator@47d384ee is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (7)
ACSD 0 not addex (9)
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (7)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (9)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((7)+(9)))
ACSD 0 deno is 1 of ((7)+(9))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex (((7)+(9))^((1)/(2)))
ACSD 0 not addex ((-1)*(((7)+(9))^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(((7)+(9))^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*(((7)+(9))^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@2d6a9952 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@2d6a9952 has brought me a new dirty child : (((((-3)+((-1)*(((7)+(9))^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@22a71081 is messing around now.
on child ((((-3)+((-1)*(((7)+(9))^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*((16)^((1)/(2)))))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@3930015a
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@629f0666 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@629f0666 has brought me a new dirty child : (((((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@1bc6a36e is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherConsolide@1ff8b8f is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRaise@387c703b is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherProcessRoot@224aed64 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
 s is 4.0
into val 1
nouth.les.PowerCruncherProcessRoot@224aed64 has brought me a new dirty child : ((((-3)+((-1)*((4)^(1))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(4)))/(2))=(x))
nouth.les.PowerCruncherSplitDen@c39f790 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.PowerCruncherSplitNum@71e7a66b is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPlain@2ac1fdc4 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherExpand@5f150435 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1c53fd30 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
mcd worklist (-1)
mcd worklist ((16)^((1)/(2)))
into val 0
nouth.les.MultiCruncherNumerator@50cbc42f is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@75412c2f is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
MCP adding (-1)
MCP adding ((16)^((1)/(2)))
MCP res ((-1)*((16)^((1)/(2))))
into val 1
nouth.les.MultiCruncherPowerise@75412c2f has brought me a new dirty child : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.AddCruncherEqual@282ba1e is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
ACE rwif ()
ACE rwif (((16)^((1)/(2))))
ACE rwif ()
comparing() to (((16)^((1)/(2))))
into val 0
nouth.les.AddCruncherSingleDenominator@13b6d03 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (16)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((16)^((1)/(2)))
ACSD 0 not addex ((-1)*((16)^((1)/(2))))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2)))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*((16)^((1)/(2))))))
ACSD 0 deno is 1 of ((-3)+((-1)*((16)^((1)/(2)))))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*((16)^((1)/(2)))))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@f5f2bb7 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN dealt : (((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))/(2))
DCSN listadd(((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))
DCSN listadd((2)^(1))
into val 2
nouth.les.DivCruncherSimplifyNew@f5f2bb7 has brought me a new dirty child : (((((-3)+((-1)*((16)^(((1)^(1))/((2)^(1))))))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@73035e27 is messing around now.
on child ((((-3)+((-1)*((16)^((1)/(2)))))/(2))=(x))
into val 0
I'm ((((-3)+((-1)*(4)))/(2))=(x)) and I'm about to propagate.
EqEx : (((-3)+((-1)*(4)))/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@64c64813
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.MultiCruncherPlain@3ecf72fd is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
into val 1
nouth.les.MultiCruncherPlain@3ecf72fd has brought me a new dirty child : ((((-3)+((-4)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+(-4))/(2))=(x))
nouth.les.MultiCruncherExpand@483bf400 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@21a06946 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
mcd worklist (-1)
mcd worklist (4)
into val 0
nouth.les.MultiCruncherNumerator@77f03bb1 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
into val 0
nouth.les.MultiCruncherPowerise@326de728 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
MCP adding (-1)
MCP adding (4)
MCP res ((-1)*(4))
into val 1
nouth.les.MultiCruncherPowerise@326de728 has brought me a new dirty child : ((((-3)+((-1)*(4)))/(2))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(4)))/(2))=(x))
nouth.les.AddCruncherEqual@25618e91 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@25618e91 has brought me a new dirty child : (((((-7)))/(2))=(x))
I've polished the child and now it looks like this : (((-7)/(2))=(x))
nouth.les.AddCruncherSingleDenominator@7a92922 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
ACSD 0 not addex (-3)
ACSD 0 not addex (-1)
ACSD 0 not addex (4)
ACSD 0 not addex ((-1)*(4))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-3)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-3)+((-1)*(4))))
ACSD 0 deno is 1 of ((-3)+((-1)*(4)))
ACSD 0 not addex (2)
ACSD 0 not addex (((-3)+((-1)*(4)))/(2))
ACSD 0 not addex (x)
ACSD 0 not addex ((((-3)+((-1)*(4)))/(2))=(x))
into val 0
nouth.les.DivCruncherSimplifyNew@71f2a7d5 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
DCSN in : (((-3)+((-1)*(4)))/(2))
DCSN dealt : (((-3)+((-1)*(4)))/(2))
DCSN listadd(((-3)+((-1)*(4)))^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@71f2a7d5 has brought me a new dirty child : (((((-3)+((-1)*(4)))^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : ((((-3)+((-1)*(4)))/(2))=(x))
nouth.les.DivCruncherEmergeDivs@2cfb4a64 is messing around now.
on child ((((-3)+((-1)*(4)))/(2))=(x))
into val 0
I'm (((-7)/(2))=(x)) and I'm about to propagate.
EqEx : ((-7)/(2)) is suggesting alterators now.
nouth.les.AlteratorMulti@5474c6c
adding it.
EqEx : (x) is suggesting alterators now.
nouth.les.DivCruncherSimplifyNew@4b6995df is messing around now.
on child (((-7)/(2))=(x))
DCSN in : ((-7)/(2))
DCSN dealt : ((-7)/(2))
DCSN listadd((-7)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@4b6995df has brought me a new dirty child : ((((-7)^(1))/((2)^(1)))=(x))
I've polished the child and now it looks like this : (((-7)/(2))=(x))
nouth.les.DivCruncherEmergeDivs@2fc14f68 is messing around now.
on child (((-7)/(2))=(x))
into val 0
Comsearcher checkagainst : (((-7)/(2))=(x))
all values : \\\frac{1}{2}=x
all values : \\\frac{-7}{2}=x
outputer found ((((-1)*((7)/(4)))+((3)*(x))+((x)^(2)))=(0))
