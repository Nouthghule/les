5+3*poník=2
5+3*poník=2
5+3*poník=2
5+3*poník=2
tparser ( 5 + 3 * poník = 2 )
tparser ( 5 + 3 * poník = 2 )
ready S : ( 5 + 3 * poník = 2 ) 
operators push (
members push 5
operators push +
new op + vs last op (
members push 3
operators push *
new op * vs last op +
members push poník
operators push =
new op = vs last op *
operators pop =
operators pop *
operators undo pop before the last pop.
new op = vs last op +
operators pop =
operators pop +
operators undo pop before the last pop.
new op = vs last op (
operators pop =
operators pop (
operators return back :  ( =
members push 2
operators push )
operators pop : )
operators pop into execute
operators pop : (
5 3 poník * + 2 =
 5 ((3)*(poník)) + 2 = 
 ((5)+(((3)*(poník)))) 2 = 
 ((((5)+(((3)*(poník)))))=(2)) 
Parsing ex from  ((((5)+(((3)*(poník)))))=(2)) 
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 5
TP: end of ex of 5
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 3
TP: end of ex of 3
TP:default *
TP:Start of new ex.
TP:default p
TP:default o
TP:default n
TP:default í
TP:default k
TP: end of ex of poník
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default =
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
DE replaceself numeric 5
DE replaceself numeric 3
DE replaceself poník
DE Blank value with rs of * and val of ((3)*(poník))
DE Blank value with rs of * and val of ((3)*(poník))
DE Blank value with rs of $ and val of (((3)*(poník)))
DE replacing self with only child! : ((3)*(poník))
DE Blank value with rs of $ and val of (((3)*(poník)))
DE replacing self with only child! : ((3)*(poník))
DE Blank value with rs of + and val of ((5)+((3)*(poník)))
DE Blank value with rs of + and val of ((5)+((3)*(poník)))
DE Blank value with rs of $ and val of (((5)+((3)*(poník))))
DE replacing self with only child! : ((5)+((3)*(poník)))
DE Blank value with rs of $ and val of (((5)+((3)*(poník))))
DE replacing self with only child! : ((5)+((3)*(poník)))
DE replaceself numeric 2
DE Blank value with rs of = and val of (((5)+((3)*(poník)))=(2))
DE Blank value with rs of = and val of (((5)+((3)*(poník)))=(2))
DE Blank value with rs of $ and val of ((((5)+((3)*(poník)))=(2)))
DE replacing self with only child! : (((5)+((3)*(poník)))=(2))
DE Blank value with rs of $ and val of ((((5)+((3)*(poník)))=(2)))
DE replacing self with only child! : (((5)+((3)*(poník)))=(2))
TextParser returning : (((5)+((3)*(poník)))=(2))
Parsed ex as : (((5)+((3)*(poník)))=(2))
=====================================STATE 1 , generation 0
CurrState is (((5)+((3)*(poník)))=(2))
It's hf is 20007
It's parent's operator is : nouth.les.DefOperator@5451c3a8
It's operator is : nouth.les.DefOperator@5451c3a8
I'm (((5)+((3)*(poník)))=(2)) and I'm about to propagate.
EqEx : ((5)+((3)*(poník))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (5)
nouth.les.AlteratorAdd@8efb846
adding it.
nouth.les.AlteratorAdd@2a84aee7
adding it.
EqEx : (2) is suggesting alterators now.
nouth.les.MultiCruncherPlain@a09ee92 is messing around now.
on child (((5)+((3)*(poník)))=(2))
into val 0
nouth.les.MultiCruncherExpand@30f39991 is messing around now.
on child (((5)+((3)*(poník)))=(2))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@452b3a41 is messing around now.
on child (((5)+((3)*(poník)))=(2))
mcd worklist (3)
mcd worklist (poník)
into val 0
nouth.les.MultiCruncherNumerator@4a574795 is messing around now.
on child (((5)+((3)*(poník)))=(2))
into val 0
nouth.les.MultiCruncherPowerise@3f99bd52 is messing around now.
on child (((5)+((3)*(poník)))=(2))
MCP adding (3)
MCP adding (poník)
MCP res ((3)*(poník))
into val 1
nouth.les.MultiCruncherPowerise@3f99bd52 has brought me a new dirty child : (((5)+((3)*(poník)))=(2))
State polishing child : (((5)+((3)*(poník)))=(2))
nouth.les.AddCruncherEqual@4f023edb is messing around now.
on child (((5)+((3)*(poník)))=(2))
ACE rwif ()
ACE rwif ((poník))
ACE rwif ()
comparing() to ((poník))
into val 0
nouth.les.AddCruncherSingleDenominator@3a71f4dd is messing around now.
on child (((5)+((3)*(poník)))=(2))
ACSD 0 not addex (5)
ACSD 0 not addex (3)
ACSD 0 not addex (poník)
ACSD 0 not addex ((3)*(poník))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (5)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((5)+((3)*(poník)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((5)+((3)*(poník))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((5)+((3)*(poník))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((5)+((3)*(poník)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((5)+((3)*(poník))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((5)+((3)*(poník))))
ACSD 0 deno is 1 of ((5)+((3)*(poník)))
ACSD 0 not addex (2)
ACSD 0 not addex (((5)+((3)*(poník)))=(2))
into val 0
nouth.les.AlteratorAdd@8efb846 is messing around now.
It's altEx is (((-1)*(3)*(poník)))
on child (((5)+((3)*(poník)))=(2))
ACE rwif ()
ACE rwif ((poník))
ACE rwif ()
comparing() to ((poník))
ACE rwif ((poník))
ACE rwif ()
comparing() to ((poník))
ACE rwif ((poník))
comparing((poník)) to ((poník))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ((poník))
ACE rwif ()
comparing() to ((poník))
into val 1
nouth.les.AlteratorAdd@8efb846 has brought me a new dirty child : ((((0)*(poník))+((5)))=(((2))+((-3)*(poník))))
State polishing child : ((((0)*(poník))+((5)))=(((2))+((-3)*(poník))))
nouth.les.AlteratorAdd@2a84aee7 is messing around now.
It's altEx is (((-1)*(5)))
on child (((5)+((3)*(poník)))=(2))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((poník))
ACE rwif ()
comparing() to ((poník))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@2a84aee7 has brought me a new dirty child : ((((0))+((3)*(poník)))=(((-3))))
State polishing child : ((((0))+((3)*(poník)))=(((-3))))
It just propagated.
New unique children : <((5)=((2)+((-3)*(poník)))) ; (((3)*(poník))=(-3)) ; >
Children hfs : <21007 ; 11005 ; >
Children ops : <nouth.les.AlteratorAdd@8efb846nouth.les.AlteratorAdd@2a84aee7>
=====================================STATE 2 , generation 1
CurrState is (((3)*(poník))=(-3))
It's hf is 11005
It's parent's operator is : nouth.les.DefOperator@5451c3a8
It's operator is : nouth.les.AlteratorAdd@2a84aee7
I'm (((3)*(poník))=(-3)) and I'm about to propagate.
EqEx : ((3)*(poník)) is suggesting alterators now.
MultiEx suggestAlts : ((3)*(poník)) suggesting now.
ME sA checking (3)
ME sA multied by (3) into ((3))
ME sA checking (poník)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((3))
nouth.les.AlteratorDiv@6b884d57
adding it.
EqEx : (-3) is suggesting alterators now.
nouth.les.MultiCruncherPlain@38af3868 is messing around now.
on child (((3)*(poník))=(-3))
into val 0
nouth.les.MultiCruncherExpand@77459877 is messing around now.
on child (((3)*(poník))=(-3))
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5b2133b1 is messing around now.
on child (((3)*(poník))=(-3))
mcd worklist (3)
mcd worklist (poník)
into val 0
nouth.les.MultiCruncherNumerator@72ea2f77 is messing around now.
on child (((3)*(poník))=(-3))
into val 0
nouth.les.MultiCruncherPowerise@33c7353a is messing around now.
on child (((3)*(poník))=(-3))
MCP adding (3)
MCP adding (poník)
MCP res ((3)*(poník))
into val 1
nouth.les.MultiCruncherPowerise@33c7353a has brought me a new dirty child : (((3)*(poník))=(-3))
State polishing child : (((3)*(poník))=(-3))
nouth.les.AlteratorDiv@6b884d57 is messing around now.
It's altEx is (3)
on child (((3)*(poník))=(-3))
AD pre(((3)*(poník))=(-3))
AD prep((((3)*(poník))/(3))=((-3)/(3)))
AD presimp((((3)*(poník))/(3))=((-3)/(3)))
DCSN in : (((3)*(poník))/(3))
DCSN dealt : ((poník)/(1))
DCSN listadd((poník)^(1))
DCSN listadd((1)^(1))
DCSN in : ((-3)/(3))
DCSN dealt : ((-1)/(1))
DCSN listadd((-1)^(1))
DCSN listadd((1)^(1))
AD post((poník)=((-1)*(1)))
into val 1
nouth.les.AlteratorDiv@6b884d57 has brought me a new dirty child : ((poník)=((-1)*(1)))
State polishing child : ((poník)=((-1)*(1)))
It just propagated.
Result found in children !
it's ((poník)=((-1)*(1)))
It's parent's operator is : nouth.les.AlteratorAdd@2a84aee7
It's operator is : nouth.les.AlteratorDiv@6b884d57
cleaned up : ((poník)=((-1)*(1)))
outputer found ((poník)=((-1)*(1)))
