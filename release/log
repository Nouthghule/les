x^2 + \sqrt{2}*x + 1 = 2x^2 + 10*2
x^2 + \sqrt{2}*x + 1 = 2x^2 + 10*2
x^2 + \sqrt{2}*x + 1 = 2x^2 + 10*2
x^2 + (2)^(1/2)*x + 1 = 2x^2 + 10*2
tparser ( x ^ 2 + ( 2 ) ^ ( 1 / 2 ) * x + 1 = 2 * x ^ 2 + 10 * 2 )
tparser ( x ^ 2 + ( 2 ) ^ ( 1 / 2 ) * x + 1 = 2 * x ^ 2 + 10 * 2 )
ready S : ( x ^ 2 + ( 2 ) ^ ( 1 / 2 ) * x + 1 = 2 * x ^ 2 + 10 * 2 ) 
operators push (
members push x
operators push ^
new op ^ vs last op (
members push 2
operators push +
new op + vs last op ^
operators pop +
operators pop ^
operators undo pop before the last pop.
new op + vs last op (
operators push (
new op ( vs last op +
operators pop (
operators pop +
operators return back :  + (
members push 2
operators push )
operators pop : )
operators pop : (
operators push ^
new op ^ vs last op +
operators push (
new op ( vs last op ^
operators pop (
operators pop ^
operators return back :  ^ (
members push 1
operators push /
new op / vs last op (
members push 2
operators push )
operators pop : )
operators pop into execute
operators pop : (
operators push *
new op * vs last op ^
operators pop *
operators pop ^
operators undo pop before the last pop.
new op * vs last op +
members push x
operators push +
new op + vs last op *
operators pop +
operators pop *
operators undo pop before the last pop.
new op + vs last op +
operators pop +
operators pop +
operators undo pop before the last pop.
new op + vs last op (
members push 1
operators push =
new op = vs last op +
operators pop =
operators pop +
operators undo pop before the last pop.
new op = vs last op (
operators pop =
operators pop (
operators return back :  ( =
members push 2
operators push *
new op * vs last op =
members push x
operators push ^
new op ^ vs last op *
members push 2
operators push +
new op + vs last op ^
operators pop +
operators pop ^
operators undo pop before the last pop.
new op + vs last op *
operators pop +
operators pop *
operators undo pop before the last pop.
new op + vs last op =
members push 10
operators push *
new op * vs last op +
members push 2
operators push )
operators pop : )
operators pop into execute
operators pop into execute
operators pop into execute
operators pop : (
x 2 ^ 2 1 2 / ^ x * + 1 + 2 x 2 ^ * 10 2 * + =
 ((x)^(2)) 2 1 2 / ^ x * + 1 + 2 x 2 ^ * 10 2 * + = 
 ((x)^(2)) 2 ((1)/(2)) ^ x * + 1 + 2 x 2 ^ * 10 2 * + = 
 ((x)^(2)) ((2)^(((1)/(2)))) x * + 1 + 2 x 2 ^ * 10 2 * + = 
 ((x)^(2)) ((((2)^(((1)/(2)))))*(x)) + 1 + 2 x 2 ^ * 10 2 * + = 
 ((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))) 1 + 2 x 2 ^ * 10 2 * + = 
 ((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)) 2 x 2 ^ * 10 2 * + = 
 ((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)) 2 ((x)^(2)) * 10 2 * + = 
 ((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)) ((2)*(((x)^(2)))) 10 2 * + = 
 ((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)) ((2)*(((x)^(2)))) ((10)*(2)) + = 
 ((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)) ((((2)*(((x)^(2)))))+(((10)*(2)))) = 
 ((((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)))=(((((2)*(((x)^(2)))))+(((10)*(2)))))) 
Parsing ex from  ((((((((x)^(2)))+(((((2)^(((1)/(2)))))*(x)))))+(1)))=(((((2)*(((x)^(2)))))+(((10)*(2)))))) 
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default ^
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP:default ^
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 1
TP: end of ex of 1
TP:default /
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default *
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:default 1
TP: end of ex of 1
TP: end of ex of 
TP: end of ex of 
TP:default =
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP:default *
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default x
TP: end of ex of x
TP:default ^
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP:default +
TP:Start of new ex.
TP:Start of new ex.
TP:Start of new ex.
TP:default 1
TP:default 0
TP: end of ex of 10
TP:default *
TP:Start of new ex.
TP:default 2
TP: end of ex of 2
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
TP: end of ex of 
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE replaceself numeric 2
DE replaceself numeric 1
DE replaceself numeric 2
DE Blank value with rs of / and val of ((1)/(2))
DE Blank value with rs of / and val of ((1)/(2))
DE Blank value with rs of $ and val of (((1)/(2)))
DE replacing self with only child! : ((1)/(2))
DE Blank value with rs of $ and val of (((1)/(2)))
DE replacing self with only child! : ((1)/(2))
DE Blank value with rs of ^ and val of ((2)^((1)/(2)))
DE Blank value with rs of ^ and val of ((2)^((1)/(2)))
DE Blank value with rs of $ and val of (((2)^((1)/(2))))
DE replacing self with only child! : ((2)^((1)/(2)))
DE Blank value with rs of $ and val of (((2)^((1)/(2))))
DE replacing self with only child! : ((2)^((1)/(2)))
DE replaceself x
DE Blank value with rs of * and val of (((2)^((1)/(2)))*(x))
DE Blank value with rs of * and val of (((2)^((1)/(2)))*(x))
DE Blank value with rs of $ and val of ((((2)^((1)/(2)))*(x)))
DE replacing self with only child! : (((2)^((1)/(2)))*(x))
DE Blank value with rs of $ and val of ((((2)^((1)/(2)))*(x)))
DE replacing self with only child! : (((2)^((1)/(2)))*(x))
DE Blank value with rs of + and val of (((x)^(2))+(((2)^((1)/(2)))*(x)))
DE Blank value with rs of + and val of (((x)^(2))+(((2)^((1)/(2)))*(x)))
DE Blank value with rs of $ and val of (((((2)^((1)/(2)))*(x))+((x)^(2))))
DE replacing self with only child! : ((((2)^((1)/(2)))*(x))+((x)^(2)))
DE Blank value with rs of $ and val of (((((2)^((1)/(2)))*(x))+((x)^(2))))
DE replacing self with only child! : ((((2)^((1)/(2)))*(x))+((x)^(2)))
DE replaceself numeric 1
DE Blank value with rs of + and val of (((((2)^((1)/(2)))*(x))+((x)^(2)))+(1))
DE Blank value with rs of + and val of (((((2)^((1)/(2)))*(x))+((x)^(2)))+(1))
DE Blank value with rs of $ and val of (((1)+((((2)^((1)/(2)))*(x))+((x)^(2)))))
DE replacing self with only child! : ((1)+((((2)^((1)/(2)))*(x))+((x)^(2))))
DE Blank value with rs of $ and val of (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
DE replacing self with only child! : ((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))
DE Blank value with rs of $ and val of (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
DE replacing self with only child! : ((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))
DE replaceself numeric 2
DE replaceself x
DE replaceself numeric 2
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of ^ and val of ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of $ and val of (((x)^(2)))
DE replacing self with only child! : ((x)^(2))
DE Blank value with rs of * and val of ((2)*((x)^(2)))
DE Blank value with rs of * and val of ((2)*((x)^(2)))
DE Blank value with rs of $ and val of (((2)*((x)^(2))))
DE replacing self with only child! : ((2)*((x)^(2)))
DE Blank value with rs of $ and val of (((2)*((x)^(2))))
DE replacing self with only child! : ((2)*((x)^(2)))
DE replaceself numeric 10
DE replaceself numeric 2
DE Blank value with rs of * and val of ((10)*(2))
DE Blank value with rs of * and val of ((10)*(2))
DE Blank value with rs of $ and val of (((10)*(2)))
DE replacing self with only child! : ((10)*(2))
DE Blank value with rs of $ and val of (((10)*(2)))
DE replacing self with only child! : ((10)*(2))
DE Blank value with rs of + and val of (((2)*((x)^(2)))+((10)*(2)))
DE Blank value with rs of + and val of (((2)*((x)^(2)))+((10)*(2)))
DE Blank value with rs of $ and val of ((((10)*(2))+((2)*((x)^(2)))))
DE replacing self with only child! : (((10)*(2))+((2)*((x)^(2))))
DE Blank value with rs of $ and val of ((((10)*(2))+((2)*((x)^(2)))))
DE replacing self with only child! : (((10)*(2))+((2)*((x)^(2))))
DE Blank value with rs of = and val of (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
DE Blank value with rs of = and val of (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
DE Blank value with rs of $ and val of ((((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2))))))
DE replacing self with only child! : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
DE Blank value with rs of $ and val of ((((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2))))))
DE replacing self with only child! : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
TextParser returning : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
Parsed ex as : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
#hf 30000
#hf 30022
#hf 30022
startingstate hfval is 30022
=====================================STATE 1 , generation 0
CurrState is (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
It's hf is 30022
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.DefOperator@4d7e1886
I'm (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2))))) and I'm about to propagate.
EqEx : ((1)+(((2)^((1)/(2)))*(x))+((x)^(2))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
nouth.les.AlteratorAdd@4f023edb
adding it.
nouth.les.AlteratorAdd@3a71f4dd
adding it.
EqEx : (((10)*(2))+((2)*((x)^(2)))) is suggesting alterators now.
nouth.les.AlteratorAdd@7adf9f5f
adding it.
nouth.les.AlteratorAdd@85ede7b
adding it.
nouth.les.DivCruncherSimplifyNew@5674cd4d is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@5674cd4d has brought me a new dirty child : (((1)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.DivCruncherEmergeDivs@1be6f5c3 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherExpand@6b884d57 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 2
nouth.les.PowerCruncherExpand@6b884d57 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*((x)*(x)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
nouth.les.PowerCruncherConsolide@77459877 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherProcessRaise@72ea2f77 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherSplitDen@681a9515 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherSplitNum@3af49f1c is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.MultiCruncherPlain@19469ea2 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 1
nouth.les.MultiCruncherPlain@19469ea2 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((20))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((20)+((2)*((x)^(2)))))
nouth.les.MultiCruncherExpand@2f2c9b19 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@31befd9f is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist ((x)^(2))
into val 0
nouth.les.MultiCruncherNumerator@1c20c684 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.MultiCruncherPowerise@1fb3ebeb is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@1fb3ebeb has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.PowerCruncherExpand@1218025c is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 2
nouth.les.PowerCruncherExpand@1218025c has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*((x)*(x)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
nouth.les.PowerCruncherConsolide@816f27d is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherProcessRaise@87aac27 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherSplitDen@3e3abc88 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherSplitNum@6ce253f1 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.AddCruncherEqual@53d8d10a is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
into val 0
nouth.les.AddCruncherSingleDenominator@e9e54c2 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex (((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 deno is 1 of ((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))
ACSD 0 not addex (10)
ACSD 0 not addex (2)
ACSD 0 not addex ((10)*(2))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((2)*((x)^(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
ACSD 0 deno is 1 of (((10)*(2))+((2)*((x)^(2))))
ACSD 0 not addex (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.MultiCruncherPlain@65ab7765 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 1
nouth.les.MultiCruncherPlain@65ab7765 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((20))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((20)+((2)*((x)^(2)))))
nouth.les.MultiCruncherExpand@1b28cdfa is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@eed1f14 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist ((x)^(2))
into val 0
nouth.les.MultiCruncherNumerator@7229724f is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.MultiCruncherPowerise@4c873330 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@4c873330 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.PowerCruncherExpand@119d7047 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 2
nouth.les.PowerCruncherExpand@119d7047 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*((x)*(x)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
nouth.les.PowerCruncherConsolide@776ec8df is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherProcessRaise@4eec7777 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherSplitDen@3b07d329 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.PowerCruncherSplitNum@41629346 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.MultiCruncherPlain@404b9385 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 1
nouth.les.MultiCruncherPlain@404b9385 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((20))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((20)+((2)*((x)^(2)))))
nouth.les.MultiCruncherExpand@6d311334 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@682a0b20 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist ((x)^(2))
into val 0
nouth.les.MultiCruncherNumerator@3d075dc0 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.MultiCruncherPowerise@214c265e is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
into val 3
nouth.les.MultiCruncherPowerise@214c265e has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.AddCruncherEqual@448139f0 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
into val 0
nouth.les.AddCruncherSingleDenominator@7cca494b is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex (((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 deno is 1 of ((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))
ACSD 0 not addex (10)
ACSD 0 not addex (2)
ACSD 0 not addex ((10)*(2))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((2)*((x)^(2)))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2))))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*((x)^(2)))))
ACSD 0 deno is 1 of (((10)*(2))+((2)*((x)^(2))))
ACSD 0 not addex (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
into val 0
nouth.les.AlteratorAdd@4f023edb is messing around now.
It's altEx is (((-1)*((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ()
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ()
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@4f023edb has brought me a new dirty child : ((((0)*((2)^((1)/(2)))*(x))+((0)*((x)^(2)))+((1)))=(((-1)*((2)^((1)/(2)))*(x))+((1)*((x)^(2)))+((20))))
I've polished the child and now it looks like this : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
nouth.les.AlteratorAdd@3a71f4dd is messing around now.
It's altEx is (((-1)*(1)))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
into val 1
nouth.les.AlteratorAdd@3a71f4dd has brought me a new dirty child : ((((0))+((1)*((2)^((1)/(2)))*(x))+((1)*((x)^(2))))=(((19))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((((2)^((1)/(2)))*(x))+((x)^(2)))=((19)+((2)*((x)^(2)))))
nouth.les.AlteratorAdd@7adf9f5f is messing around now.
It's altEx is (((-1)*(2)*((x)^(2))))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to ()
ACE rwif (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7adf9f5f has brought me a new dirty child : ((((-1)*((x)^(2)))+((1))+((1)*((2)^((1)/(2)))*(x)))=(((0)*((x)^(2)))+((20))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(20))
nouth.les.AlteratorAdd@85ede7b is messing around now.
It's altEx is (((-1)*(10)*(2)))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
into val 1
nouth.les.AlteratorAdd@85ede7b has brought me a new dirty child : ((((-19))+((1)*((2)^((1)/(2)))*(x))+((1)*((x)^(2))))=(((0))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
It just propagated.
#hf 20000
#hf 20021
#hf 21021
#hf 30000
#hf 30020
#hf 31020
#hf 20000
#hf 20015
#hf 21015
#hf 30000
#hf 30019
#hf 31019
#hf 30000
#hf 30016
#hf 31016
#hf 20000
#hf 20018
#hf 21018
New unique children : <(((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x)))) ; (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((20)+((2)*((x)^(2))))) ; ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))) ; (((((2)^((1)/(2)))*(x))+((x)^(2)))=((19)+((2)*((x)^(2))))) ; (((1)+(((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(20)) ; (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2)))) ; >
Children hfs : <21021 ; 31020 ; 21015 ; 31019 ; 31016 ; 21018 ; >
Children ops : <nouth.les.PowerCruncherExpand@6b884d57nouth.les.MultiCruncherPlain@19469ea2nouth.les.AlteratorAdd@4f023edbnouth.les.AlteratorAdd@3a71f4ddnouth.les.AlteratorAdd@7adf9f5fnouth.les.AlteratorAdd@85ede7b>
=====================================STATE 2 , generation 1
CurrState is ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
It's hf is 21015
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.AlteratorAdd@4f023edb
I'm ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))) and I'm about to propagate.
EqEx : (1) is suggesting alterators now.
EqEx : ((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (20)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
nouth.les.AlteratorAdd@7ba4f24f
adding it.
nouth.les.AlteratorAdd@3b9a45b3
adding it.
nouth.les.DivCruncherSimplifyNew@7699a589 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@7699a589 has brought me a new dirty child : ((1)=((20)+((-1)*((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2))))
I've polished the child and now it looks like this : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
nouth.les.DivCruncherEmergeDivs@58372a00 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherExpand@4dd8dc3 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 1
nouth.les.PowerCruncherExpand@4dd8dc3 has brought me a new dirty child : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
I've polished the child and now it looks like this : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
nouth.les.PowerCruncherConsolide@6d03e736 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@568db2f2 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@378bf509 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@5fd0d5ae is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.MultiCruncherPlain@2d98a335 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.MultiCruncherExpand@16b98e56 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7ef20235 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
mcd worklist (-1)
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@27d6c5e0 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.MultiCruncherPowerise@4f3f5b24 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
MCP adding (-1)
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res ((-1)*((2)^((1)/(2)))*(x))
into val 1
nouth.les.MultiCruncherPowerise@4f3f5b24 has brought me a new dirty child : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
I've polished the child and now it looks like this : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
nouth.les.PowerCruncherExpand@15aeb7ab is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 1
nouth.les.PowerCruncherExpand@15aeb7ab has brought me a new dirty child : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
I've polished the child and now it looks like this : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
nouth.les.PowerCruncherConsolide@7b23ec81 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@6acbcfc0 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@5f184fc6 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@3feba861 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.AddCruncherEqual@5b480cf9 is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
into val 0
nouth.les.AddCruncherSingleDenominator@6f496d9f is messing around now.
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 not addex (1)
ACSD 0 not addex (20)
ACSD 0 not addex (-1)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (20)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 deno is 1 of ((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))
ACSD 0 not addex ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.AlteratorAdd@7ba4f24f is messing around now.
It's altEx is (((-1)*((x)^(2)))+((-1)*(-1)*((2)^((1)/(2)))*(x)))
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@7ba4f24f has brought me a new dirty child : ((((1))+((1)*((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(((0)*((2)^((1)/(2)))*(x))+((0)*((x)^(2)))+((20))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(20))
nouth.les.AlteratorAdd@3b9a45b3 is messing around now.
It's altEx is (((-1)*(20)))
on child ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
into val 1
nouth.les.AlteratorAdd@3b9a45b3 has brought me a new dirty child : ((((-19)))=(((-1)*((2)^((1)/(2)))*(x))+((0))+((1)*((x)^(2)))))
I've polished the child and now it looks like this : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
It just propagated.
#hf 20000
#hf 20015
#hf 22015
#hf 20000
#hf 20014
#hf 22014
New unique children : <((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)*(x)))) ; ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))) ; >
Children hfs : <22015 ; 22014 ; >
Children ops : <nouth.les.PowerCruncherExpand@4dd8dc3nouth.les.AlteratorAdd@3b9a45b3>
=====================================STATE 3 , generation 1
CurrState is (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
It's hf is 21018
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.AlteratorAdd@85ede7b
I'm (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2)))) and I'm about to propagate.
EqEx : ((-19)+(((2)^((1)/(2)))*(x))+((x)^(2))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-19)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
nouth.les.AlteratorAdd@723279cf
adding it.
nouth.les.AlteratorAdd@10f87f48
adding it.
EqEx : ((2)*((x)^(2))) is suggesting alterators now.
MultiEx suggestAlts : ((2)*((x)^(2))) suggesting now.
ME sA checking (2)
ME sA multied by (2) into ((2))
ME sA checking ((x)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((2))
nouth.les.AlteratorDiv@4e50df2e
adding it.
nouth.les.DivCruncherSimplifyNew@1d81eb93 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@1d81eb93 has brought me a new dirty child : (((-19)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))=((2)*((x)^(2))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
nouth.les.DivCruncherEmergeDivs@7291c18f is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherExpand@34a245ab is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 2
nouth.les.PowerCruncherExpand@34a245ab has brought me a new dirty child : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*((x)*(x))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*(x)*(x)))
nouth.les.PowerCruncherConsolide@7cc355be is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@6e8cf4c6 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@12edcd21 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@34c45dca is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.MultiCruncherPlain@52cc8049 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.MultiCruncherExpand@5b6f7412 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@27973e9b is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (2)
mcd worklist ((x)^(2))
into val 0
nouth.les.MultiCruncherNumerator@312b1dae is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.MultiCruncherPowerise@7530d0a is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
into val 2
nouth.les.MultiCruncherPowerise@7530d0a has brought me a new dirty child : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
nouth.les.PowerCruncherExpand@27bc2616 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 2
nouth.les.PowerCruncherExpand@27bc2616 has brought me a new dirty child : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*((x)*(x))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*(x)*(x)))
nouth.les.PowerCruncherConsolide@3941a79c is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@506e1b77 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@4fca772d is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@9807454 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.AddCruncherEqual@3d494fbf is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
into val 0
nouth.les.AddCruncherSingleDenominator@1ddc4ec2 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
ACSD 0 not addex (-19)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex (((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (-19)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 deno is 1 of ((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
ACSD 0 not addex ((2)*((x)^(2)))
ACSD 0 not addex (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherExpand@133314b is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 2
nouth.les.PowerCruncherExpand@133314b has brought me a new dirty child : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*((x)*(x))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*(x)*(x)))
nouth.les.PowerCruncherConsolide@b1bc7ed is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@7cd84586 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@30dae81 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@1b2c6ec2 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.MultiCruncherPlain@4edde6e5 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.MultiCruncherExpand@70177ecd is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@1e80bfe8 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (2)
mcd worklist ((x)^(2))
into val 0
nouth.les.MultiCruncherNumerator@66a29884 is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
into val 0
nouth.les.MultiCruncherPowerise@4769b07b is messing around now.
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (2)
MCP adding ((x)^(2))
MCP res ((2)*((x)^(2)))
into val 2
nouth.les.MultiCruncherPowerise@4769b07b has brought me a new dirty child : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
nouth.les.AlteratorAdd@723279cf is messing around now.
It's altEx is (((-1)*((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@723279cf has brought me a new dirty child : ((((-19))+((0)*((2)^((1)/(2)))*(x))+((0)*((x)^(2))))=(((-1)*((2)^((1)/(2)))*(x))+((1)*((x)^(2)))))
I've polished the child and now it looks like this : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
nouth.les.AlteratorAdd@10f87f48 is messing around now.
It's altEx is (((-1)*(-19)))
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif ()
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
into val 1
nouth.les.AlteratorAdd@10f87f48 has brought me a new dirty child : ((((0))+((1)*((2)^((1)/(2)))*(x))+((1)*((x)^(2))))=(((19))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((((2)^((1)/(2)))*(x))+((x)^(2)))=((19)+((2)*((x)^(2)))))
nouth.les.AlteratorDiv@4e50df2e is messing around now.
It's altEx is (2)
on child (((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
AD pre(((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))=((2)*((x)^(2))))
AD prep((((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(2))=(((2)*((x)^(2)))/(2)))
AD presimp((((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(2))=(((2)*((x)^(2)))/(2)))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
DCSN in : (((-19)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))/(2))
DCSN dealt : (((-19)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))/(2))
DCSN listadd(((-19)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))^(1))
DCSN listadd((2)^(1))
DCSN in : (((2)*((x)^(2)))/(2))
DCSN dealt : (((x)^(2))/(1))
DCSN listadd((x)^(2))
DCSN listadd((1)^(1))
AD post(((((-19)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))^(1))/((2)^(1)))=((x)^(2)))
into val 1
nouth.les.AlteratorDiv@4e50df2e has brought me a new dirty child : (((((-19)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2)))^(1))/((2)^(1)))=((x)^(2)))
I've polished the child and now it looks like this : ((((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(2))=((x)^(2)))
It just propagated.
#hf 20000
#hf 20017
#hf 22017
#hf 30000
#hf 30018
#hf 32018
New unique children : <(((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*(x)*(x))) ; ((((-19)+(((2)^((1)/(2)))*(x))+((x)^(2)))/(2))=((x)^(2))) ; >
Children hfs : <22017 ; 32018 ; >
Children ops : <nouth.les.PowerCruncherExpand@34a245abnouth.les.AlteratorDiv@4e50df2e>
=====================================STATE 4 , generation 1
CurrState is (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
It's hf is 21021
It's parent's operator is : nouth.les.DefOperator@4d7e1886
It's operator is : nouth.les.PowerCruncherExpand@6b884d57
I'm (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x)))) and I'm about to propagate.
EqEx : ((1)+(((2)^((1)/(2)))*(x))+((x)*(x))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
nouth.les.AlteratorAdd@cc34f4d
adding it.
nouth.les.AlteratorAdd@17a7cec2
adding it.
EqEx : (((10)*(2))+((2)*(x)*(x))) is suggesting alterators now.
nouth.les.AlteratorAdd@65b3120a
adding it.
nouth.les.AlteratorAdd@6f539caf
adding it.
nouth.les.DivCruncherSimplifyNew@79fc0f2f is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@79fc0f2f has brought me a new dirty child : (((1)+(((2)^(((1)^(1))/((2)^(1))))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
nouth.les.DivCruncherEmergeDivs@50040f0c is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.PowerCruncherExpand@2dda6444 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.PowerCruncherConsolide@5e9f23b4 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.PowerCruncherProcessRaise@4783da3f is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.PowerCruncherSplitDen@378fd1ac is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.PowerCruncherSplitNum@49097b5d is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.MultiCruncherPlain@6e2c634b is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 1
nouth.les.MultiCruncherPlain@6e2c634b has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((20))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((20)+((2)*(x)*(x))))
nouth.les.MultiCruncherExpand@37a71e93 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@7e6cbb7a is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@7c3df479 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@7106e68e is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (x)
MCP res (((x)^(2)))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@7106e68e has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+(((x)^(2))))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.MultiCruncherPlain@7eda2dbb is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 1
nouth.les.MultiCruncherPlain@7eda2dbb has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((20))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((20)+((2)*(x)*(x))))
nouth.les.MultiCruncherExpand@6576fe71 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@76fb509a is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@300ffa5d is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@1f17ae12 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (x)
MCP res (((x)^(2)))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@1f17ae12 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+(((x)^(2))))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.AddCruncherEqual@4d405ef7 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
into val 0
nouth.les.AddCruncherSingleDenominator@6193b845 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex (((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
ACSD 0 deno is 1 of ((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))
ACSD 0 not addex (10)
ACSD 0 not addex (2)
ACSD 0 not addex ((10)*(2))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
ACSD 0 deno is 1 of (((10)*(2))+((2)*(x)*(x)))
ACSD 0 not addex (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.MultiCruncherPlain@2e817b38 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 1
nouth.les.MultiCruncherPlain@2e817b38 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((20))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((20)+((2)*(x)*(x))))
nouth.les.MultiCruncherExpand@c4437c4 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@433c675d is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@3f91beef is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@1a6c5a9e is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (x)
MCP res (((x)^(2)))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@1a6c5a9e has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+(((x)^(2))))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.MultiCruncherPlain@37bba400 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 1
nouth.les.MultiCruncherPlain@37bba400 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((20))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((20)+((2)*(x)*(x))))
nouth.les.MultiCruncherExpand@179d3b25 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@254989ff is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
mcd worklist (x)
mcd worklist (x)
mcd worklist (10)
mcd worklist (2)
mcd worklist (2)
mcd worklist (x)
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@5d099f62 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.MultiCruncherPowerise@37f8bb67 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res (((2)^((1)/(2)))*(x))
MCP adding (x)
MCP res (((x)^(2)))
MCP adding (10)
MCP adding (2)
MCP res ((10)*(2))
MCP adding (2)
MCP adding (x)
MCP res ((2)*((x)^(2)))
into val 4
nouth.les.MultiCruncherPowerise@37f8bb67 has brought me a new dirty child : (((1)+(((2)^((1)/(2)))*(x))+(((x)^(2))))=(((10)*(2))+((2)*((x)^(2)))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((x)^(2)))=(((10)*(2))+((2)*((x)^(2)))))
nouth.les.AddCruncherEqual@49c2faae is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
into val 0
nouth.les.AddCruncherSingleDenominator@20ad9418 is messing around now.
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex (((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((1)+(((2)^((1)/(2)))*(x))+((x)*(x))))
ACSD 0 deno is 1 of ((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))
ACSD 0 not addex (10)
ACSD 0 not addex (2)
ACSD 0 not addex ((10)*(2))
ACSD 0 not addex (2)
ACSD 0 not addex (x)
ACSD 0 not addex (x)
ACSD 0 not addex ((2)*(x)*(x))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((10)*(2))+((2)*(x)*(x))))
ACSD 0 deno is 1 of (((10)*(2))+((2)*(x)*(x)))
ACSD 0 not addex (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
into val 0
nouth.les.AlteratorAdd@cc34f4d is messing around now.
It's altEx is (((-1)*((2)^((1)/(2)))*(x))+((-1)*(x)*(x)))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ()
ACE rwif ((x)*(x))
comparing((x)*(x)) to ()
ACE rwif ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@cc34f4d has brought me a new dirty child : ((((0)*((2)^((1)/(2)))*(x))+((0)*(x)*(x))+((1)))=(((-1)*((2)^((1)/(2)))*(x))+((1)*(x)*(x))+((20))))
I've polished the child and now it looks like this : ((1)=((20)+((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
nouth.les.AlteratorAdd@17a7cec2 is messing around now.
It's altEx is (((-1)*(1)))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@17a7cec2 has brought me a new dirty child : ((((0))+((1)*((2)^((1)/(2)))*(x))+((1)*(x)*(x)))=(((19))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((((2)^((1)/(2)))*(x))+((x)*(x)))=((19)+((2)*(x)*(x))))
nouth.les.AlteratorAdd@65b3120a is messing around now.
It's altEx is (((-1)*(2)*(x)*(x)))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ()
ACE rwif ((x)*(x))
comparing((x)*(x)) to ()
ACE rwif ((x)*(x))
ACE rwif ((x)*(x))
comparing((x)*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@65b3120a has brought me a new dirty child : ((((-1)*(x)*(x))+((1))+((1)*((2)^((1)/(2)))*(x)))=(((0)*(x)*(x))+((20))))
I've polished the child and now it looks like this : (((1)+(((2)^((1)/(2)))*(x))+((-1)*(x)*(x)))=(20))
nouth.les.AlteratorAdd@6f539caf is messing around now.
It's altEx is (((-1)*(10)*(2)))
on child (((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=(((10)*(2))+((2)*(x)*(x))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to ((x)*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ((x)*(x))
ACE rwif ()
comparing() to ((x)*(x))
into val 1
nouth.les.AlteratorAdd@6f539caf has brought me a new dirty child : ((((-19))+((1)*((2)^((1)/(2)))*(x))+((1)*(x)*(x)))=(((0))+((2)*(x)*(x))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((2)*(x)*(x)))
It just propagated.
#hf 20000
#hf 20019
#hf 22019
#hf 20000
#hf 20018
#hf 22018
#hf 20000
#hf 20015
#hf 22015
New unique children : <(((1)+(((2)^((1)/(2)))*(x))+((x)*(x)))=((20)+((2)*(x)*(x)))) ; (((((2)^((1)/(2)))*(x))+((x)*(x)))=((19)+((2)*(x)*(x)))) ; (((1)+(((2)^((1)/(2)))*(x))+((-1)*(x)*(x)))=(20)) ; >
Children hfs : <22019 ; 22018 ; 22015 ; >
Children ops : <nouth.les.MultiCruncherPlain@6e2c634bnouth.les.AlteratorAdd@17a7cec2nouth.les.AlteratorAdd@65b3120a>
=====================================STATE 5 , generation 2
CurrState is ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
It's hf is 22014
It's parent's operator is : nouth.les.AlteratorAdd@4f023edb
It's operator is : nouth.les.AlteratorAdd@3b9a45b3
I'm ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))) and I'm about to propagate.
EqEx : (-19) is suggesting alterators now.
EqEx : (((-1)*((2)^((1)/(2)))*(x))+((x)^(2))) is suggesting alterators now.
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
nouth.les.AlteratorAdd@31cefde0
adding it.
nouth.les.DivCruncherSimplifyNew@439f5b3d is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
DCSN in : ((1)/(2))
DCSN dealt : ((1)/(2))
DCSN listadd((1)^(1))
DCSN listadd((2)^(1))
into val 1
nouth.les.DivCruncherSimplifyNew@439f5b3d has brought me a new dirty child : ((-19)=(((-1)*((2)^(((1)^(1))/((2)^(1))))*(x))+((x)^(2))))
I've polished the child and now it looks like this : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
nouth.les.DivCruncherEmergeDivs@1d56ce6a is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherExpand@5197848c is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 1
nouth.les.PowerCruncherExpand@5197848c has brought me a new dirty child : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
I've polished the child and now it looks like this : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
nouth.les.PowerCruncherConsolide@17f052a3 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@2e0fa5d3 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@5010be6 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@685f4c2e is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.MultiCruncherPlain@7daf6ecc is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.MultiCruncherExpand@2e5d6d97 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@238e0d81 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
mcd worklist (-1)
mcd worklist ((2)^((1)/(2)))
mcd worklist (x)
into val 0
nouth.les.MultiCruncherNumerator@31221be2 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.MultiCruncherPowerise@377dca04 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
MCP adding (-1)
MCP adding ((2)^((1)/(2)))
MCP adding (x)
MCP res ((-1)*((2)^((1)/(2)))*(x))
into val 1
nouth.les.MultiCruncherPowerise@377dca04 has brought me a new dirty child : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
I've polished the child and now it looks like this : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
nouth.les.PowerCruncherExpand@728938a9 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 1
nouth.les.PowerCruncherExpand@728938a9 has brought me a new dirty child : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
I've polished the child and now it looks like this : ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)*(x))))
nouth.les.PowerCruncherConsolide@21b8d17c is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherProcessRaise@6433a2 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitDen@5910e440 is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.PowerCruncherSplitNum@6267c3bb is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.AddCruncherEqual@533ddba is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
into val 0
nouth.les.AddCruncherSingleDenominator@246b179d is messing around now.
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 not addex (-19)
ACSD 0 not addex (-1)
ACSD 0 not addex (2)
ACSD 0 not addex (1)
ACSD 0 not addex (2)
ACSD 0 not addex ((1)/(2))
ACSD 0 not addex ((2)^((1)/(2)))
ACSD 0 not addex (x)
ACSD 0 not addex ((-1)*((2)^((1)/(2)))*(x))
ACSD 0 not addex (x)
ACSD 0 not addex (2)
ACSD 0 not addex ((x)^(2))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((x)^(2))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACSD 0 deno is 1 of (((-1)*((2)^((1)/(2)))*(x))+((x)^(2)))
ACSD 0 not addex ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
into val 0
nouth.les.AlteratorAdd@31cefde0 is messing around now.
It's altEx is (((-1)*((x)^(2)))+((-1)*(-1)*((2)^((1)/(2)))*(x)))
on child ((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)^(2))))
ACE rwif ()
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif ()
comparing() to (((2)^((1)/(2)))*(x))
ACE rwif (((x)^(2)))
ACE rwif ()
comparing() to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((2)^((1)/(2)))*(x))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
ACE rwif (((2)^((1)/(2)))*(x))
comparing(((2)^((1)/(2)))*(x)) to (((x)^(2)))
ACE rwif (((x)^(2)))
comparing(((x)^(2))) to (((x)^(2)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AlteratorAdd@31cefde0 has brought me a new dirty child : ((((-19))+((1)*((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(((0)*((2)^((1)/(2)))*(x))+((0)*((x)^(2)))))
I've polished the child and now it looks like this : (((-19)+(((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(0))
It just propagated.
#hf 20000
#hf 20014
#hf 23014
New unique children : <((-19)=(((-1)*((2)^((1)/(2)))*(x))+((x)*(x)))) ; (((-19)+(((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(0)) ; >
Children hfs : <23014 ; 0 ; >
Children ops : <nouth.les.PowerCruncherExpand@5197848cnouth.les.AlteratorAdd@31cefde0>
=====================================STATE 6 , generation 3
CurrState is (((-19)+(((2)^((1)/(2)))*(x))+((-1)*((x)^(2))))=(0))
It's hf is 0
It's parent's operator is : nouth.les.AlteratorAdd@3b9a45b3
It's operator is : nouth.les.AlteratorAdd@31cefde0
Result found !
Solutionmaker rank = 2
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
ComputeSearcher loop 1 start ,bestHf 5 bestChildHf -1 open size 1 closed size 0
State 0-1 propagating
I'm ((0)+((-1)*(1))) and I'm about to propagate.
nouth.les.MultiCruncherPlain@3d646c37 is messing around now.
on child ((0)+((-1)*(1)))
into val 1
nouth.les.MultiCruncherPlain@3d646c37 has brought me a new dirty child : ((0)+((-1)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1))
I've polished the child and now it looks like this : ((-1))
nouth.les.MultiCruncherExpand@41cf53f9 is messing around now.
on child ((0)+((-1)*(1)))
MCE target not multiex 0
MCE target not multiex 0
MCE target not multiex 0
MCE addlist size 0
MCE target not multiex 0
into val 0
nouth.les.MultiCruncherDivs@5a10411 is messing around now.
on child ((0)+((-1)*(1)))
mcd worklist (-1)
mcd worklist (1)
into val 0
nouth.les.MultiCruncherNumerator@2ef1e4fa is messing around now.
on child ((0)+((-1)*(1)))
into val 0
nouth.les.MultiCruncherPowerise@306a30c7 is messing around now.
on child ((0)+((-1)*(1)))
MCP adding (-1)
MCP adding (1)
MCP res ((-1)*(1))
into val 1
nouth.les.MultiCruncherPowerise@306a30c7 has brought me a new dirty child : ((0)+((-1)*(1)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*(1)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*(1)))
I've polished the child and now it looks like this : (((-1)*(1)))
nouth.les.AddCruncherEqual@b81eda8 is messing around now.
on child ((0)+((-1)*(1)))
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
ACE rwif ()
ACE rwif ()
ACE rwif ()
comparing() to ()
into val 1
nouth.les.AddCruncherEqual@b81eda8 has brought me a new dirty child : (((-1)))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : ((-1))
I've polished the child and now it looks like this : ((-1))
nouth.les.AddCruncherSingleDenominator@68de145 is messing around now.
on child ((0)+((-1)*(1)))
ACSD 0 not addex (0)
ACSD 0 not addex (-1)
ACSD 0 not addex (1)
ACSD 0 not addex ((-1)*(1))
DCS start ((1)/(1))
DCS crossing out (1)
DCS after crossout before single plain :((1)) / ((1))
DCS single plain :((1)) / ((1))
DCS computing gcd from 1 and 1 = 1
DCS resulting ((1)/(1))
ACSD polished unide is (1)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (0)
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*(1))/(1))
Warning ! Replaceself attempt on an orphan Ex. Ignoring. I am : (((-1)*(1))/(1))
ACSD 0 deno is 1 of ((0)+((-1)*(1)))
into val 0
Comsearcher checkagainst : ((0)+((-1)*(1)))
Comsearcher is new : ((-1))
ComputeSearcher loop 1 end bestHf 5 bestChildHf 2 open size 1 closed size 0
bestchild val is below best.
ComputeSearcher loop 2 start ,bestHf 2 bestChildHf -1 open size 0 closed size 0
ComputeSearcher loop 2 end bestHf 2 bestChildHf -1 open size 0 closed size 0
No more children
